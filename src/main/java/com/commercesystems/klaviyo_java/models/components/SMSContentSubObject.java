/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class SMSContentSubObject {

    /**
     * The message body
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    private JsonNullable<String> body;

    /**
     * URL for included media
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("media_url")
    private JsonNullable<String> mediaUrl;

    @JsonCreator
    public SMSContentSubObject(
            @JsonProperty("body") JsonNullable<String> body,
            @JsonProperty("media_url") JsonNullable<String> mediaUrl) {
        Utils.checkNotNull(body, "body");
        Utils.checkNotNull(mediaUrl, "mediaUrl");
        this.body = body;
        this.mediaUrl = mediaUrl;
    }
    
    public SMSContentSubObject() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The message body
     */
    @JsonIgnore
    public JsonNullable<String> body() {
        return body;
    }

    /**
     * URL for included media
     */
    @JsonIgnore
    public JsonNullable<String> mediaUrl() {
        return mediaUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The message body
     */
    public SMSContentSubObject withBody(String body) {
        Utils.checkNotNull(body, "body");
        this.body = JsonNullable.of(body);
        return this;
    }

    /**
     * The message body
     */
    public SMSContentSubObject withBody(JsonNullable<String> body) {
        Utils.checkNotNull(body, "body");
        this.body = body;
        return this;
    }

    /**
     * URL for included media
     */
    public SMSContentSubObject withMediaUrl(String mediaUrl) {
        Utils.checkNotNull(mediaUrl, "mediaUrl");
        this.mediaUrl = JsonNullable.of(mediaUrl);
        return this;
    }

    /**
     * URL for included media
     */
    public SMSContentSubObject withMediaUrl(JsonNullable<String> mediaUrl) {
        Utils.checkNotNull(mediaUrl, "mediaUrl");
        this.mediaUrl = mediaUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SMSContentSubObject other = (SMSContentSubObject) o;
        return 
            Objects.deepEquals(this.body, other.body) &&
            Objects.deepEquals(this.mediaUrl, other.mediaUrl);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            body,
            mediaUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SMSContentSubObject.class,
                "body", body,
                "mediaUrl", mediaUrl);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> body = JsonNullable.undefined();
 
        private JsonNullable<String> mediaUrl = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The message body
         */
        public Builder body(String body) {
            Utils.checkNotNull(body, "body");
            this.body = JsonNullable.of(body);
            return this;
        }

        /**
         * The message body
         */
        public Builder body(JsonNullable<String> body) {
            Utils.checkNotNull(body, "body");
            this.body = body;
            return this;
        }

        /**
         * URL for included media
         */
        public Builder mediaUrl(String mediaUrl) {
            Utils.checkNotNull(mediaUrl, "mediaUrl");
            this.mediaUrl = JsonNullable.of(mediaUrl);
            return this;
        }

        /**
         * URL for included media
         */
        public Builder mediaUrl(JsonNullable<String> mediaUrl) {
            Utils.checkNotNull(mediaUrl, "mediaUrl");
            this.mediaUrl = mediaUrl;
            return this;
        }
        
        public SMSContentSubObject build() {
            return new SMSContentSubObject(
                body,
                mediaUrl);
        }
    }
}

