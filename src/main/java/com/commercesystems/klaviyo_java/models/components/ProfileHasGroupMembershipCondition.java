/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class ProfileHasGroupMembershipCondition {

    @JsonProperty("type")
    private ProfileGroupMembershipEnum type;

    @JsonProperty("is_member")
    private IsMember isMember;

    @JsonProperty("group_ids")
    private List<String> groupIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeframe_filter")
    private JsonNullable<? extends TimeframeFilter> timeframeFilter;

    @JsonCreator
    public ProfileHasGroupMembershipCondition(
            @JsonProperty("type") ProfileGroupMembershipEnum type,
            @JsonProperty("is_member") IsMember isMember,
            @JsonProperty("group_ids") List<String> groupIds,
            @JsonProperty("timeframe_filter") JsonNullable<? extends TimeframeFilter> timeframeFilter) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(isMember, "isMember");
        Utils.checkNotNull(groupIds, "groupIds");
        Utils.checkNotNull(timeframeFilter, "timeframeFilter");
        this.type = type;
        this.isMember = isMember;
        this.groupIds = groupIds;
        this.timeframeFilter = timeframeFilter;
    }
    
    public ProfileHasGroupMembershipCondition(
            ProfileGroupMembershipEnum type,
            IsMember isMember,
            List<String> groupIds) {
        this(type, isMember, groupIds, JsonNullable.undefined());
    }

    @JsonIgnore
    public ProfileGroupMembershipEnum type() {
        return type;
    }

    @JsonIgnore
    public IsMember isMember() {
        return isMember;
    }

    @JsonIgnore
    public List<String> groupIds() {
        return groupIds;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TimeframeFilter> timeframeFilter() {
        return (JsonNullable<TimeframeFilter>) timeframeFilter;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ProfileHasGroupMembershipCondition withType(ProfileGroupMembershipEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public ProfileHasGroupMembershipCondition withIsMember(IsMember isMember) {
        Utils.checkNotNull(isMember, "isMember");
        this.isMember = isMember;
        return this;
    }

    public ProfileHasGroupMembershipCondition withGroupIds(List<String> groupIds) {
        Utils.checkNotNull(groupIds, "groupIds");
        this.groupIds = groupIds;
        return this;
    }

    public ProfileHasGroupMembershipCondition withTimeframeFilter(TimeframeFilter timeframeFilter) {
        Utils.checkNotNull(timeframeFilter, "timeframeFilter");
        this.timeframeFilter = JsonNullable.of(timeframeFilter);
        return this;
    }

    public ProfileHasGroupMembershipCondition withTimeframeFilter(JsonNullable<? extends TimeframeFilter> timeframeFilter) {
        Utils.checkNotNull(timeframeFilter, "timeframeFilter");
        this.timeframeFilter = timeframeFilter;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProfileHasGroupMembershipCondition other = (ProfileHasGroupMembershipCondition) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.isMember, other.isMember) &&
            Objects.deepEquals(this.groupIds, other.groupIds) &&
            Objects.deepEquals(this.timeframeFilter, other.timeframeFilter);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            isMember,
            groupIds,
            timeframeFilter);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProfileHasGroupMembershipCondition.class,
                "type", type,
                "isMember", isMember,
                "groupIds", groupIds,
                "timeframeFilter", timeframeFilter);
    }
    
    public final static class Builder {
 
        private ProfileGroupMembershipEnum type;
 
        private IsMember isMember;
 
        private List<String> groupIds;
 
        private JsonNullable<? extends TimeframeFilter> timeframeFilter = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder type(ProfileGroupMembershipEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder isMember(IsMember isMember) {
            Utils.checkNotNull(isMember, "isMember");
            this.isMember = isMember;
            return this;
        }

        public Builder groupIds(List<String> groupIds) {
            Utils.checkNotNull(groupIds, "groupIds");
            this.groupIds = groupIds;
            return this;
        }

        public Builder timeframeFilter(TimeframeFilter timeframeFilter) {
            Utils.checkNotNull(timeframeFilter, "timeframeFilter");
            this.timeframeFilter = JsonNullable.of(timeframeFilter);
            return this;
        }

        public Builder timeframeFilter(JsonNullable<? extends TimeframeFilter> timeframeFilter) {
            Utils.checkNotNull(timeframeFilter, "timeframeFilter");
            this.timeframeFilter = timeframeFilter;
            return this;
        }
        
        public ProfileHasGroupMembershipCondition build() {
            return new ProfileHasGroupMembershipCondition(
                type,
                isMember,
                groupIds,
                timeframeFilter);
        }
    }
}

