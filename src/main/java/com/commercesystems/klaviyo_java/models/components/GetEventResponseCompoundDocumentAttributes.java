/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class GetEventResponseCompoundDocumentAttributes {

    /**
     * Event timestamp in seconds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestamp")
    private JsonNullable<Long> timestamp;

    /**
     * Event properties, can include identifiers and extra properties
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_properties")
    private JsonNullable<? extends GetEventResponseCompoundDocumentEventProperties> eventProperties;

    /**
     * Event timestamp in ISO8601 format (YYYY-MM-DDTHH:MM:SS+hh:mm)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datetime")
    private JsonNullable<OffsetDateTime> datetime;

    /**
     * A unique identifier for the event, this can be used as a cursor in pagination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    private JsonNullable<String> uuid;

    @JsonCreator
    public GetEventResponseCompoundDocumentAttributes(
            @JsonProperty("timestamp") JsonNullable<Long> timestamp,
            @JsonProperty("event_properties") JsonNullable<? extends GetEventResponseCompoundDocumentEventProperties> eventProperties,
            @JsonProperty("datetime") JsonNullable<OffsetDateTime> datetime,
            @JsonProperty("uuid") JsonNullable<String> uuid) {
        Utils.checkNotNull(timestamp, "timestamp");
        Utils.checkNotNull(eventProperties, "eventProperties");
        Utils.checkNotNull(datetime, "datetime");
        Utils.checkNotNull(uuid, "uuid");
        this.timestamp = timestamp;
        this.eventProperties = eventProperties;
        this.datetime = datetime;
        this.uuid = uuid;
    }
    
    public GetEventResponseCompoundDocumentAttributes() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Event timestamp in seconds
     */
    @JsonIgnore
    public JsonNullable<Long> timestamp() {
        return timestamp;
    }

    /**
     * Event properties, can include identifiers and extra properties
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GetEventResponseCompoundDocumentEventProperties> eventProperties() {
        return (JsonNullable<GetEventResponseCompoundDocumentEventProperties>) eventProperties;
    }

    /**
     * Event timestamp in ISO8601 format (YYYY-MM-DDTHH:MM:SS+hh:mm)
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> datetime() {
        return datetime;
    }

    /**
     * A unique identifier for the event, this can be used as a cursor in pagination
     */
    @JsonIgnore
    public JsonNullable<String> uuid() {
        return uuid;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Event timestamp in seconds
     */
    public GetEventResponseCompoundDocumentAttributes withTimestamp(long timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = JsonNullable.of(timestamp);
        return this;
    }

    /**
     * Event timestamp in seconds
     */
    public GetEventResponseCompoundDocumentAttributes withTimestamp(JsonNullable<Long> timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Event properties, can include identifiers and extra properties
     */
    public GetEventResponseCompoundDocumentAttributes withEventProperties(GetEventResponseCompoundDocumentEventProperties eventProperties) {
        Utils.checkNotNull(eventProperties, "eventProperties");
        this.eventProperties = JsonNullable.of(eventProperties);
        return this;
    }

    /**
     * Event properties, can include identifiers and extra properties
     */
    public GetEventResponseCompoundDocumentAttributes withEventProperties(JsonNullable<? extends GetEventResponseCompoundDocumentEventProperties> eventProperties) {
        Utils.checkNotNull(eventProperties, "eventProperties");
        this.eventProperties = eventProperties;
        return this;
    }

    /**
     * Event timestamp in ISO8601 format (YYYY-MM-DDTHH:MM:SS+hh:mm)
     */
    public GetEventResponseCompoundDocumentAttributes withDatetime(OffsetDateTime datetime) {
        Utils.checkNotNull(datetime, "datetime");
        this.datetime = JsonNullable.of(datetime);
        return this;
    }

    /**
     * Event timestamp in ISO8601 format (YYYY-MM-DDTHH:MM:SS+hh:mm)
     */
    public GetEventResponseCompoundDocumentAttributes withDatetime(JsonNullable<OffsetDateTime> datetime) {
        Utils.checkNotNull(datetime, "datetime");
        this.datetime = datetime;
        return this;
    }

    /**
     * A unique identifier for the event, this can be used as a cursor in pagination
     */
    public GetEventResponseCompoundDocumentAttributes withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = JsonNullable.of(uuid);
        return this;
    }

    /**
     * A unique identifier for the event, this can be used as a cursor in pagination
     */
    public GetEventResponseCompoundDocumentAttributes withUuid(JsonNullable<String> uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetEventResponseCompoundDocumentAttributes other = (GetEventResponseCompoundDocumentAttributes) o;
        return 
            Objects.deepEquals(this.timestamp, other.timestamp) &&
            Objects.deepEquals(this.eventProperties, other.eventProperties) &&
            Objects.deepEquals(this.datetime, other.datetime) &&
            Objects.deepEquals(this.uuid, other.uuid);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            timestamp,
            eventProperties,
            datetime,
            uuid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetEventResponseCompoundDocumentAttributes.class,
                "timestamp", timestamp,
                "eventProperties", eventProperties,
                "datetime", datetime,
                "uuid", uuid);
    }
    
    public final static class Builder {
 
        private JsonNullable<Long> timestamp = JsonNullable.undefined();
 
        private JsonNullable<? extends GetEventResponseCompoundDocumentEventProperties> eventProperties = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> datetime = JsonNullable.undefined();
 
        private JsonNullable<String> uuid = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Event timestamp in seconds
         */
        public Builder timestamp(long timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = JsonNullable.of(timestamp);
            return this;
        }

        /**
         * Event timestamp in seconds
         */
        public Builder timestamp(JsonNullable<Long> timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }

        /**
         * Event properties, can include identifiers and extra properties
         */
        public Builder eventProperties(GetEventResponseCompoundDocumentEventProperties eventProperties) {
            Utils.checkNotNull(eventProperties, "eventProperties");
            this.eventProperties = JsonNullable.of(eventProperties);
            return this;
        }

        /**
         * Event properties, can include identifiers and extra properties
         */
        public Builder eventProperties(JsonNullable<? extends GetEventResponseCompoundDocumentEventProperties> eventProperties) {
            Utils.checkNotNull(eventProperties, "eventProperties");
            this.eventProperties = eventProperties;
            return this;
        }

        /**
         * Event timestamp in ISO8601 format (YYYY-MM-DDTHH:MM:SS+hh:mm)
         */
        public Builder datetime(OffsetDateTime datetime) {
            Utils.checkNotNull(datetime, "datetime");
            this.datetime = JsonNullable.of(datetime);
            return this;
        }

        /**
         * Event timestamp in ISO8601 format (YYYY-MM-DDTHH:MM:SS+hh:mm)
         */
        public Builder datetime(JsonNullable<OffsetDateTime> datetime) {
            Utils.checkNotNull(datetime, "datetime");
            this.datetime = datetime;
            return this;
        }

        /**
         * A unique identifier for the event, this can be used as a cursor in pagination
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = JsonNullable.of(uuid);
            return this;
        }

        /**
         * A unique identifier for the event, this can be used as a cursor in pagination
         */
        public Builder uuid(JsonNullable<String> uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }
        
        public GetEventResponseCompoundDocumentAttributes build() {
            return new GetEventResponseCompoundDocumentAttributes(
                timestamp,
                eventProperties,
                datetime,
                uuid);
        }
    }
}

