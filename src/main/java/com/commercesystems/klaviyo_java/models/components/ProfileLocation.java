/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class ProfileLocation {

    /**
     * First line of street address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address1")
    private JsonNullable<String> address1;

    /**
     * Second line of street address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address2")
    private JsonNullable<String> address2;

    /**
     * City name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private JsonNullable<String> city;

    /**
     * Country name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    /**
     * Latitude coordinate. We recommend providing a precision of four decimal places.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latitude")
    private JsonNullable<? extends Latitude> latitude;

    /**
     * Longitude coordinate. We recommend providing a precision of four decimal places.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longitude")
    private JsonNullable<? extends Longitude> longitude;

    /**
     * Region within a country, such as state or province
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    private JsonNullable<String> region;

    /**
     * Zip code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zip")
    private JsonNullable<String> zip;

    /**
     * Time zone name. We recommend using time zones from the IANA Time Zone Database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    private JsonNullable<String> timezone;

    /**
     * IP Address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip")
    private JsonNullable<String> ip;

    @JsonCreator
    public ProfileLocation(
            @JsonProperty("address1") JsonNullable<String> address1,
            @JsonProperty("address2") JsonNullable<String> address2,
            @JsonProperty("city") JsonNullable<String> city,
            @JsonProperty("country") JsonNullable<String> country,
            @JsonProperty("latitude") JsonNullable<? extends Latitude> latitude,
            @JsonProperty("longitude") JsonNullable<? extends Longitude> longitude,
            @JsonProperty("region") JsonNullable<String> region,
            @JsonProperty("zip") JsonNullable<String> zip,
            @JsonProperty("timezone") JsonNullable<String> timezone,
            @JsonProperty("ip") JsonNullable<String> ip) {
        Utils.checkNotNull(address1, "address1");
        Utils.checkNotNull(address2, "address2");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(latitude, "latitude");
        Utils.checkNotNull(longitude, "longitude");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(zip, "zip");
        Utils.checkNotNull(timezone, "timezone");
        Utils.checkNotNull(ip, "ip");
        this.address1 = address1;
        this.address2 = address2;
        this.city = city;
        this.country = country;
        this.latitude = latitude;
        this.longitude = longitude;
        this.region = region;
        this.zip = zip;
        this.timezone = timezone;
        this.ip = ip;
    }
    
    public ProfileLocation() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * First line of street address
     */
    @JsonIgnore
    public JsonNullable<String> address1() {
        return address1;
    }

    /**
     * Second line of street address
     */
    @JsonIgnore
    public JsonNullable<String> address2() {
        return address2;
    }

    /**
     * City name
     */
    @JsonIgnore
    public JsonNullable<String> city() {
        return city;
    }

    /**
     * Country name
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    /**
     * Latitude coordinate. We recommend providing a precision of four decimal places.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Latitude> latitude() {
        return (JsonNullable<Latitude>) latitude;
    }

    /**
     * Longitude coordinate. We recommend providing a precision of four decimal places.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Longitude> longitude() {
        return (JsonNullable<Longitude>) longitude;
    }

    /**
     * Region within a country, such as state or province
     */
    @JsonIgnore
    public JsonNullable<String> region() {
        return region;
    }

    /**
     * Zip code
     */
    @JsonIgnore
    public JsonNullable<String> zip() {
        return zip;
    }

    /**
     * Time zone name. We recommend using time zones from the IANA Time Zone Database.
     */
    @JsonIgnore
    public JsonNullable<String> timezone() {
        return timezone;
    }

    /**
     * IP Address
     */
    @JsonIgnore
    public JsonNullable<String> ip() {
        return ip;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * First line of street address
     */
    public ProfileLocation withAddress1(String address1) {
        Utils.checkNotNull(address1, "address1");
        this.address1 = JsonNullable.of(address1);
        return this;
    }

    /**
     * First line of street address
     */
    public ProfileLocation withAddress1(JsonNullable<String> address1) {
        Utils.checkNotNull(address1, "address1");
        this.address1 = address1;
        return this;
    }

    /**
     * Second line of street address
     */
    public ProfileLocation withAddress2(String address2) {
        Utils.checkNotNull(address2, "address2");
        this.address2 = JsonNullable.of(address2);
        return this;
    }

    /**
     * Second line of street address
     */
    public ProfileLocation withAddress2(JsonNullable<String> address2) {
        Utils.checkNotNull(address2, "address2");
        this.address2 = address2;
        return this;
    }

    /**
     * City name
     */
    public ProfileLocation withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = JsonNullable.of(city);
        return this;
    }

    /**
     * City name
     */
    public ProfileLocation withCity(JsonNullable<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * Country name
     */
    public ProfileLocation withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * Country name
     */
    public ProfileLocation withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Latitude coordinate. We recommend providing a precision of four decimal places.
     */
    public ProfileLocation withLatitude(Latitude latitude) {
        Utils.checkNotNull(latitude, "latitude");
        this.latitude = JsonNullable.of(latitude);
        return this;
    }

    /**
     * Latitude coordinate. We recommend providing a precision of four decimal places.
     */
    public ProfileLocation withLatitude(JsonNullable<? extends Latitude> latitude) {
        Utils.checkNotNull(latitude, "latitude");
        this.latitude = latitude;
        return this;
    }

    /**
     * Longitude coordinate. We recommend providing a precision of four decimal places.
     */
    public ProfileLocation withLongitude(Longitude longitude) {
        Utils.checkNotNull(longitude, "longitude");
        this.longitude = JsonNullable.of(longitude);
        return this;
    }

    /**
     * Longitude coordinate. We recommend providing a precision of four decimal places.
     */
    public ProfileLocation withLongitude(JsonNullable<? extends Longitude> longitude) {
        Utils.checkNotNull(longitude, "longitude");
        this.longitude = longitude;
        return this;
    }

    /**
     * Region within a country, such as state or province
     */
    public ProfileLocation withRegion(String region) {
        Utils.checkNotNull(region, "region");
        this.region = JsonNullable.of(region);
        return this;
    }

    /**
     * Region within a country, such as state or province
     */
    public ProfileLocation withRegion(JsonNullable<String> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * Zip code
     */
    public ProfileLocation withZip(String zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = JsonNullable.of(zip);
        return this;
    }

    /**
     * Zip code
     */
    public ProfileLocation withZip(JsonNullable<String> zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = zip;
        return this;
    }

    /**
     * Time zone name. We recommend using time zones from the IANA Time Zone Database.
     */
    public ProfileLocation withTimezone(String timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = JsonNullable.of(timezone);
        return this;
    }

    /**
     * Time zone name. We recommend using time zones from the IANA Time Zone Database.
     */
    public ProfileLocation withTimezone(JsonNullable<String> timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = timezone;
        return this;
    }

    /**
     * IP Address
     */
    public ProfileLocation withIp(String ip) {
        Utils.checkNotNull(ip, "ip");
        this.ip = JsonNullable.of(ip);
        return this;
    }

    /**
     * IP Address
     */
    public ProfileLocation withIp(JsonNullable<String> ip) {
        Utils.checkNotNull(ip, "ip");
        this.ip = ip;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProfileLocation other = (ProfileLocation) o;
        return 
            Objects.deepEquals(this.address1, other.address1) &&
            Objects.deepEquals(this.address2, other.address2) &&
            Objects.deepEquals(this.city, other.city) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.latitude, other.latitude) &&
            Objects.deepEquals(this.longitude, other.longitude) &&
            Objects.deepEquals(this.region, other.region) &&
            Objects.deepEquals(this.zip, other.zip) &&
            Objects.deepEquals(this.timezone, other.timezone) &&
            Objects.deepEquals(this.ip, other.ip);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            address1,
            address2,
            city,
            country,
            latitude,
            longitude,
            region,
            zip,
            timezone,
            ip);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProfileLocation.class,
                "address1", address1,
                "address2", address2,
                "city", city,
                "country", country,
                "latitude", latitude,
                "longitude", longitude,
                "region", region,
                "zip", zip,
                "timezone", timezone,
                "ip", ip);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> address1 = JsonNullable.undefined();
 
        private JsonNullable<String> address2 = JsonNullable.undefined();
 
        private JsonNullable<String> city = JsonNullable.undefined();
 
        private JsonNullable<String> country = JsonNullable.undefined();
 
        private JsonNullable<? extends Latitude> latitude = JsonNullable.undefined();
 
        private JsonNullable<? extends Longitude> longitude = JsonNullable.undefined();
 
        private JsonNullable<String> region = JsonNullable.undefined();
 
        private JsonNullable<String> zip = JsonNullable.undefined();
 
        private JsonNullable<String> timezone = JsonNullable.undefined();
 
        private JsonNullable<String> ip = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * First line of street address
         */
        public Builder address1(String address1) {
            Utils.checkNotNull(address1, "address1");
            this.address1 = JsonNullable.of(address1);
            return this;
        }

        /**
         * First line of street address
         */
        public Builder address1(JsonNullable<String> address1) {
            Utils.checkNotNull(address1, "address1");
            this.address1 = address1;
            return this;
        }

        /**
         * Second line of street address
         */
        public Builder address2(String address2) {
            Utils.checkNotNull(address2, "address2");
            this.address2 = JsonNullable.of(address2);
            return this;
        }

        /**
         * Second line of street address
         */
        public Builder address2(JsonNullable<String> address2) {
            Utils.checkNotNull(address2, "address2");
            this.address2 = address2;
            return this;
        }

        /**
         * City name
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = JsonNullable.of(city);
            return this;
        }

        /**
         * City name
         */
        public Builder city(JsonNullable<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * Country name
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * Country name
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * Latitude coordinate. We recommend providing a precision of four decimal places.
         */
        public Builder latitude(Latitude latitude) {
            Utils.checkNotNull(latitude, "latitude");
            this.latitude = JsonNullable.of(latitude);
            return this;
        }

        /**
         * Latitude coordinate. We recommend providing a precision of four decimal places.
         */
        public Builder latitude(JsonNullable<? extends Latitude> latitude) {
            Utils.checkNotNull(latitude, "latitude");
            this.latitude = latitude;
            return this;
        }

        /**
         * Longitude coordinate. We recommend providing a precision of four decimal places.
         */
        public Builder longitude(Longitude longitude) {
            Utils.checkNotNull(longitude, "longitude");
            this.longitude = JsonNullable.of(longitude);
            return this;
        }

        /**
         * Longitude coordinate. We recommend providing a precision of four decimal places.
         */
        public Builder longitude(JsonNullable<? extends Longitude> longitude) {
            Utils.checkNotNull(longitude, "longitude");
            this.longitude = longitude;
            return this;
        }

        /**
         * Region within a country, such as state or province
         */
        public Builder region(String region) {
            Utils.checkNotNull(region, "region");
            this.region = JsonNullable.of(region);
            return this;
        }

        /**
         * Region within a country, such as state or province
         */
        public Builder region(JsonNullable<String> region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        /**
         * Zip code
         */
        public Builder zip(String zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = JsonNullable.of(zip);
            return this;
        }

        /**
         * Zip code
         */
        public Builder zip(JsonNullable<String> zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = zip;
            return this;
        }

        /**
         * Time zone name. We recommend using time zones from the IANA Time Zone Database.
         */
        public Builder timezone(String timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = JsonNullable.of(timezone);
            return this;
        }

        /**
         * Time zone name. We recommend using time zones from the IANA Time Zone Database.
         */
        public Builder timezone(JsonNullable<String> timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = timezone;
            return this;
        }

        /**
         * IP Address
         */
        public Builder ip(String ip) {
            Utils.checkNotNull(ip, "ip");
            this.ip = JsonNullable.of(ip);
            return this;
        }

        /**
         * IP Address
         */
        public Builder ip(JsonNullable<String> ip) {
            Utils.checkNotNull(ip, "ip");
            this.ip = ip;
            return this;
        }
        
        public ProfileLocation build() {
            return new ProfileLocation(
                address1,
                address2,
                city,
                country,
                latitude,
                longitude,
                region,
                zip,
                timezone,
                ip);
        }
    }
}

