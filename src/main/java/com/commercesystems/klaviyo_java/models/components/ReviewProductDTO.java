/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class ReviewProductDTO {

    /**
     * The URL of the product
     */
    @JsonProperty("url")
    private String url;

    /**
     * The name of the product
     */
    @JsonProperty("name")
    private String name;

    /**
     * The URL of the product image
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("image_url")
    private Optional<String> imageUrl;

    @JsonCreator
    public ReviewProductDTO(
            @JsonProperty("url") String url,
            @JsonProperty("name") String name,
            @JsonProperty("image_url") Optional<String> imageUrl) {
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.url = url;
        this.name = name;
        this.imageUrl = imageUrl;
    }
    
    public ReviewProductDTO(
            String url,
            String name) {
        this(url, name, Optional.empty());
    }

    /**
     * The URL of the product
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    /**
     * The name of the product
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The URL of the product image
     */
    @JsonIgnore
    public Optional<String> imageUrl() {
        return imageUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The URL of the product
     */
    public ReviewProductDTO withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The name of the product
     */
    public ReviewProductDTO withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The URL of the product image
     */
    public ReviewProductDTO withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = Optional.ofNullable(imageUrl);
        return this;
    }

    /**
     * The URL of the product image
     */
    public ReviewProductDTO withImageUrl(Optional<String> imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReviewProductDTO other = (ReviewProductDTO) o;
        return 
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.imageUrl, other.imageUrl);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            url,
            name,
            imageUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReviewProductDTO.class,
                "url", url,
                "name", name,
                "imageUrl", imageUrl);
    }
    
    public final static class Builder {
 
        private String url;
 
        private String name;
 
        private Optional<String> imageUrl = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The URL of the product
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * The name of the product
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The URL of the product image
         */
        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = Optional.ofNullable(imageUrl);
            return this;
        }

        /**
         * The URL of the product image
         */
        public Builder imageUrl(Optional<String> imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }
        
        public ReviewProductDTO build() {
            return new ReviewProductDTO(
                url,
                name,
                imageUrl);
        }
    }
}

