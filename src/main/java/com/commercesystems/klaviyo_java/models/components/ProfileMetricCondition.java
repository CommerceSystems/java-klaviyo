/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class ProfileMetricCondition {

    @JsonProperty("type")
    private ProfileMetricEnum type;

    @JsonProperty("metric_id")
    private String metricId;

    /**
     * Measurements for profile metrics.
     */
    @JsonProperty("measurement")
    private Measurement measurement;

    @JsonProperty("measurement_filter")
    private NumericOperatorFilter measurementFilter;

    @JsonProperty("timeframe_filter")
    private ProfileMetricConditionTimeframeFilter timeframeFilter;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metric_filters")
    private JsonNullable<? extends List<ProfileMetricPropertyFilter>> metricFilters;

    @JsonCreator
    public ProfileMetricCondition(
            @JsonProperty("type") ProfileMetricEnum type,
            @JsonProperty("metric_id") String metricId,
            @JsonProperty("measurement") Measurement measurement,
            @JsonProperty("measurement_filter") NumericOperatorFilter measurementFilter,
            @JsonProperty("timeframe_filter") ProfileMetricConditionTimeframeFilter timeframeFilter,
            @JsonProperty("metric_filters") JsonNullable<? extends List<ProfileMetricPropertyFilter>> metricFilters) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(metricId, "metricId");
        Utils.checkNotNull(measurement, "measurement");
        Utils.checkNotNull(measurementFilter, "measurementFilter");
        Utils.checkNotNull(timeframeFilter, "timeframeFilter");
        Utils.checkNotNull(metricFilters, "metricFilters");
        this.type = type;
        this.metricId = metricId;
        this.measurement = measurement;
        this.measurementFilter = measurementFilter;
        this.timeframeFilter = timeframeFilter;
        this.metricFilters = metricFilters;
    }
    
    public ProfileMetricCondition(
            ProfileMetricEnum type,
            String metricId,
            Measurement measurement,
            NumericOperatorFilter measurementFilter,
            ProfileMetricConditionTimeframeFilter timeframeFilter) {
        this(type, metricId, measurement, measurementFilter, timeframeFilter, JsonNullable.undefined());
    }

    @JsonIgnore
    public ProfileMetricEnum type() {
        return type;
    }

    @JsonIgnore
    public String metricId() {
        return metricId;
    }

    /**
     * Measurements for profile metrics.
     */
    @JsonIgnore
    public Measurement measurement() {
        return measurement;
    }

    @JsonIgnore
    public NumericOperatorFilter measurementFilter() {
        return measurementFilter;
    }

    @JsonIgnore
    public ProfileMetricConditionTimeframeFilter timeframeFilter() {
        return timeframeFilter;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<ProfileMetricPropertyFilter>> metricFilters() {
        return (JsonNullable<List<ProfileMetricPropertyFilter>>) metricFilters;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ProfileMetricCondition withType(ProfileMetricEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public ProfileMetricCondition withMetricId(String metricId) {
        Utils.checkNotNull(metricId, "metricId");
        this.metricId = metricId;
        return this;
    }

    /**
     * Measurements for profile metrics.
     */
    public ProfileMetricCondition withMeasurement(Measurement measurement) {
        Utils.checkNotNull(measurement, "measurement");
        this.measurement = measurement;
        return this;
    }

    public ProfileMetricCondition withMeasurementFilter(NumericOperatorFilter measurementFilter) {
        Utils.checkNotNull(measurementFilter, "measurementFilter");
        this.measurementFilter = measurementFilter;
        return this;
    }

    public ProfileMetricCondition withTimeframeFilter(ProfileMetricConditionTimeframeFilter timeframeFilter) {
        Utils.checkNotNull(timeframeFilter, "timeframeFilter");
        this.timeframeFilter = timeframeFilter;
        return this;
    }

    public ProfileMetricCondition withMetricFilters(List<ProfileMetricPropertyFilter> metricFilters) {
        Utils.checkNotNull(metricFilters, "metricFilters");
        this.metricFilters = JsonNullable.of(metricFilters);
        return this;
    }

    public ProfileMetricCondition withMetricFilters(JsonNullable<? extends List<ProfileMetricPropertyFilter>> metricFilters) {
        Utils.checkNotNull(metricFilters, "metricFilters");
        this.metricFilters = metricFilters;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProfileMetricCondition other = (ProfileMetricCondition) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.metricId, other.metricId) &&
            Objects.deepEquals(this.measurement, other.measurement) &&
            Objects.deepEquals(this.measurementFilter, other.measurementFilter) &&
            Objects.deepEquals(this.timeframeFilter, other.timeframeFilter) &&
            Objects.deepEquals(this.metricFilters, other.metricFilters);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            metricId,
            measurement,
            measurementFilter,
            timeframeFilter,
            metricFilters);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProfileMetricCondition.class,
                "type", type,
                "metricId", metricId,
                "measurement", measurement,
                "measurementFilter", measurementFilter,
                "timeframeFilter", timeframeFilter,
                "metricFilters", metricFilters);
    }
    
    public final static class Builder {
 
        private ProfileMetricEnum type;
 
        private String metricId;
 
        private Measurement measurement;
 
        private NumericOperatorFilter measurementFilter;
 
        private ProfileMetricConditionTimeframeFilter timeframeFilter;
 
        private JsonNullable<? extends List<ProfileMetricPropertyFilter>> metricFilters = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder type(ProfileMetricEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder metricId(String metricId) {
            Utils.checkNotNull(metricId, "metricId");
            this.metricId = metricId;
            return this;
        }

        /**
         * Measurements for profile metrics.
         */
        public Builder measurement(Measurement measurement) {
            Utils.checkNotNull(measurement, "measurement");
            this.measurement = measurement;
            return this;
        }

        public Builder measurementFilter(NumericOperatorFilter measurementFilter) {
            Utils.checkNotNull(measurementFilter, "measurementFilter");
            this.measurementFilter = measurementFilter;
            return this;
        }

        public Builder timeframeFilter(ProfileMetricConditionTimeframeFilter timeframeFilter) {
            Utils.checkNotNull(timeframeFilter, "timeframeFilter");
            this.timeframeFilter = timeframeFilter;
            return this;
        }

        public Builder metricFilters(List<ProfileMetricPropertyFilter> metricFilters) {
            Utils.checkNotNull(metricFilters, "metricFilters");
            this.metricFilters = JsonNullable.of(metricFilters);
            return this;
        }

        public Builder metricFilters(JsonNullable<? extends List<ProfileMetricPropertyFilter>> metricFilters) {
            Utils.checkNotNull(metricFilters, "metricFilters");
            this.metricFilters = metricFilters;
            return this;
        }
        
        public ProfileMetricCondition build() {
            return new ProfileMetricCondition(
                type,
                metricId,
                measurement,
                measurementFilter,
                timeframeFilter,
                metricFilters);
        }
    }
}

