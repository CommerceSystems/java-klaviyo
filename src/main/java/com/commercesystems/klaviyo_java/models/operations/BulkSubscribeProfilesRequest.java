/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.operations;


import com.commercesystems.klaviyo_java.models.components.SubscriptionCreateJobCreateQuery;
import com.commercesystems.klaviyo_java.utils.LazySingletonValue;
import com.commercesystems.klaviyo_java.utils.SpeakeasyMetadata;
import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class BulkSubscribeProfilesRequest {

    /**
     * API endpoint revision (format: YYYY-MM-DD[.suffix])
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=revision")
    private String revision;

    /**
     * Subscribes one or more profiles to marketing. Currently, supports email and SMS only. All profiles will be added to the provided list. Either email or phone number is required. Both may be specified to subscribe to both channels.
     * If a profile cannot be found matching the given identifier(s), a new profile will be created and then subscribed.
     */
    @SpeakeasyMetadata("request:mediaType=application/vnd.api+json")
    private SubscriptionCreateJobCreateQuery subscriptionCreateJobCreateQuery;

    @JsonCreator
    public BulkSubscribeProfilesRequest(
            String revision,
            SubscriptionCreateJobCreateQuery subscriptionCreateJobCreateQuery) {
        Utils.checkNotNull(revision, "revision");
        Utils.checkNotNull(subscriptionCreateJobCreateQuery, "subscriptionCreateJobCreateQuery");
        this.revision = revision;
        this.subscriptionCreateJobCreateQuery = subscriptionCreateJobCreateQuery;
    }

    /**
     * API endpoint revision (format: YYYY-MM-DD[.suffix])
     */
    @JsonIgnore
    public String revision() {
        return revision;
    }

    /**
     * Subscribes one or more profiles to marketing. Currently, supports email and SMS only. All profiles will be added to the provided list. Either email or phone number is required. Both may be specified to subscribe to both channels.
     * If a profile cannot be found matching the given identifier(s), a new profile will be created and then subscribed.
     */
    @JsonIgnore
    public SubscriptionCreateJobCreateQuery subscriptionCreateJobCreateQuery() {
        return subscriptionCreateJobCreateQuery;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * API endpoint revision (format: YYYY-MM-DD[.suffix])
     */
    public BulkSubscribeProfilesRequest withRevision(String revision) {
        Utils.checkNotNull(revision, "revision");
        this.revision = revision;
        return this;
    }

    /**
     * Subscribes one or more profiles to marketing. Currently, supports email and SMS only. All profiles will be added to the provided list. Either email or phone number is required. Both may be specified to subscribe to both channels.
     * If a profile cannot be found matching the given identifier(s), a new profile will be created and then subscribed.
     */
    public BulkSubscribeProfilesRequest withSubscriptionCreateJobCreateQuery(SubscriptionCreateJobCreateQuery subscriptionCreateJobCreateQuery) {
        Utils.checkNotNull(subscriptionCreateJobCreateQuery, "subscriptionCreateJobCreateQuery");
        this.subscriptionCreateJobCreateQuery = subscriptionCreateJobCreateQuery;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BulkSubscribeProfilesRequest other = (BulkSubscribeProfilesRequest) o;
        return 
            Objects.deepEquals(this.revision, other.revision) &&
            Objects.deepEquals(this.subscriptionCreateJobCreateQuery, other.subscriptionCreateJobCreateQuery);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            revision,
            subscriptionCreateJobCreateQuery);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BulkSubscribeProfilesRequest.class,
                "revision", revision,
                "subscriptionCreateJobCreateQuery", subscriptionCreateJobCreateQuery);
    }
    
    public final static class Builder {
 
        private String revision;
 
        private SubscriptionCreateJobCreateQuery subscriptionCreateJobCreateQuery;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * API endpoint revision (format: YYYY-MM-DD[.suffix])
         */
        public Builder revision(String revision) {
            Utils.checkNotNull(revision, "revision");
            this.revision = revision;
            return this;
        }

        /**
         * Subscribes one or more profiles to marketing. Currently, supports email and SMS only. All profiles will be added to the provided list. Either email or phone number is required. Both may be specified to subscribe to both channels.
         * If a profile cannot be found matching the given identifier(s), a new profile will be created and then subscribed.
         */
        public Builder subscriptionCreateJobCreateQuery(SubscriptionCreateJobCreateQuery subscriptionCreateJobCreateQuery) {
            Utils.checkNotNull(subscriptionCreateJobCreateQuery, "subscriptionCreateJobCreateQuery");
            this.subscriptionCreateJobCreateQuery = subscriptionCreateJobCreateQuery;
            return this;
        }
        
        public BulkSubscribeProfilesRequest build() {
            if (revision == null) {
                revision = _SINGLETON_VALUE_Revision.value();
            }            return new BulkSubscribeProfilesRequest(
                revision,
                subscriptionCreateJobCreateQuery);
        }

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Revision =
                new LazySingletonValue<>(
                        "revision",
                        "\"2024-10-15\"",
                        new TypeReference<String>() {});
    }
}

