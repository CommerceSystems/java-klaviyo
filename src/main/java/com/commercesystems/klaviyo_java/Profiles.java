/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java;

import com.commercesystems.klaviyo_java.models.components.GetBulkProfileSuppressionsCreateJobResponse;
import com.commercesystems.klaviyo_java.models.components.GetBulkProfileSuppressionsCreateJobResponseCollection;
import com.commercesystems.klaviyo_java.models.components.GetBulkProfileSuppressionsRemoveJobResponse;
import com.commercesystems.klaviyo_java.models.components.GetBulkProfileSuppressionsRemoveJobResponseCollection;
import com.commercesystems.klaviyo_java.models.components.GetImportErrorResponseCollection;
import com.commercesystems.klaviyo_java.models.components.GetListResponseCollection;
import com.commercesystems.klaviyo_java.models.components.GetProfileImportJobListRelationshipsResponseCollection;
import com.commercesystems.klaviyo_java.models.components.GetProfileImportJobProfileRelationshipsResponseCollection;
import com.commercesystems.klaviyo_java.models.components.GetProfileImportJobResponseCollectionCompoundDocument;
import com.commercesystems.klaviyo_java.models.components.GetProfileImportJobResponseCompoundDocument;
import com.commercesystems.klaviyo_java.models.components.GetProfileListRelationshipsResponseCollection;
import com.commercesystems.klaviyo_java.models.components.GetProfileResponseCollection;
import com.commercesystems.klaviyo_java.models.components.GetProfileResponseCollectionCompoundDocument;
import com.commercesystems.klaviyo_java.models.components.GetProfileResponseCompoundDocument;
import com.commercesystems.klaviyo_java.models.components.GetProfileSegmentRelationshipsResponseCollection;
import com.commercesystems.klaviyo_java.models.components.GetSegmentResponseCollection;
import com.commercesystems.klaviyo_java.models.components.PatchProfileResponse;
import com.commercesystems.klaviyo_java.models.components.PostBulkProfileSuppressionsCreateJobResponse;
import com.commercesystems.klaviyo_java.models.components.PostBulkProfileSuppressionsRemoveJobResponse;
import com.commercesystems.klaviyo_java.models.components.PostProfileImportJobResponse;
import com.commercesystems.klaviyo_java.models.components.PostProfileMergeResponse;
import com.commercesystems.klaviyo_java.models.components.PostProfileResponse;
import com.commercesystems.klaviyo_java.models.components.ProfileCreateQuery;
import com.commercesystems.klaviyo_java.models.components.ProfileImportJobCreateQuery;
import com.commercesystems.klaviyo_java.models.components.ProfileMergeQuery;
import com.commercesystems.klaviyo_java.models.components.ProfilePartialUpdateQuery;
import com.commercesystems.klaviyo_java.models.components.ProfileUpsertQuery;
import com.commercesystems.klaviyo_java.models.components.PushTokenCreateQuery;
import com.commercesystems.klaviyo_java.models.components.SubscriptionCreateJobCreateQuery;
import com.commercesystems.klaviyo_java.models.components.SubscriptionDeleteJobCreateQuery;
import com.commercesystems.klaviyo_java.models.components.SuppressionCreateJobCreateQuery;
import com.commercesystems.klaviyo_java.models.components.SuppressionDeleteJobCreateQuery;
import com.commercesystems.klaviyo_java.models.errors.APIException;
import com.commercesystems.klaviyo_java.models.errors.ClientError;
import com.commercesystems.klaviyo_java.models.errors.ServerError;
import com.commercesystems.klaviyo_java.models.operations.BulkSubscribeProfilesRequest;
import com.commercesystems.klaviyo_java.models.operations.BulkSubscribeProfilesRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.BulkSubscribeProfilesResponse;
import com.commercesystems.klaviyo_java.models.operations.BulkSuppressProfilesRequest;
import com.commercesystems.klaviyo_java.models.operations.BulkSuppressProfilesRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.BulkSuppressProfilesResponse;
import com.commercesystems.klaviyo_java.models.operations.BulkUnsubscribeProfilesRequest;
import com.commercesystems.klaviyo_java.models.operations.BulkUnsubscribeProfilesRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.BulkUnsubscribeProfilesResponse;
import com.commercesystems.klaviyo_java.models.operations.BulkUnsuppressProfilesRequest;
import com.commercesystems.klaviyo_java.models.operations.BulkUnsuppressProfilesRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.BulkUnsuppressProfilesResponse;
import com.commercesystems.klaviyo_java.models.operations.CreateOrUpdateProfileQueryParamAdditionalFieldsProfile;
import com.commercesystems.klaviyo_java.models.operations.CreateOrUpdateProfileRequest;
import com.commercesystems.klaviyo_java.models.operations.CreateOrUpdateProfileRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.CreateOrUpdateProfileResponse;
import com.commercesystems.klaviyo_java.models.operations.CreateProfileQueryParamAdditionalFieldsProfile;
import com.commercesystems.klaviyo_java.models.operations.CreateProfileRequest;
import com.commercesystems.klaviyo_java.models.operations.CreateProfileRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.CreateProfileResponse;
import com.commercesystems.klaviyo_java.models.operations.CreatePushTokenRequest;
import com.commercesystems.klaviyo_java.models.operations.CreatePushTokenRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.CreatePushTokenResponse;
import com.commercesystems.klaviyo_java.models.operations.GetBulkImportProfilesJobRequest;
import com.commercesystems.klaviyo_java.models.operations.GetBulkImportProfilesJobRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.GetBulkImportProfilesJobResponse;
import com.commercesystems.klaviyo_java.models.operations.GetBulkImportProfilesJobsRequest;
import com.commercesystems.klaviyo_java.models.operations.GetBulkImportProfilesJobsRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.GetBulkImportProfilesJobsResponse;
import com.commercesystems.klaviyo_java.models.operations.GetBulkSuppressProfilesJobRequest;
import com.commercesystems.klaviyo_java.models.operations.GetBulkSuppressProfilesJobRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.GetBulkSuppressProfilesJobResponse;
import com.commercesystems.klaviyo_java.models.operations.GetBulkSuppressProfilesJobsRequest;
import com.commercesystems.klaviyo_java.models.operations.GetBulkSuppressProfilesJobsRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.GetBulkSuppressProfilesJobsResponse;
import com.commercesystems.klaviyo_java.models.operations.GetBulkUnsuppressProfilesJobRequest;
import com.commercesystems.klaviyo_java.models.operations.GetBulkUnsuppressProfilesJobRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.GetBulkUnsuppressProfilesJobResponse;
import com.commercesystems.klaviyo_java.models.operations.GetBulkUnsuppressProfilesJobsRequest;
import com.commercesystems.klaviyo_java.models.operations.GetBulkUnsuppressProfilesJobsRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.GetBulkUnsuppressProfilesJobsResponse;
import com.commercesystems.klaviyo_java.models.operations.GetErrorsForBulkImportProfilesJobRequest;
import com.commercesystems.klaviyo_java.models.operations.GetErrorsForBulkImportProfilesJobRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.GetErrorsForBulkImportProfilesJobResponse;
import com.commercesystems.klaviyo_java.models.operations.GetListForBulkImportProfilesJobQueryParamFieldsList;
import com.commercesystems.klaviyo_java.models.operations.GetListForBulkImportProfilesJobRequest;
import com.commercesystems.klaviyo_java.models.operations.GetListForBulkImportProfilesJobRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.GetListForBulkImportProfilesJobResponse;
import com.commercesystems.klaviyo_java.models.operations.GetListIdsForBulkImportProfilesJobRequest;
import com.commercesystems.klaviyo_java.models.operations.GetListIdsForBulkImportProfilesJobRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.GetListIdsForBulkImportProfilesJobResponse;
import com.commercesystems.klaviyo_java.models.operations.GetListIdsForProfileRequest;
import com.commercesystems.klaviyo_java.models.operations.GetListIdsForProfileRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.GetListIdsForProfileResponse;
import com.commercesystems.klaviyo_java.models.operations.GetListsForProfileQueryParamFieldsList;
import com.commercesystems.klaviyo_java.models.operations.GetListsForProfileRequest;
import com.commercesystems.klaviyo_java.models.operations.GetListsForProfileRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.GetListsForProfileResponse;
import com.commercesystems.klaviyo_java.models.operations.GetProfileIdsForBulkImportProfilesJobRequest;
import com.commercesystems.klaviyo_java.models.operations.GetProfileIdsForBulkImportProfilesJobRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.GetProfileIdsForBulkImportProfilesJobResponse;
import com.commercesystems.klaviyo_java.models.operations.GetProfileRequest;
import com.commercesystems.klaviyo_java.models.operations.GetProfileRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.GetProfileResponse;
import com.commercesystems.klaviyo_java.models.operations.GetProfilesForBulkImportProfilesJobRequest;
import com.commercesystems.klaviyo_java.models.operations.GetProfilesForBulkImportProfilesJobRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.GetProfilesForBulkImportProfilesJobResponse;
import com.commercesystems.klaviyo_java.models.operations.GetProfilesRequest;
import com.commercesystems.klaviyo_java.models.operations.GetProfilesRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.GetProfilesResponse;
import com.commercesystems.klaviyo_java.models.operations.GetSegmentIdsForProfileRequest;
import com.commercesystems.klaviyo_java.models.operations.GetSegmentIdsForProfileRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.GetSegmentIdsForProfileResponse;
import com.commercesystems.klaviyo_java.models.operations.GetSegmentsForProfileRequest;
import com.commercesystems.klaviyo_java.models.operations.GetSegmentsForProfileRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.GetSegmentsForProfileResponse;
import com.commercesystems.klaviyo_java.models.operations.MergeProfilesRequest;
import com.commercesystems.klaviyo_java.models.operations.MergeProfilesRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.MergeProfilesResponse;
import com.commercesystems.klaviyo_java.models.operations.QueryParamFieldsProfileSuppressionBulkCreateJob;
import com.commercesystems.klaviyo_java.models.operations.QueryParamFieldsProfileSuppressionBulkDeleteJob;
import com.commercesystems.klaviyo_java.models.operations.QueryParamFieldsSegment;
import com.commercesystems.klaviyo_java.models.operations.SDKMethodInterfaces.*;
import com.commercesystems.klaviyo_java.models.operations.SpawnBulkProfileImportJobRequest;
import com.commercesystems.klaviyo_java.models.operations.SpawnBulkProfileImportJobRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.SpawnBulkProfileImportJobResponse;
import com.commercesystems.klaviyo_java.models.operations.UpdateProfileQueryParamAdditionalFieldsProfile;
import com.commercesystems.klaviyo_java.models.operations.UpdateProfileRequest;
import com.commercesystems.klaviyo_java.models.operations.UpdateProfileRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.UpdateProfileResponse;
import com.commercesystems.klaviyo_java.utils.HTTPClient;
import com.commercesystems.klaviyo_java.utils.HTTPRequest;
import com.commercesystems.klaviyo_java.utils.Hook.AfterErrorContextImpl;
import com.commercesystems.klaviyo_java.utils.Hook.AfterSuccessContextImpl;
import com.commercesystems.klaviyo_java.utils.Hook.BeforeRequestContextImpl;
import com.commercesystems.klaviyo_java.utils.SerializedBody;
import com.commercesystems.klaviyo_java.utils.Utils.JsonShape;
import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional; 

/**
 * profiles
 */
public class Profiles implements
            MethodCallGetProfiles,
            MethodCallCreateProfile,
            MethodCallGetProfile,
            MethodCallUpdateProfile,
            MethodCallGetBulkImportProfilesJobs,
            MethodCallSpawnBulkProfileImportJob,
            MethodCallGetBulkImportProfilesJob,
            MethodCallGetBulkSuppressProfilesJobs,
            MethodCallBulkSuppressProfiles,
            MethodCallGetBulkSuppressProfilesJob,
            MethodCallGetBulkUnsuppressProfilesJobs,
            MethodCallBulkUnsuppressProfiles,
            MethodCallGetBulkUnsuppressProfilesJob,
            MethodCallCreateOrUpdateProfile,
            MethodCallMergeProfiles,
            MethodCallBulkSubscribeProfiles,
            MethodCallBulkUnsubscribeProfiles,
            MethodCallCreatePushToken,
            MethodCallGetListsForProfile,
            MethodCallGetListIdsForProfile,
            MethodCallGetSegmentsForProfile,
            MethodCallGetSegmentIdsForProfile,
            MethodCallGetListForBulkImportProfilesJob,
            MethodCallGetListIdsForBulkImportProfilesJob,
            MethodCallGetProfilesForBulkImportProfilesJob,
            MethodCallGetProfileIdsForBulkImportProfilesJob,
            MethodCallGetErrorsForBulkImportProfilesJob {

    private final SDKConfiguration sdkConfiguration;

    Profiles(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Get Profiles
     * Get all profiles in an account.
     * 
     * Profiles can be sorted by the following fields in ascending and descending order: `id`, `created`, `updated`, `email`, `subscriptions.email.marketing.suppression.timestamp`, `subscriptions.email.marketing.list_suppressions.timestamp`&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`&lt;br&gt;&lt;br&gt;Rate limits when using the `additional-fields[profile]=predictive_analytics` parameter in your API request:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`&lt;br&gt;&lt;br&gt;To learn more about how the `additional-fields` parameter impacts rate limits, check out our [Rate limits, status codes, and errors](https://developers.klaviyo.com/en/v2024-10-15/docs/rate_limits_and_error_handling) guide.
     * 
     * **Scopes:**
     * `profiles:read`
     * @return The call builder
     */
    public GetProfilesRequestBuilder getProfiles() {
        return new GetProfilesRequestBuilder(this);
    }

    /**
     * Get Profiles
     * Get all profiles in an account.
     * 
     * Profiles can be sorted by the following fields in ascending and descending order: `id`, `created`, `updated`, `email`, `subscriptions.email.marketing.suppression.timestamp`, `subscriptions.email.marketing.list_suppressions.timestamp`&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`&lt;br&gt;&lt;br&gt;Rate limits when using the `additional-fields[profile]=predictive_analytics` parameter in your API request:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`&lt;br&gt;&lt;br&gt;To learn more about how the `additional-fields` parameter impacts rate limits, check out our [Rate limits, status codes, and errors](https://developers.klaviyo.com/en/v2024-10-15/docs/rate_limits_and_error_handling) guide.
     * 
     * **Scopes:**
     * `profiles:read`
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetProfilesResponse getProfiles(
            GetProfilesRequest request) throws Exception {
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/profiles");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetProfilesRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get_profiles", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_profiles",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get_profiles",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_profiles",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetProfilesResponse.Builder _resBuilder = 
            GetProfilesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetProfilesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                GetProfileResponseCollectionCompoundDocument _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetProfileResponseCollectionCompoundDocument>() {});
                _res.withGetProfileResponseCollectionCompoundDocument(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create Profile
     * Create a new profile.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `profiles:write`
     * @return The call builder
     */
    public CreateProfileRequestBuilder createProfile() {
        return new CreateProfileRequestBuilder(this);
    }

    /**
     * Create Profile
     * Create a new profile.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `profiles:write`
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param profileCreateQuery
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateProfileResponse createProfile(
            String revision,
            ProfileCreateQuery profileCreateQuery) throws Exception {
        return createProfile(Optional.empty(), revision, profileCreateQuery);
    }
    
    /**
     * Create Profile
     * Create a new profile.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `profiles:write`
     * @param additionalFieldsProfile Request additional fields not included by default in the response. Supported values: 'subscriptions', 'predictive_analytics'
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param profileCreateQuery
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateProfileResponse createProfile(
            Optional<? extends List<CreateProfileQueryParamAdditionalFieldsProfile>> additionalFieldsProfile,
            String revision,
            ProfileCreateQuery profileCreateQuery) throws Exception {
        CreateProfileRequest request =
            CreateProfileRequest
                .builder()
                .additionalFieldsProfile(additionalFieldsProfile)
                .revision(revision)
                .profileCreateQuery(profileCreateQuery)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/profiles");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "profileCreateQuery",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                CreateProfileRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "create_profile", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "create_profile",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "create_profile",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "create_profile",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        CreateProfileResponse.Builder _resBuilder = 
            CreateProfileResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        CreateProfileResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                PostProfileResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PostProfileResponse>() {});
                _res.withPostProfileResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get Profile
     * Get the profile with the given profile ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`&lt;br&gt;&lt;br&gt;Rate limits when using the `include=list` parameter in your API request:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `15/m`&lt;br&gt;&lt;br&gt;Rate limits when using the `include=segment` parameter in your API request:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `15/m`&lt;br&gt;&lt;br&gt;To learn more about how the `include` parameter impacts rate limits, check out our [Rate limits, status codes, and errors](https://developers.klaviyo.com/en/v2024-10-15/docs/rate_limits_and_error_handling) guide.
     * 
     * **Scopes:**
     * `profiles:read`
     * @return The call builder
     */
    public GetProfileRequestBuilder getProfile() {
        return new GetProfileRequestBuilder(this);
    }

    /**
     * Get Profile
     * Get the profile with the given profile ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`&lt;br&gt;&lt;br&gt;Rate limits when using the `include=list` parameter in your API request:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `15/m`&lt;br&gt;&lt;br&gt;Rate limits when using the `include=segment` parameter in your API request:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `15/m`&lt;br&gt;&lt;br&gt;To learn more about how the `include` parameter impacts rate limits, check out our [Rate limits, status codes, and errors](https://developers.klaviyo.com/en/v2024-10-15/docs/rate_limits_and_error_handling) guide.
     * 
     * **Scopes:**
     * `profiles:read`
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetProfileResponse getProfile(
            GetProfileRequest request) throws Exception {
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetProfileRequest.class,
                _baseUrl,
                "/api/profiles/{id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetProfileRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get_profile", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_profile",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get_profile",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_profile",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetProfileResponse.Builder _resBuilder = 
            GetProfileResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetProfileResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                GetProfileResponseCompoundDocument _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetProfileResponseCompoundDocument>() {});
                _res.withGetProfileResponseCompoundDocument(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update Profile
     * Update the profile with the given profile ID.
     * 
     * Note that setting a field to `null` will clear out the field, whereas not including a field in your request will leave it unchanged.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `profiles:write`
     * @return The call builder
     */
    public UpdateProfileRequestBuilder updateProfile() {
        return new UpdateProfileRequestBuilder(this);
    }

    /**
     * Update Profile
     * Update the profile with the given profile ID.
     * 
     * Note that setting a field to `null` will clear out the field, whereas not including a field in your request will leave it unchanged.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `profiles:write`
     * @param id Primary key that uniquely identifies this profile. Generated by Klaviyo.
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param profilePartialUpdateQuery
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateProfileResponse updateProfile(
            String id,
            String revision,
            ProfilePartialUpdateQuery profilePartialUpdateQuery) throws Exception {
        return updateProfile(id, Optional.empty(), revision, profilePartialUpdateQuery);
    }
    
    /**
     * Update Profile
     * Update the profile with the given profile ID.
     * 
     * Note that setting a field to `null` will clear out the field, whereas not including a field in your request will leave it unchanged.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `profiles:write`
     * @param id Primary key that uniquely identifies this profile. Generated by Klaviyo.
     * @param additionalFieldsProfile Request additional fields not included by default in the response. Supported values: 'subscriptions', 'predictive_analytics'
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param profilePartialUpdateQuery
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateProfileResponse updateProfile(
            String id,
            Optional<? extends List<UpdateProfileQueryParamAdditionalFieldsProfile>> additionalFieldsProfile,
            String revision,
            ProfilePartialUpdateQuery profilePartialUpdateQuery) throws Exception {
        UpdateProfileRequest request =
            UpdateProfileRequest
                .builder()
                .id(id)
                .additionalFieldsProfile(additionalFieldsProfile)
                .revision(revision)
                .profilePartialUpdateQuery(profilePartialUpdateQuery)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                UpdateProfileRequest.class,
                _baseUrl,
                "/api/profiles/{id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PATCH");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "profilePartialUpdateQuery",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                UpdateProfileRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "update_profile", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "update_profile",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "update_profile",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "update_profile",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        UpdateProfileResponse.Builder _resBuilder = 
            UpdateProfileResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        UpdateProfileResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                PatchProfileResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PatchProfileResponse>() {});
                _res.withPatchProfileResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get Bulk Import Profiles Jobs
     * Get all bulk profile import jobs.
     * 
     * Returns a maximum of 100 jobs per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `lists:read`
     * `profiles:read`
     * @return The call builder
     */
    public GetBulkImportProfilesJobsRequestBuilder getBulkImportProfilesJobs() {
        return new GetBulkImportProfilesJobsRequestBuilder(this);
    }

    /**
     * Get Bulk Import Profiles Jobs
     * Get all bulk profile import jobs.
     * 
     * Returns a maximum of 100 jobs per request.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `lists:read`
     * `profiles:read`
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBulkImportProfilesJobsResponse getBulkImportProfilesJobs(
            GetBulkImportProfilesJobsRequest request) throws Exception {
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/profile-bulk-import-jobs");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetBulkImportProfilesJobsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get_bulk_import_profiles_jobs", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_bulk_import_profiles_jobs",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get_bulk_import_profiles_jobs",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_bulk_import_profiles_jobs",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetBulkImportProfilesJobsResponse.Builder _resBuilder = 
            GetBulkImportProfilesJobsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetBulkImportProfilesJobsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                GetProfileImportJobResponseCollectionCompoundDocument _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetProfileImportJobResponseCollectionCompoundDocument>() {});
                _res.withGetProfileImportJobResponseCollectionCompoundDocument(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Spawn Bulk Profile Import Job
     * Create a bulk profile import job to create or update a batch of profiles.
     * 
     * Accepts up to 10,000 profiles per request. The maximum allowed payload size is 5MB.
     * 
     * To learn more, see our [Bulk Profile Import API guide](https://developers.klaviyo.com/en/docs/use_klaviyos_bulk_profile_import_api).&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `lists:write`
     * `profiles:write`
     * @return The call builder
     */
    public SpawnBulkProfileImportJobRequestBuilder spawnBulkProfileImportJob() {
        return new SpawnBulkProfileImportJobRequestBuilder(this);
    }

    /**
     * Spawn Bulk Profile Import Job
     * Create a bulk profile import job to create or update a batch of profiles.
     * 
     * Accepts up to 10,000 profiles per request. The maximum allowed payload size is 5MB.
     * 
     * To learn more, see our [Bulk Profile Import API guide](https://developers.klaviyo.com/en/docs/use_klaviyos_bulk_profile_import_api).&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `lists:write`
     * `profiles:write`
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param profileImportJobCreateQuery
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SpawnBulkProfileImportJobResponse spawnBulkProfileImportJob(
            String revision,
            ProfileImportJobCreateQuery profileImportJobCreateQuery) throws Exception {
        SpawnBulkProfileImportJobRequest request =
            SpawnBulkProfileImportJobRequest
                .builder()
                .revision(revision)
                .profileImportJobCreateQuery(profileImportJobCreateQuery)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/profile-bulk-import-jobs");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "profileImportJobCreateQuery",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "spawn_bulk_profile_import_job", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "spawn_bulk_profile_import_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "spawn_bulk_profile_import_job",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "spawn_bulk_profile_import_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        SpawnBulkProfileImportJobResponse.Builder _resBuilder = 
            SpawnBulkProfileImportJobResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        SpawnBulkProfileImportJobResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "202")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                PostProfileImportJobResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PostProfileImportJobResponse>() {});
                _res.withPostProfileImportJobResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get Bulk Import Profiles Job
     * Get a bulk profile import job with the given job ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `lists:read`
     * `profiles:read`
     * @return The call builder
     */
    public GetBulkImportProfilesJobRequestBuilder getBulkImportProfilesJob() {
        return new GetBulkImportProfilesJobRequestBuilder(this);
    }

    /**
     * Get Bulk Import Profiles Job
     * Get a bulk profile import job with the given job ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `lists:read`
     * `profiles:read`
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBulkImportProfilesJobResponse getBulkImportProfilesJob(
            GetBulkImportProfilesJobRequest request) throws Exception {
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetBulkImportProfilesJobRequest.class,
                _baseUrl,
                "/api/profile-bulk-import-jobs/{job_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetBulkImportProfilesJobRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get_bulk_import_profiles_job", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_bulk_import_profiles_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get_bulk_import_profiles_job",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_bulk_import_profiles_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetBulkImportProfilesJobResponse.Builder _resBuilder = 
            GetBulkImportProfilesJobResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetBulkImportProfilesJobResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                GetProfileImportJobResponseCompoundDocument _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetProfileImportJobResponseCompoundDocument>() {});
                _res.withGetProfileImportJobResponseCompoundDocument(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get Bulk Suppress Profiles Jobs
     * Get the status of all bulk profile suppression jobs.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `subscriptions:read`
     * @return The call builder
     */
    public GetBulkSuppressProfilesJobsRequestBuilder getBulkSuppressProfilesJobs() {
        return new GetBulkSuppressProfilesJobsRequestBuilder(this);
    }

    /**
     * Get Bulk Suppress Profiles Jobs
     * Get the status of all bulk profile suppression jobs.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `subscriptions:read`
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBulkSuppressProfilesJobsResponse getBulkSuppressProfilesJobs(
            GetBulkSuppressProfilesJobsRequest request) throws Exception {
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/profile-suppression-bulk-create-jobs");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetBulkSuppressProfilesJobsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get_bulk_suppress_profiles_jobs", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_bulk_suppress_profiles_jobs",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get_bulk_suppress_profiles_jobs",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_bulk_suppress_profiles_jobs",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetBulkSuppressProfilesJobsResponse.Builder _resBuilder = 
            GetBulkSuppressProfilesJobsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetBulkSuppressProfilesJobsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                GetBulkProfileSuppressionsCreateJobResponseCollection _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetBulkProfileSuppressionsCreateJobResponseCollection>() {});
                _res.withGetBulkProfileSuppressionsCreateJobResponseCollection(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Bulk Suppress Profiles
     * Manually suppress profiles by email address or specify a segment/list ID to suppress all current members of a segment/list.
     * 
     * Suppressed profiles cannot receive email marketing, independent of their consent status. To learn more, see our guides on [email suppressions](https://help.klaviyo.com/hc/en-us/articles/115005246108#what-is-a-suppressed-profile-1) and [collecting consent](https://developers.klaviyo.com/en/docs/collect_email_and_sms_consent_via_api).
     * 
     * Email address per request limit: 100&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `profiles:write`
     * `subscriptions:write`
     * @return The call builder
     */
    public BulkSuppressProfilesRequestBuilder bulkSuppressProfiles() {
        return new BulkSuppressProfilesRequestBuilder(this);
    }

    /**
     * Bulk Suppress Profiles
     * Manually suppress profiles by email address or specify a segment/list ID to suppress all current members of a segment/list.
     * 
     * Suppressed profiles cannot receive email marketing, independent of their consent status. To learn more, see our guides on [email suppressions](https://help.klaviyo.com/hc/en-us/articles/115005246108#what-is-a-suppressed-profile-1) and [collecting consent](https://developers.klaviyo.com/en/docs/collect_email_and_sms_consent_via_api).
     * 
     * Email address per request limit: 100&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `profiles:write`
     * `subscriptions:write`
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param suppressionCreateJobCreateQuery
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public BulkSuppressProfilesResponse bulkSuppressProfiles(
            String revision,
            SuppressionCreateJobCreateQuery suppressionCreateJobCreateQuery) throws Exception {
        BulkSuppressProfilesRequest request =
            BulkSuppressProfilesRequest
                .builder()
                .revision(revision)
                .suppressionCreateJobCreateQuery(suppressionCreateJobCreateQuery)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/profile-suppression-bulk-create-jobs");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "suppressionCreateJobCreateQuery",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "bulk_suppress_profiles", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "bulk_suppress_profiles",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "bulk_suppress_profiles",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "bulk_suppress_profiles",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        BulkSuppressProfilesResponse.Builder _resBuilder = 
            BulkSuppressProfilesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        BulkSuppressProfilesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "202")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                PostBulkProfileSuppressionsCreateJobResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PostBulkProfileSuppressionsCreateJobResponse>() {});
                _res.withPostBulkProfileSuppressionsCreateJobResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get Bulk Suppress Profiles Job
     * Get the bulk suppress profiles job with the given job ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `subscriptions:read`
     * @return The call builder
     */
    public GetBulkSuppressProfilesJobRequestBuilder getBulkSuppressProfilesJob() {
        return new GetBulkSuppressProfilesJobRequestBuilder(this);
    }

    /**
     * Get Bulk Suppress Profiles Job
     * Get the bulk suppress profiles job with the given job ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `subscriptions:read`
     * @param jobId ID of the job to retrieve.
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBulkSuppressProfilesJobResponse getBulkSuppressProfilesJob(
            String jobId,
            String revision) throws Exception {
        return getBulkSuppressProfilesJob(jobId, Optional.empty(), revision);
    }
    
    /**
     * Get Bulk Suppress Profiles Job
     * Get the bulk suppress profiles job with the given job ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `subscriptions:read`
     * @param jobId ID of the job to retrieve.
     * @param fieldsProfileSuppressionBulkCreateJob For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#sparse-fieldsets
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBulkSuppressProfilesJobResponse getBulkSuppressProfilesJob(
            String jobId,
            Optional<? extends List<QueryParamFieldsProfileSuppressionBulkCreateJob>> fieldsProfileSuppressionBulkCreateJob,
            String revision) throws Exception {
        GetBulkSuppressProfilesJobRequest request =
            GetBulkSuppressProfilesJobRequest
                .builder()
                .jobId(jobId)
                .fieldsProfileSuppressionBulkCreateJob(fieldsProfileSuppressionBulkCreateJob)
                .revision(revision)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetBulkSuppressProfilesJobRequest.class,
                _baseUrl,
                "/api/profile-suppression-bulk-create-jobs/{job_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetBulkSuppressProfilesJobRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get_bulk_suppress_profiles_job", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_bulk_suppress_profiles_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get_bulk_suppress_profiles_job",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_bulk_suppress_profiles_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetBulkSuppressProfilesJobResponse.Builder _resBuilder = 
            GetBulkSuppressProfilesJobResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetBulkSuppressProfilesJobResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                GetBulkProfileSuppressionsCreateJobResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetBulkProfileSuppressionsCreateJobResponse>() {});
                _res.withGetBulkProfileSuppressionsCreateJobResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get Bulk Unsuppress Profiles Jobs
     * Get all bulk unsuppress profiles jobs.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `subscriptions:read`
     * @return The call builder
     */
    public GetBulkUnsuppressProfilesJobsRequestBuilder getBulkUnsuppressProfilesJobs() {
        return new GetBulkUnsuppressProfilesJobsRequestBuilder(this);
    }

    /**
     * Get Bulk Unsuppress Profiles Jobs
     * Get all bulk unsuppress profiles jobs.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `subscriptions:read`
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBulkUnsuppressProfilesJobsResponse getBulkUnsuppressProfilesJobs(
            GetBulkUnsuppressProfilesJobsRequest request) throws Exception {
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/profile-suppression-bulk-delete-jobs");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetBulkUnsuppressProfilesJobsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get_bulk_unsuppress_profiles_jobs", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_bulk_unsuppress_profiles_jobs",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get_bulk_unsuppress_profiles_jobs",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_bulk_unsuppress_profiles_jobs",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetBulkUnsuppressProfilesJobsResponse.Builder _resBuilder = 
            GetBulkUnsuppressProfilesJobsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetBulkUnsuppressProfilesJobsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                GetBulkProfileSuppressionsRemoveJobResponseCollection _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetBulkProfileSuppressionsRemoveJobResponseCollection>() {});
                _res.withGetBulkProfileSuppressionsRemoveJobResponseCollection(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Bulk Unsuppress Profiles
     * Manually unsuppress profiles by email address or specify a segment/list ID to unsuppress all current members of a segment/list.
     * 
     * This only removes suppressions with reason USER_SUPPRESSED ; unsubscribed profiles and suppressed profiles with reason INVALID_EMAIL or HARD_BOUNCE remain unchanged. To learn more, see our guides on [email suppressions](https://help.klaviyo.com/hc/en-us/articles/115005246108#what-is-a-suppressed-profile-1) and [collecting consent](https://developers.klaviyo.com/en/docs/collect_email_and_sms_consent_via_api).
     * 
     * Email address per request limit: 100&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `subscriptions:write`
     * @return The call builder
     */
    public BulkUnsuppressProfilesRequestBuilder bulkUnsuppressProfiles() {
        return new BulkUnsuppressProfilesRequestBuilder(this);
    }

    /**
     * Bulk Unsuppress Profiles
     * Manually unsuppress profiles by email address or specify a segment/list ID to unsuppress all current members of a segment/list.
     * 
     * This only removes suppressions with reason USER_SUPPRESSED ; unsubscribed profiles and suppressed profiles with reason INVALID_EMAIL or HARD_BOUNCE remain unchanged. To learn more, see our guides on [email suppressions](https://help.klaviyo.com/hc/en-us/articles/115005246108#what-is-a-suppressed-profile-1) and [collecting consent](https://developers.klaviyo.com/en/docs/collect_email_and_sms_consent_via_api).
     * 
     * Email address per request limit: 100&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `subscriptions:write`
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param suppressionDeleteJobCreateQuery
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public BulkUnsuppressProfilesResponse bulkUnsuppressProfiles(
            String revision,
            SuppressionDeleteJobCreateQuery suppressionDeleteJobCreateQuery) throws Exception {
        BulkUnsuppressProfilesRequest request =
            BulkUnsuppressProfilesRequest
                .builder()
                .revision(revision)
                .suppressionDeleteJobCreateQuery(suppressionDeleteJobCreateQuery)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/profile-suppression-bulk-delete-jobs");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "suppressionDeleteJobCreateQuery",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "bulk_unsuppress_profiles", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "bulk_unsuppress_profiles",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "bulk_unsuppress_profiles",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "bulk_unsuppress_profiles",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        BulkUnsuppressProfilesResponse.Builder _resBuilder = 
            BulkUnsuppressProfilesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        BulkUnsuppressProfilesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "202")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                PostBulkProfileSuppressionsRemoveJobResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PostBulkProfileSuppressionsRemoveJobResponse>() {});
                _res.withPostBulkProfileSuppressionsRemoveJobResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get Bulk Unsuppress Profiles Job
     * Get the bulk unsuppress profiles job with the given job ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `subscriptions:read`
     * @return The call builder
     */
    public GetBulkUnsuppressProfilesJobRequestBuilder getBulkUnsuppressProfilesJob() {
        return new GetBulkUnsuppressProfilesJobRequestBuilder(this);
    }

    /**
     * Get Bulk Unsuppress Profiles Job
     * Get the bulk unsuppress profiles job with the given job ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `subscriptions:read`
     * @param jobId ID of the job to retrieve.
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBulkUnsuppressProfilesJobResponse getBulkUnsuppressProfilesJob(
            String jobId,
            String revision) throws Exception {
        return getBulkUnsuppressProfilesJob(jobId, Optional.empty(), revision);
    }
    
    /**
     * Get Bulk Unsuppress Profiles Job
     * Get the bulk unsuppress profiles job with the given job ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `subscriptions:read`
     * @param jobId ID of the job to retrieve.
     * @param fieldsProfileSuppressionBulkDeleteJob For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#sparse-fieldsets
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBulkUnsuppressProfilesJobResponse getBulkUnsuppressProfilesJob(
            String jobId,
            Optional<? extends List<QueryParamFieldsProfileSuppressionBulkDeleteJob>> fieldsProfileSuppressionBulkDeleteJob,
            String revision) throws Exception {
        GetBulkUnsuppressProfilesJobRequest request =
            GetBulkUnsuppressProfilesJobRequest
                .builder()
                .jobId(jobId)
                .fieldsProfileSuppressionBulkDeleteJob(fieldsProfileSuppressionBulkDeleteJob)
                .revision(revision)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetBulkUnsuppressProfilesJobRequest.class,
                _baseUrl,
                "/api/profile-suppression-bulk-delete-jobs/{job_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetBulkUnsuppressProfilesJobRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get_bulk_unsuppress_profiles_job", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_bulk_unsuppress_profiles_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get_bulk_unsuppress_profiles_job",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_bulk_unsuppress_profiles_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetBulkUnsuppressProfilesJobResponse.Builder _resBuilder = 
            GetBulkUnsuppressProfilesJobResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetBulkUnsuppressProfilesJobResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                GetBulkProfileSuppressionsRemoveJobResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetBulkProfileSuppressionsRemoveJobResponse>() {});
                _res.withGetBulkProfileSuppressionsRemoveJobResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create or Update Profile
     * Given a set of profile attributes and optionally an ID, create or update a profile.
     * 
     * Returns 201 if a new profile was created, 200 if an existing profile was updated.
     * 
     * Note that setting a field to `null` will clear out the field, whereas not including a field in your request will leave it unchanged.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `profiles:write`
     * @return The call builder
     */
    public CreateOrUpdateProfileRequestBuilder createOrUpdateProfile() {
        return new CreateOrUpdateProfileRequestBuilder(this);
    }

    /**
     * Create or Update Profile
     * Given a set of profile attributes and optionally an ID, create or update a profile.
     * 
     * Returns 201 if a new profile was created, 200 if an existing profile was updated.
     * 
     * Note that setting a field to `null` will clear out the field, whereas not including a field in your request will leave it unchanged.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `profiles:write`
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param profileUpsertQuery
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOrUpdateProfileResponse createOrUpdateProfile(
            String revision,
            ProfileUpsertQuery profileUpsertQuery) throws Exception {
        return createOrUpdateProfile(Optional.empty(), revision, profileUpsertQuery);
    }
    
    /**
     * Create or Update Profile
     * Given a set of profile attributes and optionally an ID, create or update a profile.
     * 
     * Returns 201 if a new profile was created, 200 if an existing profile was updated.
     * 
     * Note that setting a field to `null` will clear out the field, whereas not including a field in your request will leave it unchanged.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `profiles:write`
     * @param additionalFieldsProfile Request additional fields not included by default in the response. Supported values: 'subscriptions', 'predictive_analytics'
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param profileUpsertQuery
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateOrUpdateProfileResponse createOrUpdateProfile(
            Optional<? extends List<CreateOrUpdateProfileQueryParamAdditionalFieldsProfile>> additionalFieldsProfile,
            String revision,
            ProfileUpsertQuery profileUpsertQuery) throws Exception {
        CreateOrUpdateProfileRequest request =
            CreateOrUpdateProfileRequest
                .builder()
                .additionalFieldsProfile(additionalFieldsProfile)
                .revision(revision)
                .profileUpsertQuery(profileUpsertQuery)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/profile-import");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "profileUpsertQuery",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                CreateOrUpdateProfileRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "create_or_update_profile", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "create_or_update_profile",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "create_or_update_profile",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "create_or_update_profile",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        CreateOrUpdateProfileResponse.Builder _resBuilder = 
            CreateOrUpdateProfileResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        CreateOrUpdateProfileResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200", "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                PostProfileResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PostProfileResponse>() {});
                _res.withPostProfileResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Merge Profiles
     * Merge a given related profile into a profile with the given profile ID.
     * 
     * The profile provided under `relationships` (the "source" profile) will be merged into the profile provided by the ID in the base data object (the "destination" profile).
     * This endpoint queues an asynchronous task which will merge data from the source profile into the destination profile, deleting the source profile in the process. This endpoint accepts only one source profile.
     * 
     * To learn more about how profile data is preserved or overwritten during a merge, please [visit our Help Center](https://help.klaviyo.com/hc/en-us/articles/115005073847#merge-2-profiles3).&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `profiles:write`
     * @return The call builder
     */
    public MergeProfilesRequestBuilder mergeProfiles() {
        return new MergeProfilesRequestBuilder(this);
    }

    /**
     * Merge Profiles
     * Merge a given related profile into a profile with the given profile ID.
     * 
     * The profile provided under `relationships` (the "source" profile) will be merged into the profile provided by the ID in the base data object (the "destination" profile).
     * This endpoint queues an asynchronous task which will merge data from the source profile into the destination profile, deleting the source profile in the process. This endpoint accepts only one source profile.
     * 
     * To learn more about how profile data is preserved or overwritten during a merge, please [visit our Help Center](https://help.klaviyo.com/hc/en-us/articles/115005073847#merge-2-profiles3).&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `profiles:write`
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param profileMergeQuery
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public MergeProfilesResponse mergeProfiles(
            String revision,
            ProfileMergeQuery profileMergeQuery) throws Exception {
        MergeProfilesRequest request =
            MergeProfilesRequest
                .builder()
                .revision(revision)
                .profileMergeQuery(profileMergeQuery)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/profile-merge");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "profileMergeQuery",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "merge_profiles", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "merge_profiles",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "merge_profiles",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "merge_profiles",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        MergeProfilesResponse.Builder _resBuilder = 
            MergeProfilesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        MergeProfilesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                PostProfileMergeResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PostProfileMergeResponse>() {});
                _res.withPostProfileMergeResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Bulk Subscribe Profiles
     * Subscribe one or more profiles to email marketing, SMS marketing, or both. If the provided list has double opt-in enabled, profiles will receive a message requiring their confirmation before subscribing. Otherwise, profiles will be immediately subscribed without receiving a confirmation message.
     * Learn more about [consent in this guide](https://developers.klaviyo.com/en/docs/collect_email_and_sms_consent_via_api).
     * 
     * If a list is not provided, the opt-in process used will be determined by the [account-level default opt-in setting](https://www.klaviyo.com/settings/account/api-keys).
     * 
     * To add someone to a list without changing their subscription status, use [Add Profile to List](https://developers.klaviyo.com/en/reference/create_list_relationships).
     * 
     * This API will remove any `UNSUBSCRIBE`, `SPAM_REPORT` or `USER_SUPPRESSED` suppressions from the provided profiles. Learn more about [suppressed profiles](https://help.klaviyo.com/hc/en-us/articles/115005246108-Understanding-suppressed-email-profiles#what-is-a-suppressed-profile-1).
     * 
     * Maximum number of profiles can be submitted for subscription: 1000
     * 
     * This endpoint now supports a `historical_import` flag. If this flag is set `true`, profiles being subscribed will bypass double opt-in emails and be subscribed immediately. They will also bypass any associated "Added to list" flows. This is useful for importing historical data where you have already collected consent. If `historical_import` is set to true, the `consented_at` field is required and must be in the past.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `lists:write`
     * `profiles:write`
     * `subscriptions:write`
     * @return The call builder
     */
    public BulkSubscribeProfilesRequestBuilder bulkSubscribeProfiles() {
        return new BulkSubscribeProfilesRequestBuilder(this);
    }

    /**
     * Bulk Subscribe Profiles
     * Subscribe one or more profiles to email marketing, SMS marketing, or both. If the provided list has double opt-in enabled, profiles will receive a message requiring their confirmation before subscribing. Otherwise, profiles will be immediately subscribed without receiving a confirmation message.
     * Learn more about [consent in this guide](https://developers.klaviyo.com/en/docs/collect_email_and_sms_consent_via_api).
     * 
     * If a list is not provided, the opt-in process used will be determined by the [account-level default opt-in setting](https://www.klaviyo.com/settings/account/api-keys).
     * 
     * To add someone to a list without changing their subscription status, use [Add Profile to List](https://developers.klaviyo.com/en/reference/create_list_relationships).
     * 
     * This API will remove any `UNSUBSCRIBE`, `SPAM_REPORT` or `USER_SUPPRESSED` suppressions from the provided profiles. Learn more about [suppressed profiles](https://help.klaviyo.com/hc/en-us/articles/115005246108-Understanding-suppressed-email-profiles#what-is-a-suppressed-profile-1).
     * 
     * Maximum number of profiles can be submitted for subscription: 1000
     * 
     * This endpoint now supports a `historical_import` flag. If this flag is set `true`, profiles being subscribed will bypass double opt-in emails and be subscribed immediately. They will also bypass any associated "Added to list" flows. This is useful for importing historical data where you have already collected consent. If `historical_import` is set to true, the `consented_at` field is required and must be in the past.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `lists:write`
     * `profiles:write`
     * `subscriptions:write`
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param subscriptionCreateJobCreateQuery
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public BulkSubscribeProfilesResponse bulkSubscribeProfiles(
            String revision,
            SubscriptionCreateJobCreateQuery subscriptionCreateJobCreateQuery) throws Exception {
        BulkSubscribeProfilesRequest request =
            BulkSubscribeProfilesRequest
                .builder()
                .revision(revision)
                .subscriptionCreateJobCreateQuery(subscriptionCreateJobCreateQuery)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/profile-subscription-bulk-create-jobs");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "subscriptionCreateJobCreateQuery",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "bulk_subscribe_profiles", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "bulk_subscribe_profiles",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "bulk_subscribe_profiles",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "bulk_subscribe_profiles",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        BulkSubscribeProfilesResponse.Builder _resBuilder = 
            BulkSubscribeProfilesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        BulkSubscribeProfilesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "202")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Bulk Unsubscribe Profiles
     * Unsubscribe one or more profiles to email marketing, SMS marketing, or both. Learn more about [consent in this guide](https://developers.klaviyo.com/en/docs/collect_email_and_sms_consent_via_api).
     * 
     * To remove someone from a list without changing their subscription status, use [Remove Profile from List](https://developers.klaviyo.com/en/reference/delete_list_relationships).
     * 
     * Maximum number of profile can be submitted for unsubscription: 100&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `lists:write`
     * `profiles:write`
     * `subscriptions:write`
     * @return The call builder
     */
    public BulkUnsubscribeProfilesRequestBuilder bulkUnsubscribeProfiles() {
        return new BulkUnsubscribeProfilesRequestBuilder(this);
    }

    /**
     * Bulk Unsubscribe Profiles
     * Unsubscribe one or more profiles to email marketing, SMS marketing, or both. Learn more about [consent in this guide](https://developers.klaviyo.com/en/docs/collect_email_and_sms_consent_via_api).
     * 
     * To remove someone from a list without changing their subscription status, use [Remove Profile from List](https://developers.klaviyo.com/en/reference/delete_list_relationships).
     * 
     * Maximum number of profile can be submitted for unsubscription: 100&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `lists:write`
     * `profiles:write`
     * `subscriptions:write`
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param subscriptionDeleteJobCreateQuery
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public BulkUnsubscribeProfilesResponse bulkUnsubscribeProfiles(
            String revision,
            SubscriptionDeleteJobCreateQuery subscriptionDeleteJobCreateQuery) throws Exception {
        BulkUnsubscribeProfilesRequest request =
            BulkUnsubscribeProfilesRequest
                .builder()
                .revision(revision)
                .subscriptionDeleteJobCreateQuery(subscriptionDeleteJobCreateQuery)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/profile-subscription-bulk-delete-jobs");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "subscriptionDeleteJobCreateQuery",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "bulk_unsubscribe_profiles", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "bulk_unsubscribe_profiles",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "bulk_unsubscribe_profiles",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "bulk_unsubscribe_profiles",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        BulkUnsubscribeProfilesResponse.Builder _resBuilder = 
            BulkUnsubscribeProfilesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        BulkUnsubscribeProfilesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "202")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create or Update Push Token
     * Create or update a push token.
     * 
     * This endpoint can be used to migrate push tokens from another platform to Klaviyo. Please use our mobile SDKs ([iOS](https://github.com/klaviyo/klaviyo-swift-sdk) and [Android](https://github.com/klaviyo/klaviyo-android-sdk)) to create push tokens from users' devices.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `profiles:write`
     * `push-tokens:write`
     * @return The call builder
     */
    public CreatePushTokenRequestBuilder createPushToken() {
        return new CreatePushTokenRequestBuilder(this);
    }

    /**
     * Create or Update Push Token
     * Create or update a push token.
     * 
     * This endpoint can be used to migrate push tokens from another platform to Klaviyo. Please use our mobile SDKs ([iOS](https://github.com/klaviyo/klaviyo-swift-sdk) and [Android](https://github.com/klaviyo/klaviyo-android-sdk)) to create push tokens from users' devices.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `75/s`&lt;br&gt;Steady: `700/m`
     * 
     * **Scopes:**
     * `profiles:write`
     * `push-tokens:write`
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param pushTokenCreateQuery
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePushTokenResponse createPushToken(
            String revision,
            PushTokenCreateQuery pushTokenCreateQuery) throws Exception {
        CreatePushTokenRequest request =
            CreatePushTokenRequest
                .builder()
                .revision(revision)
                .pushTokenCreateQuery(pushTokenCreateQuery)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/push-tokens");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "pushTokenCreateQuery",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "create_push_token", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "create_push_token",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "create_push_token",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "create_push_token",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        CreatePushTokenResponse.Builder _resBuilder = 
            CreatePushTokenResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        CreatePushTokenResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "202")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get Lists for Profile
     * Get list memberships for a profile with the given profile ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `3/s`&lt;br&gt;Steady: `60/m`
     * 
     * **Scopes:**
     * `lists:read`
     * `profiles:read`
     * @return The call builder
     */
    public GetListsForProfileRequestBuilder getListsForProfile() {
        return new GetListsForProfileRequestBuilder(this);
    }

    /**
     * Get Lists for Profile
     * Get list memberships for a profile with the given profile ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `3/s`&lt;br&gt;Steady: `60/m`
     * 
     * **Scopes:**
     * `lists:read`
     * `profiles:read`
     * @param id
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetListsForProfileResponse getListsForProfile(
            String id,
            String revision) throws Exception {
        return getListsForProfile(id, Optional.empty(), revision);
    }
    
    /**
     * Get Lists for Profile
     * Get list memberships for a profile with the given profile ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `3/s`&lt;br&gt;Steady: `60/m`
     * 
     * **Scopes:**
     * `lists:read`
     * `profiles:read`
     * @param id
     * @param fieldsList For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#sparse-fieldsets
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetListsForProfileResponse getListsForProfile(
            String id,
            Optional<? extends List<GetListsForProfileQueryParamFieldsList>> fieldsList,
            String revision) throws Exception {
        GetListsForProfileRequest request =
            GetListsForProfileRequest
                .builder()
                .id(id)
                .fieldsList(fieldsList)
                .revision(revision)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetListsForProfileRequest.class,
                _baseUrl,
                "/api/profiles/{id}/lists",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetListsForProfileRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get_lists_for_profile", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_lists_for_profile",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get_lists_for_profile",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_lists_for_profile",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetListsForProfileResponse.Builder _resBuilder = 
            GetListsForProfileResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetListsForProfileResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                GetListResponseCollection _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetListResponseCollection>() {});
                _res.withGetListResponseCollection(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get List IDs for Profile
     * Get list memberships for a profile with the given profile ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `3/s`&lt;br&gt;Steady: `60/m`
     * 
     * **Scopes:**
     * `lists:read`
     * `profiles:read`
     * @return The call builder
     */
    public GetListIdsForProfileRequestBuilder getListIdsForProfile() {
        return new GetListIdsForProfileRequestBuilder(this);
    }

    /**
     * Get List IDs for Profile
     * Get list memberships for a profile with the given profile ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `3/s`&lt;br&gt;Steady: `60/m`
     * 
     * **Scopes:**
     * `lists:read`
     * `profiles:read`
     * @param id
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetListIdsForProfileResponse getListIdsForProfile(
            String id,
            String revision) throws Exception {
        GetListIdsForProfileRequest request =
            GetListIdsForProfileRequest
                .builder()
                .id(id)
                .revision(revision)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetListIdsForProfileRequest.class,
                _baseUrl,
                "/api/profiles/{id}/relationships/lists",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get_list_ids_for_profile", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_list_ids_for_profile",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get_list_ids_for_profile",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_list_ids_for_profile",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetListIdsForProfileResponse.Builder _resBuilder = 
            GetListIdsForProfileResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetListIdsForProfileResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                GetProfileListRelationshipsResponseCollection _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetProfileListRelationshipsResponseCollection>() {});
                _res.withGetProfileListRelationshipsResponseCollection(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get Segments for Profile
     * Get segment memberships for a profile with the given profile ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `3/s`&lt;br&gt;Steady: `60/m`
     * 
     * **Scopes:**
     * `profiles:read`
     * `segments:read`
     * @return The call builder
     */
    public GetSegmentsForProfileRequestBuilder getSegmentsForProfile() {
        return new GetSegmentsForProfileRequestBuilder(this);
    }

    /**
     * Get Segments for Profile
     * Get segment memberships for a profile with the given profile ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `3/s`&lt;br&gt;Steady: `60/m`
     * 
     * **Scopes:**
     * `profiles:read`
     * `segments:read`
     * @param id
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSegmentsForProfileResponse getSegmentsForProfile(
            String id,
            String revision) throws Exception {
        return getSegmentsForProfile(id, Optional.empty(), revision);
    }
    
    /**
     * Get Segments for Profile
     * Get segment memberships for a profile with the given profile ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `3/s`&lt;br&gt;Steady: `60/m`
     * 
     * **Scopes:**
     * `profiles:read`
     * `segments:read`
     * @param id
     * @param fieldsSegment For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#sparse-fieldsets
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSegmentsForProfileResponse getSegmentsForProfile(
            String id,
            Optional<? extends List<QueryParamFieldsSegment>> fieldsSegment,
            String revision) throws Exception {
        GetSegmentsForProfileRequest request =
            GetSegmentsForProfileRequest
                .builder()
                .id(id)
                .fieldsSegment(fieldsSegment)
                .revision(revision)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetSegmentsForProfileRequest.class,
                _baseUrl,
                "/api/profiles/{id}/segments",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetSegmentsForProfileRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get_segments_for_profile", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_segments_for_profile",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get_segments_for_profile",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_segments_for_profile",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetSegmentsForProfileResponse.Builder _resBuilder = 
            GetSegmentsForProfileResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetSegmentsForProfileResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                GetSegmentResponseCollection _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetSegmentResponseCollection>() {});
                _res.withGetSegmentResponseCollection(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get Segment IDs for Profile
     * Get segment membership relationships for a profile with the given profile ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `3/s`&lt;br&gt;Steady: `60/m`
     * 
     * **Scopes:**
     * `profiles:read`
     * `segments:read`
     * @return The call builder
     */
    public GetSegmentIdsForProfileRequestBuilder getSegmentIdsForProfile() {
        return new GetSegmentIdsForProfileRequestBuilder(this);
    }

    /**
     * Get Segment IDs for Profile
     * Get segment membership relationships for a profile with the given profile ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `3/s`&lt;br&gt;Steady: `60/m`
     * 
     * **Scopes:**
     * `profiles:read`
     * `segments:read`
     * @param id
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSegmentIdsForProfileResponse getSegmentIdsForProfile(
            String id,
            String revision) throws Exception {
        GetSegmentIdsForProfileRequest request =
            GetSegmentIdsForProfileRequest
                .builder()
                .id(id)
                .revision(revision)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetSegmentIdsForProfileRequest.class,
                _baseUrl,
                "/api/profiles/{id}/relationships/segments",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get_segment_ids_for_profile", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_segment_ids_for_profile",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get_segment_ids_for_profile",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_segment_ids_for_profile",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetSegmentIdsForProfileResponse.Builder _resBuilder = 
            GetSegmentIdsForProfileResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetSegmentIdsForProfileResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                GetProfileSegmentRelationshipsResponseCollection _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetProfileSegmentRelationshipsResponseCollection>() {});
                _res.withGetProfileSegmentRelationshipsResponseCollection(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get List for Bulk Import Profiles Job
     * Get list for the bulk profile import job with the given ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `lists:read`
     * @return The call builder
     */
    public GetListForBulkImportProfilesJobRequestBuilder getListForBulkImportProfilesJob() {
        return new GetListForBulkImportProfilesJobRequestBuilder(this);
    }

    /**
     * Get List for Bulk Import Profiles Job
     * Get list for the bulk profile import job with the given ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `lists:read`
     * @param id
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetListForBulkImportProfilesJobResponse getListForBulkImportProfilesJob(
            String id,
            String revision) throws Exception {
        return getListForBulkImportProfilesJob(id, Optional.empty(), revision);
    }
    
    /**
     * Get List for Bulk Import Profiles Job
     * Get list for the bulk profile import job with the given ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `lists:read`
     * @param id
     * @param fieldsList For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#sparse-fieldsets
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetListForBulkImportProfilesJobResponse getListForBulkImportProfilesJob(
            String id,
            Optional<? extends List<GetListForBulkImportProfilesJobQueryParamFieldsList>> fieldsList,
            String revision) throws Exception {
        GetListForBulkImportProfilesJobRequest request =
            GetListForBulkImportProfilesJobRequest
                .builder()
                .id(id)
                .fieldsList(fieldsList)
                .revision(revision)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetListForBulkImportProfilesJobRequest.class,
                _baseUrl,
                "/api/profile-bulk-import-jobs/{id}/lists",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetListForBulkImportProfilesJobRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get_list_for_bulk_import_profiles_job", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_list_for_bulk_import_profiles_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get_list_for_bulk_import_profiles_job",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_list_for_bulk_import_profiles_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetListForBulkImportProfilesJobResponse.Builder _resBuilder = 
            GetListForBulkImportProfilesJobResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetListForBulkImportProfilesJobResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                GetListResponseCollection _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetListResponseCollection>() {});
                _res.withGetListResponseCollection(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get List IDs for Bulk Import Profiles Job
     * Get list relationship for the bulk profile import job with the given ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `lists:read`
     * @return The call builder
     */
    public GetListIdsForBulkImportProfilesJobRequestBuilder getListIdsForBulkImportProfilesJob() {
        return new GetListIdsForBulkImportProfilesJobRequestBuilder(this);
    }

    /**
     * Get List IDs for Bulk Import Profiles Job
     * Get list relationship for the bulk profile import job with the given ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `lists:read`
     * @param id
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetListIdsForBulkImportProfilesJobResponse getListIdsForBulkImportProfilesJob(
            String id,
            String revision) throws Exception {
        GetListIdsForBulkImportProfilesJobRequest request =
            GetListIdsForBulkImportProfilesJobRequest
                .builder()
                .id(id)
                .revision(revision)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetListIdsForBulkImportProfilesJobRequest.class,
                _baseUrl,
                "/api/profile-bulk-import-jobs/{id}/relationships/lists",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get_list_ids_for_bulk_import_profiles_job", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_list_ids_for_bulk_import_profiles_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get_list_ids_for_bulk_import_profiles_job",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_list_ids_for_bulk_import_profiles_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetListIdsForBulkImportProfilesJobResponse.Builder _resBuilder = 
            GetListIdsForBulkImportProfilesJobResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetListIdsForBulkImportProfilesJobResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                GetProfileImportJobListRelationshipsResponseCollection _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetProfileImportJobListRelationshipsResponseCollection>() {});
                _res.withGetProfileImportJobListRelationshipsResponseCollection(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get Profiles for Bulk Import Profiles Job
     * Get profiles for the bulk profile import job with the given ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `profiles:read`
     * @return The call builder
     */
    public GetProfilesForBulkImportProfilesJobRequestBuilder getProfilesForBulkImportProfilesJob() {
        return new GetProfilesForBulkImportProfilesJobRequestBuilder(this);
    }

    /**
     * Get Profiles for Bulk Import Profiles Job
     * Get profiles for the bulk profile import job with the given ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `profiles:read`
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetProfilesForBulkImportProfilesJobResponse getProfilesForBulkImportProfilesJob(
            GetProfilesForBulkImportProfilesJobRequest request) throws Exception {
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetProfilesForBulkImportProfilesJobRequest.class,
                _baseUrl,
                "/api/profile-bulk-import-jobs/{id}/profiles",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetProfilesForBulkImportProfilesJobRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get_profiles_for_bulk_import_profiles_job", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_profiles_for_bulk_import_profiles_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get_profiles_for_bulk_import_profiles_job",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_profiles_for_bulk_import_profiles_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetProfilesForBulkImportProfilesJobResponse.Builder _resBuilder = 
            GetProfilesForBulkImportProfilesJobResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetProfilesForBulkImportProfilesJobResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                GetProfileResponseCollection _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetProfileResponseCollection>() {});
                _res.withGetProfileResponseCollection(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get Profile IDs for Bulk Import Profiles Job
     * Get profile relationships for the bulk profile import job with the given ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `profiles:read`
     * @return The call builder
     */
    public GetProfileIdsForBulkImportProfilesJobRequestBuilder getProfileIdsForBulkImportProfilesJob() {
        return new GetProfileIdsForBulkImportProfilesJobRequestBuilder(this);
    }

    /**
     * Get Profile IDs for Bulk Import Profiles Job
     * Get profile relationships for the bulk profile import job with the given ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `profiles:read`
     * @param id
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetProfileIdsForBulkImportProfilesJobResponse getProfileIdsForBulkImportProfilesJob(
            String id,
            String revision) throws Exception {
        return getProfileIdsForBulkImportProfilesJob(id, Optional.empty(), Optional.empty(), revision);
    }
    
    /**
     * Get Profile IDs for Bulk Import Profiles Job
     * Get profile relationships for the bulk profile import job with the given ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `profiles:read`
     * @param id
     * @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#pagination
     * @param pageSize Default: 20. Min: 1. Max: 100.
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetProfileIdsForBulkImportProfilesJobResponse getProfileIdsForBulkImportProfilesJob(
            String id,
            Optional<String> pageCursor,
            Optional<Long> pageSize,
            String revision) throws Exception {
        GetProfileIdsForBulkImportProfilesJobRequest request =
            GetProfileIdsForBulkImportProfilesJobRequest
                .builder()
                .id(id)
                .pageCursor(pageCursor)
                .pageSize(pageSize)
                .revision(revision)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetProfileIdsForBulkImportProfilesJobRequest.class,
                _baseUrl,
                "/api/profile-bulk-import-jobs/{id}/relationships/profiles",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetProfileIdsForBulkImportProfilesJobRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get_profile_ids_for_bulk_import_profiles_job", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_profile_ids_for_bulk_import_profiles_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get_profile_ids_for_bulk_import_profiles_job",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_profile_ids_for_bulk_import_profiles_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetProfileIdsForBulkImportProfilesJobResponse.Builder _resBuilder = 
            GetProfileIdsForBulkImportProfilesJobResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetProfileIdsForBulkImportProfilesJobResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                GetProfileImportJobProfileRelationshipsResponseCollection _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetProfileImportJobProfileRelationshipsResponseCollection>() {});
                _res.withGetProfileImportJobProfileRelationshipsResponseCollection(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get Errors for Bulk Import Profiles Job
     * Get import errors for the bulk profile import job with the given ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `profiles:read`
     * @return The call builder
     */
    public GetErrorsForBulkImportProfilesJobRequestBuilder getErrorsForBulkImportProfilesJob() {
        return new GetErrorsForBulkImportProfilesJobRequestBuilder(this);
    }

    /**
     * Get Errors for Bulk Import Profiles Job
     * Get import errors for the bulk profile import job with the given ID.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `10/s`&lt;br&gt;Steady: `150/m`
     * 
     * **Scopes:**
     * `profiles:read`
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetErrorsForBulkImportProfilesJobResponse getErrorsForBulkImportProfilesJob(
            GetErrorsForBulkImportProfilesJobRequest request) throws Exception {
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetErrorsForBulkImportProfilesJobRequest.class,
                _baseUrl,
                "/api/profile-bulk-import-jobs/{id}/import-errors",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetErrorsForBulkImportProfilesJobRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get_errors_for_bulk_import_profiles_job", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_errors_for_bulk_import_profiles_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get_errors_for_bulk_import_profiles_job",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get_errors_for_bulk_import_profiles_job",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetErrorsForBulkImportProfilesJobResponse.Builder _resBuilder = 
            GetErrorsForBulkImportProfilesJobResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetErrorsForBulkImportProfilesJobResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                GetImportErrorResponseCollection _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetImportErrorResponseCollection>() {});
                _res.withGetImportErrorResponseCollection(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
