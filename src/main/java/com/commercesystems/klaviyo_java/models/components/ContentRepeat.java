/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class ContentRepeat {

    @JsonProperty("repeat_for")
    private String repeatFor;

    @JsonProperty("item_alias")
    private String itemAlias;

    @JsonCreator
    public ContentRepeat(
            @JsonProperty("repeat_for") String repeatFor,
            @JsonProperty("item_alias") String itemAlias) {
        Utils.checkNotNull(repeatFor, "repeatFor");
        Utils.checkNotNull(itemAlias, "itemAlias");
        this.repeatFor = repeatFor;
        this.itemAlias = itemAlias;
    }

    @JsonIgnore
    public String repeatFor() {
        return repeatFor;
    }

    @JsonIgnore
    public String itemAlias() {
        return itemAlias;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ContentRepeat withRepeatFor(String repeatFor) {
        Utils.checkNotNull(repeatFor, "repeatFor");
        this.repeatFor = repeatFor;
        return this;
    }

    public ContentRepeat withItemAlias(String itemAlias) {
        Utils.checkNotNull(itemAlias, "itemAlias");
        this.itemAlias = itemAlias;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContentRepeat other = (ContentRepeat) o;
        return 
            Objects.deepEquals(this.repeatFor, other.repeatFor) &&
            Objects.deepEquals(this.itemAlias, other.itemAlias);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            repeatFor,
            itemAlias);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContentRepeat.class,
                "repeatFor", repeatFor,
                "itemAlias", itemAlias);
    }
    
    public final static class Builder {
 
        private String repeatFor;
 
        private String itemAlias;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder repeatFor(String repeatFor) {
            Utils.checkNotNull(repeatFor, "repeatFor");
            this.repeatFor = repeatFor;
            return this;
        }

        public Builder itemAlias(String itemAlias) {
            Utils.checkNotNull(itemAlias, "itemAlias");
            this.itemAlias = itemAlias;
            return this;
        }
        
        public ContentRepeat build() {
            return new ContentRepeat(
                repeatFor,
                itemAlias);
        }
    }
}

