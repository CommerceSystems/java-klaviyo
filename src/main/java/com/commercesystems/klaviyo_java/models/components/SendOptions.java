/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class SendOptions {

    @JsonProperty("use_smart_sending")
    private boolean useSmartSending;

    @JsonProperty("is_transactional")
    private boolean isTransactional;

    @JsonCreator
    public SendOptions(
            @JsonProperty("use_smart_sending") boolean useSmartSending,
            @JsonProperty("is_transactional") boolean isTransactional) {
        Utils.checkNotNull(useSmartSending, "useSmartSending");
        Utils.checkNotNull(isTransactional, "isTransactional");
        this.useSmartSending = useSmartSending;
        this.isTransactional = isTransactional;
    }

    @JsonIgnore
    public boolean useSmartSending() {
        return useSmartSending;
    }

    @JsonIgnore
    public boolean isTransactional() {
        return isTransactional;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SendOptions withUseSmartSending(boolean useSmartSending) {
        Utils.checkNotNull(useSmartSending, "useSmartSending");
        this.useSmartSending = useSmartSending;
        return this;
    }

    public SendOptions withIsTransactional(boolean isTransactional) {
        Utils.checkNotNull(isTransactional, "isTransactional");
        this.isTransactional = isTransactional;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SendOptions other = (SendOptions) o;
        return 
            Objects.deepEquals(this.useSmartSending, other.useSmartSending) &&
            Objects.deepEquals(this.isTransactional, other.isTransactional);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            useSmartSending,
            isTransactional);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SendOptions.class,
                "useSmartSending", useSmartSending,
                "isTransactional", isTransactional);
    }
    
    public final static class Builder {
 
        private Boolean useSmartSending;
 
        private Boolean isTransactional;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder useSmartSending(boolean useSmartSending) {
            Utils.checkNotNull(useSmartSending, "useSmartSending");
            this.useSmartSending = useSmartSending;
            return this;
        }

        public Builder isTransactional(boolean isTransactional) {
            Utils.checkNotNull(isTransactional, "isTransactional");
            this.isTransactional = isTransactional;
            return this;
        }
        
        public SendOptions build() {
            return new SendOptions(
                useSmartSending,
                isTransactional);
        }
    }
}

