/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class BlockDisplayOptions {

    /**
     * Show on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_on")
    private JsonNullable<? extends ShowOn> showOn;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visible_check")
    private JsonNullable<String> visibleCheck;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content_repeat")
    private Optional<? extends ContentRepeat> contentRepeat;

    @JsonCreator
    public BlockDisplayOptions(
            @JsonProperty("show_on") JsonNullable<? extends ShowOn> showOn,
            @JsonProperty("visible_check") JsonNullable<String> visibleCheck,
            @JsonProperty("content_repeat") Optional<? extends ContentRepeat> contentRepeat) {
        Utils.checkNotNull(showOn, "showOn");
        Utils.checkNotNull(visibleCheck, "visibleCheck");
        Utils.checkNotNull(contentRepeat, "contentRepeat");
        this.showOn = showOn;
        this.visibleCheck = visibleCheck;
        this.contentRepeat = contentRepeat;
    }
    
    public BlockDisplayOptions() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Show on.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ShowOn> showOn() {
        return (JsonNullable<ShowOn>) showOn;
    }

    @JsonIgnore
    public JsonNullable<String> visibleCheck() {
        return visibleCheck;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ContentRepeat> contentRepeat() {
        return (Optional<ContentRepeat>) contentRepeat;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Show on.
     */
    public BlockDisplayOptions withShowOn(ShowOn showOn) {
        Utils.checkNotNull(showOn, "showOn");
        this.showOn = JsonNullable.of(showOn);
        return this;
    }

    /**
     * Show on.
     */
    public BlockDisplayOptions withShowOn(JsonNullable<? extends ShowOn> showOn) {
        Utils.checkNotNull(showOn, "showOn");
        this.showOn = showOn;
        return this;
    }

    public BlockDisplayOptions withVisibleCheck(String visibleCheck) {
        Utils.checkNotNull(visibleCheck, "visibleCheck");
        this.visibleCheck = JsonNullable.of(visibleCheck);
        return this;
    }

    public BlockDisplayOptions withVisibleCheck(JsonNullable<String> visibleCheck) {
        Utils.checkNotNull(visibleCheck, "visibleCheck");
        this.visibleCheck = visibleCheck;
        return this;
    }

    public BlockDisplayOptions withContentRepeat(ContentRepeat contentRepeat) {
        Utils.checkNotNull(contentRepeat, "contentRepeat");
        this.contentRepeat = Optional.ofNullable(contentRepeat);
        return this;
    }

    public BlockDisplayOptions withContentRepeat(Optional<? extends ContentRepeat> contentRepeat) {
        Utils.checkNotNull(contentRepeat, "contentRepeat");
        this.contentRepeat = contentRepeat;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BlockDisplayOptions other = (BlockDisplayOptions) o;
        return 
            Objects.deepEquals(this.showOn, other.showOn) &&
            Objects.deepEquals(this.visibleCheck, other.visibleCheck) &&
            Objects.deepEquals(this.contentRepeat, other.contentRepeat);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            showOn,
            visibleCheck,
            contentRepeat);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BlockDisplayOptions.class,
                "showOn", showOn,
                "visibleCheck", visibleCheck,
                "contentRepeat", contentRepeat);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends ShowOn> showOn = JsonNullable.undefined();
 
        private JsonNullable<String> visibleCheck = JsonNullable.undefined();
 
        private Optional<? extends ContentRepeat> contentRepeat = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Show on.
         */
        public Builder showOn(ShowOn showOn) {
            Utils.checkNotNull(showOn, "showOn");
            this.showOn = JsonNullable.of(showOn);
            return this;
        }

        /**
         * Show on.
         */
        public Builder showOn(JsonNullable<? extends ShowOn> showOn) {
            Utils.checkNotNull(showOn, "showOn");
            this.showOn = showOn;
            return this;
        }

        public Builder visibleCheck(String visibleCheck) {
            Utils.checkNotNull(visibleCheck, "visibleCheck");
            this.visibleCheck = JsonNullable.of(visibleCheck);
            return this;
        }

        public Builder visibleCheck(JsonNullable<String> visibleCheck) {
            Utils.checkNotNull(visibleCheck, "visibleCheck");
            this.visibleCheck = visibleCheck;
            return this;
        }

        public Builder contentRepeat(ContentRepeat contentRepeat) {
            Utils.checkNotNull(contentRepeat, "contentRepeat");
            this.contentRepeat = Optional.ofNullable(contentRepeat);
            return this;
        }

        public Builder contentRepeat(Optional<? extends ContentRepeat> contentRepeat) {
            Utils.checkNotNull(contentRepeat, "contentRepeat");
            this.contentRepeat = contentRepeat;
            return this;
        }
        
        public BlockDisplayOptions build() {
            return new BlockDisplayOptions(
                showOn,
                visibleCheck,
                contentRepeat);
        }
    }
}

