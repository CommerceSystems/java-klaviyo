/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class StreetAddress {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address1")
    private JsonNullable<String> address1;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address2")
    private JsonNullable<String> address2;

    @JsonProperty("city")
    private String city;

    /**
     * State, province, or region.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    private JsonNullable<String> region;

    /**
     * Two-letter [ISO country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zip")
    private JsonNullable<String> zip;

    @JsonCreator
    public StreetAddress(
            @JsonProperty("address1") JsonNullable<String> address1,
            @JsonProperty("address2") JsonNullable<String> address2,
            @JsonProperty("city") String city,
            @JsonProperty("region") JsonNullable<String> region,
            @JsonProperty("country") JsonNullable<String> country,
            @JsonProperty("zip") JsonNullable<String> zip) {
        Utils.checkNotNull(address1, "address1");
        Utils.checkNotNull(address2, "address2");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(zip, "zip");
        this.address1 = address1;
        this.address2 = address2;
        this.city = city;
        this.region = region;
        this.country = country;
        this.zip = zip;
    }
    
    public StreetAddress(
            String city) {
        this(JsonNullable.undefined(), JsonNullable.undefined(), city, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<String> address1() {
        return address1;
    }

    @JsonIgnore
    public JsonNullable<String> address2() {
        return address2;
    }

    @JsonIgnore
    public String city() {
        return city;
    }

    /**
     * State, province, or region.
     */
    @JsonIgnore
    public JsonNullable<String> region() {
        return region;
    }

    /**
     * Two-letter [ISO country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    @JsonIgnore
    public JsonNullable<String> zip() {
        return zip;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public StreetAddress withAddress1(String address1) {
        Utils.checkNotNull(address1, "address1");
        this.address1 = JsonNullable.of(address1);
        return this;
    }

    public StreetAddress withAddress1(JsonNullable<String> address1) {
        Utils.checkNotNull(address1, "address1");
        this.address1 = address1;
        return this;
    }

    public StreetAddress withAddress2(String address2) {
        Utils.checkNotNull(address2, "address2");
        this.address2 = JsonNullable.of(address2);
        return this;
    }

    public StreetAddress withAddress2(JsonNullable<String> address2) {
        Utils.checkNotNull(address2, "address2");
        this.address2 = address2;
        return this;
    }

    public StreetAddress withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * State, province, or region.
     */
    public StreetAddress withRegion(String region) {
        Utils.checkNotNull(region, "region");
        this.region = JsonNullable.of(region);
        return this;
    }

    /**
     * State, province, or region.
     */
    public StreetAddress withRegion(JsonNullable<String> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * Two-letter [ISO country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)
     */
    public StreetAddress withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * Two-letter [ISO country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)
     */
    public StreetAddress withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    public StreetAddress withZip(String zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = JsonNullable.of(zip);
        return this;
    }

    public StreetAddress withZip(JsonNullable<String> zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = zip;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StreetAddress other = (StreetAddress) o;
        return 
            Objects.deepEquals(this.address1, other.address1) &&
            Objects.deepEquals(this.address2, other.address2) &&
            Objects.deepEquals(this.city, other.city) &&
            Objects.deepEquals(this.region, other.region) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.zip, other.zip);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            address1,
            address2,
            city,
            region,
            country,
            zip);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StreetAddress.class,
                "address1", address1,
                "address2", address2,
                "city", city,
                "region", region,
                "country", country,
                "zip", zip);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> address1 = JsonNullable.undefined();
 
        private JsonNullable<String> address2 = JsonNullable.undefined();
 
        private String city;
 
        private JsonNullable<String> region = JsonNullable.undefined();
 
        private JsonNullable<String> country = JsonNullable.undefined();
 
        private JsonNullable<String> zip = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder address1(String address1) {
            Utils.checkNotNull(address1, "address1");
            this.address1 = JsonNullable.of(address1);
            return this;
        }

        public Builder address1(JsonNullable<String> address1) {
            Utils.checkNotNull(address1, "address1");
            this.address1 = address1;
            return this;
        }

        public Builder address2(String address2) {
            Utils.checkNotNull(address2, "address2");
            this.address2 = JsonNullable.of(address2);
            return this;
        }

        public Builder address2(JsonNullable<String> address2) {
            Utils.checkNotNull(address2, "address2");
            this.address2 = address2;
            return this;
        }

        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * State, province, or region.
         */
        public Builder region(String region) {
            Utils.checkNotNull(region, "region");
            this.region = JsonNullable.of(region);
            return this;
        }

        /**
         * State, province, or region.
         */
        public Builder region(JsonNullable<String> region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        /**
         * Two-letter [ISO country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * Two-letter [ISO country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        public Builder zip(String zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = JsonNullable.of(zip);
            return this;
        }

        public Builder zip(JsonNullable<String> zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = zip;
            return this;
        }
        
        public StreetAddress build() {
            return new StreetAddress(
                address1,
                address2,
                city,
                region,
                country,
                zip);
        }
    }
}

