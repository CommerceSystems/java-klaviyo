/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Subscriptions {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<? extends EmailChannel> email;

    /**
     * The SMS channel subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sms")
    private JsonNullable<? extends Sms> sms;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobile_push")
    private Optional<? extends PushChannel> mobilePush;

    @JsonCreator
    public Subscriptions(
            @JsonProperty("email") Optional<? extends EmailChannel> email,
            @JsonProperty("sms") JsonNullable<? extends Sms> sms,
            @JsonProperty("mobile_push") Optional<? extends PushChannel> mobilePush) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(sms, "sms");
        Utils.checkNotNull(mobilePush, "mobilePush");
        this.email = email;
        this.sms = sms;
        this.mobilePush = mobilePush;
    }
    
    public Subscriptions() {
        this(Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EmailChannel> email() {
        return (Optional<EmailChannel>) email;
    }

    /**
     * The SMS channel subscription.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Sms> sms() {
        return (JsonNullable<Sms>) sms;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PushChannel> mobilePush() {
        return (Optional<PushChannel>) mobilePush;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Subscriptions withEmail(EmailChannel email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    public Subscriptions withEmail(Optional<? extends EmailChannel> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The SMS channel subscription.
     */
    public Subscriptions withSms(Sms sms) {
        Utils.checkNotNull(sms, "sms");
        this.sms = JsonNullable.of(sms);
        return this;
    }

    /**
     * The SMS channel subscription.
     */
    public Subscriptions withSms(JsonNullable<? extends Sms> sms) {
        Utils.checkNotNull(sms, "sms");
        this.sms = sms;
        return this;
    }

    public Subscriptions withMobilePush(PushChannel mobilePush) {
        Utils.checkNotNull(mobilePush, "mobilePush");
        this.mobilePush = Optional.ofNullable(mobilePush);
        return this;
    }

    public Subscriptions withMobilePush(Optional<? extends PushChannel> mobilePush) {
        Utils.checkNotNull(mobilePush, "mobilePush");
        this.mobilePush = mobilePush;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Subscriptions other = (Subscriptions) o;
        return 
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.sms, other.sms) &&
            Objects.deepEquals(this.mobilePush, other.mobilePush);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            email,
            sms,
            mobilePush);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Subscriptions.class,
                "email", email,
                "sms", sms,
                "mobilePush", mobilePush);
    }
    
    public final static class Builder {
 
        private Optional<? extends EmailChannel> email = Optional.empty();
 
        private JsonNullable<? extends Sms> sms = JsonNullable.undefined();
 
        private Optional<? extends PushChannel> mobilePush = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder email(EmailChannel email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        public Builder email(Optional<? extends EmailChannel> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * The SMS channel subscription.
         */
        public Builder sms(Sms sms) {
            Utils.checkNotNull(sms, "sms");
            this.sms = JsonNullable.of(sms);
            return this;
        }

        /**
         * The SMS channel subscription.
         */
        public Builder sms(JsonNullable<? extends Sms> sms) {
            Utils.checkNotNull(sms, "sms");
            this.sms = sms;
            return this;
        }

        public Builder mobilePush(PushChannel mobilePush) {
            Utils.checkNotNull(mobilePush, "mobilePush");
            this.mobilePush = Optional.ofNullable(mobilePush);
            return this;
        }

        public Builder mobilePush(Optional<? extends PushChannel> mobilePush) {
            Utils.checkNotNull(mobilePush, "mobilePush");
            this.mobilePush = mobilePush;
            return this;
        }
        
        public Subscriptions build() {
            return new Subscriptions(
                email,
                sms,
                mobilePush);
        }
    }
}

