/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public class MetricAggregateRowDTO {

    /**
     * List of dimensions associated with this set of measurements
     */
    @JsonProperty("dimensions")
    private List<String> dimensions;

    /**
     * Dictionary of measurement_key, values
     */
    @JsonProperty("measurements")
    private Measurements measurements;

    @JsonCreator
    public MetricAggregateRowDTO(
            @JsonProperty("dimensions") List<String> dimensions,
            @JsonProperty("measurements") Measurements measurements) {
        Utils.checkNotNull(dimensions, "dimensions");
        Utils.checkNotNull(measurements, "measurements");
        this.dimensions = dimensions;
        this.measurements = measurements;
    }

    /**
     * List of dimensions associated with this set of measurements
     */
    @JsonIgnore
    public List<String> dimensions() {
        return dimensions;
    }

    /**
     * Dictionary of measurement_key, values
     */
    @JsonIgnore
    public Measurements measurements() {
        return measurements;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * List of dimensions associated with this set of measurements
     */
    public MetricAggregateRowDTO withDimensions(List<String> dimensions) {
        Utils.checkNotNull(dimensions, "dimensions");
        this.dimensions = dimensions;
        return this;
    }

    /**
     * Dictionary of measurement_key, values
     */
    public MetricAggregateRowDTO withMeasurements(Measurements measurements) {
        Utils.checkNotNull(measurements, "measurements");
        this.measurements = measurements;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MetricAggregateRowDTO other = (MetricAggregateRowDTO) o;
        return 
            Objects.deepEquals(this.dimensions, other.dimensions) &&
            Objects.deepEquals(this.measurements, other.measurements);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            dimensions,
            measurements);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MetricAggregateRowDTO.class,
                "dimensions", dimensions,
                "measurements", measurements);
    }
    
    public final static class Builder {
 
        private List<String> dimensions;
 
        private Measurements measurements;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of dimensions associated with this set of measurements
         */
        public Builder dimensions(List<String> dimensions) {
            Utils.checkNotNull(dimensions, "dimensions");
            this.dimensions = dimensions;
            return this;
        }

        /**
         * Dictionary of measurement_key, values
         */
        public Builder measurements(Measurements measurements) {
            Utils.checkNotNull(measurements, "measurements");
            this.measurements = measurements;
            return this;
        }
        
        public MetricAggregateRowDTO build() {
            return new MetricAggregateRowDTO(
                dimensions,
                measurements);
        }
    }
}

