/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class PostWebhookResponseRelationships {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhook-topics")
    private Optional<? extends PostWebhookResponseWebhookTopics> webhookTopics;

    @JsonCreator
    public PostWebhookResponseRelationships(
            @JsonProperty("webhook-topics") Optional<? extends PostWebhookResponseWebhookTopics> webhookTopics) {
        Utils.checkNotNull(webhookTopics, "webhookTopics");
        this.webhookTopics = webhookTopics;
    }
    
    public PostWebhookResponseRelationships() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PostWebhookResponseWebhookTopics> webhookTopics() {
        return (Optional<PostWebhookResponseWebhookTopics>) webhookTopics;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PostWebhookResponseRelationships withWebhookTopics(PostWebhookResponseWebhookTopics webhookTopics) {
        Utils.checkNotNull(webhookTopics, "webhookTopics");
        this.webhookTopics = Optional.ofNullable(webhookTopics);
        return this;
    }

    public PostWebhookResponseRelationships withWebhookTopics(Optional<? extends PostWebhookResponseWebhookTopics> webhookTopics) {
        Utils.checkNotNull(webhookTopics, "webhookTopics");
        this.webhookTopics = webhookTopics;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostWebhookResponseRelationships other = (PostWebhookResponseRelationships) o;
        return 
            Objects.deepEquals(this.webhookTopics, other.webhookTopics);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            webhookTopics);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostWebhookResponseRelationships.class,
                "webhookTopics", webhookTopics);
    }
    
    public final static class Builder {
 
        private Optional<? extends PostWebhookResponseWebhookTopics> webhookTopics = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder webhookTopics(PostWebhookResponseWebhookTopics webhookTopics) {
            Utils.checkNotNull(webhookTopics, "webhookTopics");
            this.webhookTopics = Optional.ofNullable(webhookTopics);
            return this;
        }

        public Builder webhookTopics(Optional<? extends PostWebhookResponseWebhookTopics> webhookTopics) {
            Utils.checkNotNull(webhookTopics, "webhookTopics");
            this.webhookTopics = webhookTopics;
            return this;
        }
        
        public PostWebhookResponseRelationships build() {
            return new PostWebhookResponseRelationships(
                webhookTopics);
        }
    }
}

