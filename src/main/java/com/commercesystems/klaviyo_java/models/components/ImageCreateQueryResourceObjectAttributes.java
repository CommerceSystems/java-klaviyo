/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.LazySingletonValue;
import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class ImageCreateQueryResourceObjectAttributes {

    /**
     * A name for the image.  Defaults to the filename if not provided.  If the name matches an existing image, a suffix will be added.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * An existing image url to import the image from. Alternatively, you may specify a base-64 encoded data-uri (`data:image/...`). Supported image formats: jpeg,png,gif. Maximum image size: 5MB.
     */
    @JsonProperty("import_from_url")
    private String importFromUrl;

    /**
     * If true, this image is not shown in the asset library.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hidden")
    private JsonNullable<Boolean> hidden;

    @JsonCreator
    public ImageCreateQueryResourceObjectAttributes(
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("import_from_url") String importFromUrl,
            @JsonProperty("hidden") JsonNullable<Boolean> hidden) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(importFromUrl, "importFromUrl");
        Utils.checkNotNull(hidden, "hidden");
        this.name = name;
        this.importFromUrl = importFromUrl;
        this.hidden = hidden;
    }
    
    public ImageCreateQueryResourceObjectAttributes(
            String importFromUrl) {
        this(JsonNullable.undefined(), importFromUrl, JsonNullable.undefined());
    }

    /**
     * A name for the image.  Defaults to the filename if not provided.  If the name matches an existing image, a suffix will be added.
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * An existing image url to import the image from. Alternatively, you may specify a base-64 encoded data-uri (`data:image/...`). Supported image formats: jpeg,png,gif. Maximum image size: 5MB.
     */
    @JsonIgnore
    public String importFromUrl() {
        return importFromUrl;
    }

    /**
     * If true, this image is not shown in the asset library.
     */
    @JsonIgnore
    public JsonNullable<Boolean> hidden() {
        return hidden;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A name for the image.  Defaults to the filename if not provided.  If the name matches an existing image, a suffix will be added.
     */
    public ImageCreateQueryResourceObjectAttributes withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * A name for the image.  Defaults to the filename if not provided.  If the name matches an existing image, a suffix will be added.
     */
    public ImageCreateQueryResourceObjectAttributes withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * An existing image url to import the image from. Alternatively, you may specify a base-64 encoded data-uri (`data:image/...`). Supported image formats: jpeg,png,gif. Maximum image size: 5MB.
     */
    public ImageCreateQueryResourceObjectAttributes withImportFromUrl(String importFromUrl) {
        Utils.checkNotNull(importFromUrl, "importFromUrl");
        this.importFromUrl = importFromUrl;
        return this;
    }

    /**
     * If true, this image is not shown in the asset library.
     */
    public ImageCreateQueryResourceObjectAttributes withHidden(boolean hidden) {
        Utils.checkNotNull(hidden, "hidden");
        this.hidden = JsonNullable.of(hidden);
        return this;
    }

    /**
     * If true, this image is not shown in the asset library.
     */
    public ImageCreateQueryResourceObjectAttributes withHidden(JsonNullable<Boolean> hidden) {
        Utils.checkNotNull(hidden, "hidden");
        this.hidden = hidden;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ImageCreateQueryResourceObjectAttributes other = (ImageCreateQueryResourceObjectAttributes) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.importFromUrl, other.importFromUrl) &&
            Objects.deepEquals(this.hidden, other.hidden);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            importFromUrl,
            hidden);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ImageCreateQueryResourceObjectAttributes.class,
                "name", name,
                "importFromUrl", importFromUrl,
                "hidden", hidden);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private String importFromUrl;
 
        private JsonNullable<Boolean> hidden;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A name for the image.  Defaults to the filename if not provided.  If the name matches an existing image, a suffix will be added.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * A name for the image.  Defaults to the filename if not provided.  If the name matches an existing image, a suffix will be added.
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * An existing image url to import the image from. Alternatively, you may specify a base-64 encoded data-uri (`data:image/...`). Supported image formats: jpeg,png,gif. Maximum image size: 5MB.
         */
        public Builder importFromUrl(String importFromUrl) {
            Utils.checkNotNull(importFromUrl, "importFromUrl");
            this.importFromUrl = importFromUrl;
            return this;
        }

        /**
         * If true, this image is not shown in the asset library.
         */
        public Builder hidden(boolean hidden) {
            Utils.checkNotNull(hidden, "hidden");
            this.hidden = JsonNullable.of(hidden);
            return this;
        }

        /**
         * If true, this image is not shown in the asset library.
         */
        public Builder hidden(JsonNullable<Boolean> hidden) {
            Utils.checkNotNull(hidden, "hidden");
            this.hidden = hidden;
            return this;
        }
        
        public ImageCreateQueryResourceObjectAttributes build() {
            if (hidden == null) {
                hidden = _SINGLETON_VALUE_Hidden.value();
            }            return new ImageCreateQueryResourceObjectAttributes(
                name,
                importFromUrl,
                hidden);
        }

        private static final LazySingletonValue<JsonNullable<Boolean>> _SINGLETON_VALUE_Hidden =
                new LazySingletonValue<>(
                        "hidden",
                        "false",
                        new TypeReference<JsonNullable<Boolean>>() {});
    }
}

