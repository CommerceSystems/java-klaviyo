/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class TextBlockStyles {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("block_background_color")
    private JsonNullable<String> blockBackgroundColor;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("block_border_color")
    private JsonNullable<String> blockBorderColor;

    /**
     * Border style.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("block_border_style")
    private JsonNullable<? extends BlockBorderStyle> blockBorderStyle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("block_border_width")
    private JsonNullable<Long> blockBorderWidth;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("block_padding_bottom")
    private JsonNullable<Long> blockPaddingBottom;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("block_padding_left")
    private JsonNullable<Long> blockPaddingLeft;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("block_padding_right")
    private JsonNullable<Long> blockPaddingRight;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("block_padding_top")
    private JsonNullable<Long> blockPaddingTop;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color")
    private JsonNullable<String> color;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extra_css_class")
    private JsonNullable<String> extraCssClass;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("font_family")
    private JsonNullable<String> fontFamily;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("font_size")
    private JsonNullable<Long> fontSize;

    /**
     * Font style.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("font_style")
    private JsonNullable<? extends FontStyle> fontStyle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("font_weight")
    private JsonNullable<String> fontWeight;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inner_padding_bottom")
    private JsonNullable<Long> innerPaddingBottom;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inner_padding_left")
    private JsonNullable<Long> innerPaddingLeft;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inner_padding_right")
    private JsonNullable<Long> innerPaddingRight;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inner_padding_top")
    private JsonNullable<Long> innerPaddingTop;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobile_stretch_content")
    private JsonNullable<Boolean> mobileStretchContent;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("background_color")
    private JsonNullable<String> backgroundColor;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("letter_spacing")
    private JsonNullable<Long> letterSpacing;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_height")
    private JsonNullable<Double> lineHeight;

    /**
     * Text Alignment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text_align")
    private JsonNullable<? extends TextAlign> textAlign;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text_decoration")
    private JsonNullable<String> textDecoration;

    /**
     * Text table layout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text_table_layout")
    private JsonNullable<? extends TextTableLayout> textTableLayout;

    @JsonCreator
    public TextBlockStyles(
            @JsonProperty("block_background_color") JsonNullable<String> blockBackgroundColor,
            @JsonProperty("block_border_color") JsonNullable<String> blockBorderColor,
            @JsonProperty("block_border_style") JsonNullable<? extends BlockBorderStyle> blockBorderStyle,
            @JsonProperty("block_border_width") JsonNullable<Long> blockBorderWidth,
            @JsonProperty("block_padding_bottom") JsonNullable<Long> blockPaddingBottom,
            @JsonProperty("block_padding_left") JsonNullable<Long> blockPaddingLeft,
            @JsonProperty("block_padding_right") JsonNullable<Long> blockPaddingRight,
            @JsonProperty("block_padding_top") JsonNullable<Long> blockPaddingTop,
            @JsonProperty("color") JsonNullable<String> color,
            @JsonProperty("extra_css_class") JsonNullable<String> extraCssClass,
            @JsonProperty("font_family") JsonNullable<String> fontFamily,
            @JsonProperty("font_size") JsonNullable<Long> fontSize,
            @JsonProperty("font_style") JsonNullable<? extends FontStyle> fontStyle,
            @JsonProperty("font_weight") JsonNullable<String> fontWeight,
            @JsonProperty("inner_padding_bottom") JsonNullable<Long> innerPaddingBottom,
            @JsonProperty("inner_padding_left") JsonNullable<Long> innerPaddingLeft,
            @JsonProperty("inner_padding_right") JsonNullable<Long> innerPaddingRight,
            @JsonProperty("inner_padding_top") JsonNullable<Long> innerPaddingTop,
            @JsonProperty("mobile_stretch_content") JsonNullable<Boolean> mobileStretchContent,
            @JsonProperty("background_color") JsonNullable<String> backgroundColor,
            @JsonProperty("letter_spacing") JsonNullable<Long> letterSpacing,
            @JsonProperty("line_height") JsonNullable<Double> lineHeight,
            @JsonProperty("text_align") JsonNullable<? extends TextAlign> textAlign,
            @JsonProperty("text_decoration") JsonNullable<String> textDecoration,
            @JsonProperty("text_table_layout") JsonNullable<? extends TextTableLayout> textTableLayout) {
        Utils.checkNotNull(blockBackgroundColor, "blockBackgroundColor");
        Utils.checkNotNull(blockBorderColor, "blockBorderColor");
        Utils.checkNotNull(blockBorderStyle, "blockBorderStyle");
        Utils.checkNotNull(blockBorderWidth, "blockBorderWidth");
        Utils.checkNotNull(blockPaddingBottom, "blockPaddingBottom");
        Utils.checkNotNull(blockPaddingLeft, "blockPaddingLeft");
        Utils.checkNotNull(blockPaddingRight, "blockPaddingRight");
        Utils.checkNotNull(blockPaddingTop, "blockPaddingTop");
        Utils.checkNotNull(color, "color");
        Utils.checkNotNull(extraCssClass, "extraCssClass");
        Utils.checkNotNull(fontFamily, "fontFamily");
        Utils.checkNotNull(fontSize, "fontSize");
        Utils.checkNotNull(fontStyle, "fontStyle");
        Utils.checkNotNull(fontWeight, "fontWeight");
        Utils.checkNotNull(innerPaddingBottom, "innerPaddingBottom");
        Utils.checkNotNull(innerPaddingLeft, "innerPaddingLeft");
        Utils.checkNotNull(innerPaddingRight, "innerPaddingRight");
        Utils.checkNotNull(innerPaddingTop, "innerPaddingTop");
        Utils.checkNotNull(mobileStretchContent, "mobileStretchContent");
        Utils.checkNotNull(backgroundColor, "backgroundColor");
        Utils.checkNotNull(letterSpacing, "letterSpacing");
        Utils.checkNotNull(lineHeight, "lineHeight");
        Utils.checkNotNull(textAlign, "textAlign");
        Utils.checkNotNull(textDecoration, "textDecoration");
        Utils.checkNotNull(textTableLayout, "textTableLayout");
        this.blockBackgroundColor = blockBackgroundColor;
        this.blockBorderColor = blockBorderColor;
        this.blockBorderStyle = blockBorderStyle;
        this.blockBorderWidth = blockBorderWidth;
        this.blockPaddingBottom = blockPaddingBottom;
        this.blockPaddingLeft = blockPaddingLeft;
        this.blockPaddingRight = blockPaddingRight;
        this.blockPaddingTop = blockPaddingTop;
        this.color = color;
        this.extraCssClass = extraCssClass;
        this.fontFamily = fontFamily;
        this.fontSize = fontSize;
        this.fontStyle = fontStyle;
        this.fontWeight = fontWeight;
        this.innerPaddingBottom = innerPaddingBottom;
        this.innerPaddingLeft = innerPaddingLeft;
        this.innerPaddingRight = innerPaddingRight;
        this.innerPaddingTop = innerPaddingTop;
        this.mobileStretchContent = mobileStretchContent;
        this.backgroundColor = backgroundColor;
        this.letterSpacing = letterSpacing;
        this.lineHeight = lineHeight;
        this.textAlign = textAlign;
        this.textDecoration = textDecoration;
        this.textTableLayout = textTableLayout;
    }
    
    public TextBlockStyles() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public JsonNullable<String> blockBackgroundColor() {
        return blockBackgroundColor;
    }

    @JsonIgnore
    public JsonNullable<String> blockBorderColor() {
        return blockBorderColor;
    }

    /**
     * Border style.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BlockBorderStyle> blockBorderStyle() {
        return (JsonNullable<BlockBorderStyle>) blockBorderStyle;
    }

    @JsonIgnore
    public JsonNullable<Long> blockBorderWidth() {
        return blockBorderWidth;
    }

    @JsonIgnore
    public JsonNullable<Long> blockPaddingBottom() {
        return blockPaddingBottom;
    }

    @JsonIgnore
    public JsonNullable<Long> blockPaddingLeft() {
        return blockPaddingLeft;
    }

    @JsonIgnore
    public JsonNullable<Long> blockPaddingRight() {
        return blockPaddingRight;
    }

    @JsonIgnore
    public JsonNullable<Long> blockPaddingTop() {
        return blockPaddingTop;
    }

    @JsonIgnore
    public JsonNullable<String> color() {
        return color;
    }

    @JsonIgnore
    public JsonNullable<String> extraCssClass() {
        return extraCssClass;
    }

    @JsonIgnore
    public JsonNullable<String> fontFamily() {
        return fontFamily;
    }

    @JsonIgnore
    public JsonNullable<Long> fontSize() {
        return fontSize;
    }

    /**
     * Font style.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<FontStyle> fontStyle() {
        return (JsonNullable<FontStyle>) fontStyle;
    }

    @JsonIgnore
    public JsonNullable<String> fontWeight() {
        return fontWeight;
    }

    @JsonIgnore
    public JsonNullable<Long> innerPaddingBottom() {
        return innerPaddingBottom;
    }

    @JsonIgnore
    public JsonNullable<Long> innerPaddingLeft() {
        return innerPaddingLeft;
    }

    @JsonIgnore
    public JsonNullable<Long> innerPaddingRight() {
        return innerPaddingRight;
    }

    @JsonIgnore
    public JsonNullable<Long> innerPaddingTop() {
        return innerPaddingTop;
    }

    @JsonIgnore
    public JsonNullable<Boolean> mobileStretchContent() {
        return mobileStretchContent;
    }

    @JsonIgnore
    public JsonNullable<String> backgroundColor() {
        return backgroundColor;
    }

    @JsonIgnore
    public JsonNullable<Long> letterSpacing() {
        return letterSpacing;
    }

    @JsonIgnore
    public JsonNullable<Double> lineHeight() {
        return lineHeight;
    }

    /**
     * Text Alignment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TextAlign> textAlign() {
        return (JsonNullable<TextAlign>) textAlign;
    }

    @JsonIgnore
    public JsonNullable<String> textDecoration() {
        return textDecoration;
    }

    /**
     * Text table layout.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<TextTableLayout> textTableLayout() {
        return (JsonNullable<TextTableLayout>) textTableLayout;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TextBlockStyles withBlockBackgroundColor(String blockBackgroundColor) {
        Utils.checkNotNull(blockBackgroundColor, "blockBackgroundColor");
        this.blockBackgroundColor = JsonNullable.of(blockBackgroundColor);
        return this;
    }

    public TextBlockStyles withBlockBackgroundColor(JsonNullable<String> blockBackgroundColor) {
        Utils.checkNotNull(blockBackgroundColor, "blockBackgroundColor");
        this.blockBackgroundColor = blockBackgroundColor;
        return this;
    }

    public TextBlockStyles withBlockBorderColor(String blockBorderColor) {
        Utils.checkNotNull(blockBorderColor, "blockBorderColor");
        this.blockBorderColor = JsonNullable.of(blockBorderColor);
        return this;
    }

    public TextBlockStyles withBlockBorderColor(JsonNullable<String> blockBorderColor) {
        Utils.checkNotNull(blockBorderColor, "blockBorderColor");
        this.blockBorderColor = blockBorderColor;
        return this;
    }

    /**
     * Border style.
     */
    public TextBlockStyles withBlockBorderStyle(BlockBorderStyle blockBorderStyle) {
        Utils.checkNotNull(blockBorderStyle, "blockBorderStyle");
        this.blockBorderStyle = JsonNullable.of(blockBorderStyle);
        return this;
    }

    /**
     * Border style.
     */
    public TextBlockStyles withBlockBorderStyle(JsonNullable<? extends BlockBorderStyle> blockBorderStyle) {
        Utils.checkNotNull(blockBorderStyle, "blockBorderStyle");
        this.blockBorderStyle = blockBorderStyle;
        return this;
    }

    public TextBlockStyles withBlockBorderWidth(long blockBorderWidth) {
        Utils.checkNotNull(blockBorderWidth, "blockBorderWidth");
        this.blockBorderWidth = JsonNullable.of(blockBorderWidth);
        return this;
    }

    public TextBlockStyles withBlockBorderWidth(JsonNullable<Long> blockBorderWidth) {
        Utils.checkNotNull(blockBorderWidth, "blockBorderWidth");
        this.blockBorderWidth = blockBorderWidth;
        return this;
    }

    public TextBlockStyles withBlockPaddingBottom(long blockPaddingBottom) {
        Utils.checkNotNull(blockPaddingBottom, "blockPaddingBottom");
        this.blockPaddingBottom = JsonNullable.of(blockPaddingBottom);
        return this;
    }

    public TextBlockStyles withBlockPaddingBottom(JsonNullable<Long> blockPaddingBottom) {
        Utils.checkNotNull(blockPaddingBottom, "blockPaddingBottom");
        this.blockPaddingBottom = blockPaddingBottom;
        return this;
    }

    public TextBlockStyles withBlockPaddingLeft(long blockPaddingLeft) {
        Utils.checkNotNull(blockPaddingLeft, "blockPaddingLeft");
        this.blockPaddingLeft = JsonNullable.of(blockPaddingLeft);
        return this;
    }

    public TextBlockStyles withBlockPaddingLeft(JsonNullable<Long> blockPaddingLeft) {
        Utils.checkNotNull(blockPaddingLeft, "blockPaddingLeft");
        this.blockPaddingLeft = blockPaddingLeft;
        return this;
    }

    public TextBlockStyles withBlockPaddingRight(long blockPaddingRight) {
        Utils.checkNotNull(blockPaddingRight, "blockPaddingRight");
        this.blockPaddingRight = JsonNullable.of(blockPaddingRight);
        return this;
    }

    public TextBlockStyles withBlockPaddingRight(JsonNullable<Long> blockPaddingRight) {
        Utils.checkNotNull(blockPaddingRight, "blockPaddingRight");
        this.blockPaddingRight = blockPaddingRight;
        return this;
    }

    public TextBlockStyles withBlockPaddingTop(long blockPaddingTop) {
        Utils.checkNotNull(blockPaddingTop, "blockPaddingTop");
        this.blockPaddingTop = JsonNullable.of(blockPaddingTop);
        return this;
    }

    public TextBlockStyles withBlockPaddingTop(JsonNullable<Long> blockPaddingTop) {
        Utils.checkNotNull(blockPaddingTop, "blockPaddingTop");
        this.blockPaddingTop = blockPaddingTop;
        return this;
    }

    public TextBlockStyles withColor(String color) {
        Utils.checkNotNull(color, "color");
        this.color = JsonNullable.of(color);
        return this;
    }

    public TextBlockStyles withColor(JsonNullable<String> color) {
        Utils.checkNotNull(color, "color");
        this.color = color;
        return this;
    }

    public TextBlockStyles withExtraCssClass(String extraCssClass) {
        Utils.checkNotNull(extraCssClass, "extraCssClass");
        this.extraCssClass = JsonNullable.of(extraCssClass);
        return this;
    }

    public TextBlockStyles withExtraCssClass(JsonNullable<String> extraCssClass) {
        Utils.checkNotNull(extraCssClass, "extraCssClass");
        this.extraCssClass = extraCssClass;
        return this;
    }

    public TextBlockStyles withFontFamily(String fontFamily) {
        Utils.checkNotNull(fontFamily, "fontFamily");
        this.fontFamily = JsonNullable.of(fontFamily);
        return this;
    }

    public TextBlockStyles withFontFamily(JsonNullable<String> fontFamily) {
        Utils.checkNotNull(fontFamily, "fontFamily");
        this.fontFamily = fontFamily;
        return this;
    }

    public TextBlockStyles withFontSize(long fontSize) {
        Utils.checkNotNull(fontSize, "fontSize");
        this.fontSize = JsonNullable.of(fontSize);
        return this;
    }

    public TextBlockStyles withFontSize(JsonNullable<Long> fontSize) {
        Utils.checkNotNull(fontSize, "fontSize");
        this.fontSize = fontSize;
        return this;
    }

    /**
     * Font style.
     */
    public TextBlockStyles withFontStyle(FontStyle fontStyle) {
        Utils.checkNotNull(fontStyle, "fontStyle");
        this.fontStyle = JsonNullable.of(fontStyle);
        return this;
    }

    /**
     * Font style.
     */
    public TextBlockStyles withFontStyle(JsonNullable<? extends FontStyle> fontStyle) {
        Utils.checkNotNull(fontStyle, "fontStyle");
        this.fontStyle = fontStyle;
        return this;
    }

    public TextBlockStyles withFontWeight(String fontWeight) {
        Utils.checkNotNull(fontWeight, "fontWeight");
        this.fontWeight = JsonNullable.of(fontWeight);
        return this;
    }

    public TextBlockStyles withFontWeight(JsonNullable<String> fontWeight) {
        Utils.checkNotNull(fontWeight, "fontWeight");
        this.fontWeight = fontWeight;
        return this;
    }

    public TextBlockStyles withInnerPaddingBottom(long innerPaddingBottom) {
        Utils.checkNotNull(innerPaddingBottom, "innerPaddingBottom");
        this.innerPaddingBottom = JsonNullable.of(innerPaddingBottom);
        return this;
    }

    public TextBlockStyles withInnerPaddingBottom(JsonNullable<Long> innerPaddingBottom) {
        Utils.checkNotNull(innerPaddingBottom, "innerPaddingBottom");
        this.innerPaddingBottom = innerPaddingBottom;
        return this;
    }

    public TextBlockStyles withInnerPaddingLeft(long innerPaddingLeft) {
        Utils.checkNotNull(innerPaddingLeft, "innerPaddingLeft");
        this.innerPaddingLeft = JsonNullable.of(innerPaddingLeft);
        return this;
    }

    public TextBlockStyles withInnerPaddingLeft(JsonNullable<Long> innerPaddingLeft) {
        Utils.checkNotNull(innerPaddingLeft, "innerPaddingLeft");
        this.innerPaddingLeft = innerPaddingLeft;
        return this;
    }

    public TextBlockStyles withInnerPaddingRight(long innerPaddingRight) {
        Utils.checkNotNull(innerPaddingRight, "innerPaddingRight");
        this.innerPaddingRight = JsonNullable.of(innerPaddingRight);
        return this;
    }

    public TextBlockStyles withInnerPaddingRight(JsonNullable<Long> innerPaddingRight) {
        Utils.checkNotNull(innerPaddingRight, "innerPaddingRight");
        this.innerPaddingRight = innerPaddingRight;
        return this;
    }

    public TextBlockStyles withInnerPaddingTop(long innerPaddingTop) {
        Utils.checkNotNull(innerPaddingTop, "innerPaddingTop");
        this.innerPaddingTop = JsonNullable.of(innerPaddingTop);
        return this;
    }

    public TextBlockStyles withInnerPaddingTop(JsonNullable<Long> innerPaddingTop) {
        Utils.checkNotNull(innerPaddingTop, "innerPaddingTop");
        this.innerPaddingTop = innerPaddingTop;
        return this;
    }

    public TextBlockStyles withMobileStretchContent(boolean mobileStretchContent) {
        Utils.checkNotNull(mobileStretchContent, "mobileStretchContent");
        this.mobileStretchContent = JsonNullable.of(mobileStretchContent);
        return this;
    }

    public TextBlockStyles withMobileStretchContent(JsonNullable<Boolean> mobileStretchContent) {
        Utils.checkNotNull(mobileStretchContent, "mobileStretchContent");
        this.mobileStretchContent = mobileStretchContent;
        return this;
    }

    public TextBlockStyles withBackgroundColor(String backgroundColor) {
        Utils.checkNotNull(backgroundColor, "backgroundColor");
        this.backgroundColor = JsonNullable.of(backgroundColor);
        return this;
    }

    public TextBlockStyles withBackgroundColor(JsonNullable<String> backgroundColor) {
        Utils.checkNotNull(backgroundColor, "backgroundColor");
        this.backgroundColor = backgroundColor;
        return this;
    }

    public TextBlockStyles withLetterSpacing(long letterSpacing) {
        Utils.checkNotNull(letterSpacing, "letterSpacing");
        this.letterSpacing = JsonNullable.of(letterSpacing);
        return this;
    }

    public TextBlockStyles withLetterSpacing(JsonNullable<Long> letterSpacing) {
        Utils.checkNotNull(letterSpacing, "letterSpacing");
        this.letterSpacing = letterSpacing;
        return this;
    }

    public TextBlockStyles withLineHeight(double lineHeight) {
        Utils.checkNotNull(lineHeight, "lineHeight");
        this.lineHeight = JsonNullable.of(lineHeight);
        return this;
    }

    public TextBlockStyles withLineHeight(JsonNullable<Double> lineHeight) {
        Utils.checkNotNull(lineHeight, "lineHeight");
        this.lineHeight = lineHeight;
        return this;
    }

    /**
     * Text Alignment.
     */
    public TextBlockStyles withTextAlign(TextAlign textAlign) {
        Utils.checkNotNull(textAlign, "textAlign");
        this.textAlign = JsonNullable.of(textAlign);
        return this;
    }

    /**
     * Text Alignment.
     */
    public TextBlockStyles withTextAlign(JsonNullable<? extends TextAlign> textAlign) {
        Utils.checkNotNull(textAlign, "textAlign");
        this.textAlign = textAlign;
        return this;
    }

    public TextBlockStyles withTextDecoration(String textDecoration) {
        Utils.checkNotNull(textDecoration, "textDecoration");
        this.textDecoration = JsonNullable.of(textDecoration);
        return this;
    }

    public TextBlockStyles withTextDecoration(JsonNullable<String> textDecoration) {
        Utils.checkNotNull(textDecoration, "textDecoration");
        this.textDecoration = textDecoration;
        return this;
    }

    /**
     * Text table layout.
     */
    public TextBlockStyles withTextTableLayout(TextTableLayout textTableLayout) {
        Utils.checkNotNull(textTableLayout, "textTableLayout");
        this.textTableLayout = JsonNullable.of(textTableLayout);
        return this;
    }

    /**
     * Text table layout.
     */
    public TextBlockStyles withTextTableLayout(JsonNullable<? extends TextTableLayout> textTableLayout) {
        Utils.checkNotNull(textTableLayout, "textTableLayout");
        this.textTableLayout = textTableLayout;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TextBlockStyles other = (TextBlockStyles) o;
        return 
            Objects.deepEquals(this.blockBackgroundColor, other.blockBackgroundColor) &&
            Objects.deepEquals(this.blockBorderColor, other.blockBorderColor) &&
            Objects.deepEquals(this.blockBorderStyle, other.blockBorderStyle) &&
            Objects.deepEquals(this.blockBorderWidth, other.blockBorderWidth) &&
            Objects.deepEquals(this.blockPaddingBottom, other.blockPaddingBottom) &&
            Objects.deepEquals(this.blockPaddingLeft, other.blockPaddingLeft) &&
            Objects.deepEquals(this.blockPaddingRight, other.blockPaddingRight) &&
            Objects.deepEquals(this.blockPaddingTop, other.blockPaddingTop) &&
            Objects.deepEquals(this.color, other.color) &&
            Objects.deepEquals(this.extraCssClass, other.extraCssClass) &&
            Objects.deepEquals(this.fontFamily, other.fontFamily) &&
            Objects.deepEquals(this.fontSize, other.fontSize) &&
            Objects.deepEquals(this.fontStyle, other.fontStyle) &&
            Objects.deepEquals(this.fontWeight, other.fontWeight) &&
            Objects.deepEquals(this.innerPaddingBottom, other.innerPaddingBottom) &&
            Objects.deepEquals(this.innerPaddingLeft, other.innerPaddingLeft) &&
            Objects.deepEquals(this.innerPaddingRight, other.innerPaddingRight) &&
            Objects.deepEquals(this.innerPaddingTop, other.innerPaddingTop) &&
            Objects.deepEquals(this.mobileStretchContent, other.mobileStretchContent) &&
            Objects.deepEquals(this.backgroundColor, other.backgroundColor) &&
            Objects.deepEquals(this.letterSpacing, other.letterSpacing) &&
            Objects.deepEquals(this.lineHeight, other.lineHeight) &&
            Objects.deepEquals(this.textAlign, other.textAlign) &&
            Objects.deepEquals(this.textDecoration, other.textDecoration) &&
            Objects.deepEquals(this.textTableLayout, other.textTableLayout);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            blockBackgroundColor,
            blockBorderColor,
            blockBorderStyle,
            blockBorderWidth,
            blockPaddingBottom,
            blockPaddingLeft,
            blockPaddingRight,
            blockPaddingTop,
            color,
            extraCssClass,
            fontFamily,
            fontSize,
            fontStyle,
            fontWeight,
            innerPaddingBottom,
            innerPaddingLeft,
            innerPaddingRight,
            innerPaddingTop,
            mobileStretchContent,
            backgroundColor,
            letterSpacing,
            lineHeight,
            textAlign,
            textDecoration,
            textTableLayout);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TextBlockStyles.class,
                "blockBackgroundColor", blockBackgroundColor,
                "blockBorderColor", blockBorderColor,
                "blockBorderStyle", blockBorderStyle,
                "blockBorderWidth", blockBorderWidth,
                "blockPaddingBottom", blockPaddingBottom,
                "blockPaddingLeft", blockPaddingLeft,
                "blockPaddingRight", blockPaddingRight,
                "blockPaddingTop", blockPaddingTop,
                "color", color,
                "extraCssClass", extraCssClass,
                "fontFamily", fontFamily,
                "fontSize", fontSize,
                "fontStyle", fontStyle,
                "fontWeight", fontWeight,
                "innerPaddingBottom", innerPaddingBottom,
                "innerPaddingLeft", innerPaddingLeft,
                "innerPaddingRight", innerPaddingRight,
                "innerPaddingTop", innerPaddingTop,
                "mobileStretchContent", mobileStretchContent,
                "backgroundColor", backgroundColor,
                "letterSpacing", letterSpacing,
                "lineHeight", lineHeight,
                "textAlign", textAlign,
                "textDecoration", textDecoration,
                "textTableLayout", textTableLayout);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> blockBackgroundColor = JsonNullable.undefined();
 
        private JsonNullable<String> blockBorderColor = JsonNullable.undefined();
 
        private JsonNullable<? extends BlockBorderStyle> blockBorderStyle = JsonNullable.undefined();
 
        private JsonNullable<Long> blockBorderWidth = JsonNullable.undefined();
 
        private JsonNullable<Long> blockPaddingBottom = JsonNullable.undefined();
 
        private JsonNullable<Long> blockPaddingLeft = JsonNullable.undefined();
 
        private JsonNullable<Long> blockPaddingRight = JsonNullable.undefined();
 
        private JsonNullable<Long> blockPaddingTop = JsonNullable.undefined();
 
        private JsonNullable<String> color = JsonNullable.undefined();
 
        private JsonNullable<String> extraCssClass = JsonNullable.undefined();
 
        private JsonNullable<String> fontFamily = JsonNullable.undefined();
 
        private JsonNullable<Long> fontSize = JsonNullable.undefined();
 
        private JsonNullable<? extends FontStyle> fontStyle = JsonNullable.undefined();
 
        private JsonNullable<String> fontWeight = JsonNullable.undefined();
 
        private JsonNullable<Long> innerPaddingBottom = JsonNullable.undefined();
 
        private JsonNullable<Long> innerPaddingLeft = JsonNullable.undefined();
 
        private JsonNullable<Long> innerPaddingRight = JsonNullable.undefined();
 
        private JsonNullable<Long> innerPaddingTop = JsonNullable.undefined();
 
        private JsonNullable<Boolean> mobileStretchContent = JsonNullable.undefined();
 
        private JsonNullable<String> backgroundColor = JsonNullable.undefined();
 
        private JsonNullable<Long> letterSpacing = JsonNullable.undefined();
 
        private JsonNullable<Double> lineHeight = JsonNullable.undefined();
 
        private JsonNullable<? extends TextAlign> textAlign = JsonNullable.undefined();
 
        private JsonNullable<String> textDecoration = JsonNullable.undefined();
 
        private JsonNullable<? extends TextTableLayout> textTableLayout = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder blockBackgroundColor(String blockBackgroundColor) {
            Utils.checkNotNull(blockBackgroundColor, "blockBackgroundColor");
            this.blockBackgroundColor = JsonNullable.of(blockBackgroundColor);
            return this;
        }

        public Builder blockBackgroundColor(JsonNullable<String> blockBackgroundColor) {
            Utils.checkNotNull(blockBackgroundColor, "blockBackgroundColor");
            this.blockBackgroundColor = blockBackgroundColor;
            return this;
        }

        public Builder blockBorderColor(String blockBorderColor) {
            Utils.checkNotNull(blockBorderColor, "blockBorderColor");
            this.blockBorderColor = JsonNullable.of(blockBorderColor);
            return this;
        }

        public Builder blockBorderColor(JsonNullable<String> blockBorderColor) {
            Utils.checkNotNull(blockBorderColor, "blockBorderColor");
            this.blockBorderColor = blockBorderColor;
            return this;
        }

        /**
         * Border style.
         */
        public Builder blockBorderStyle(BlockBorderStyle blockBorderStyle) {
            Utils.checkNotNull(blockBorderStyle, "blockBorderStyle");
            this.blockBorderStyle = JsonNullable.of(blockBorderStyle);
            return this;
        }

        /**
         * Border style.
         */
        public Builder blockBorderStyle(JsonNullable<? extends BlockBorderStyle> blockBorderStyle) {
            Utils.checkNotNull(blockBorderStyle, "blockBorderStyle");
            this.blockBorderStyle = blockBorderStyle;
            return this;
        }

        public Builder blockBorderWidth(long blockBorderWidth) {
            Utils.checkNotNull(blockBorderWidth, "blockBorderWidth");
            this.blockBorderWidth = JsonNullable.of(blockBorderWidth);
            return this;
        }

        public Builder blockBorderWidth(JsonNullable<Long> blockBorderWidth) {
            Utils.checkNotNull(blockBorderWidth, "blockBorderWidth");
            this.blockBorderWidth = blockBorderWidth;
            return this;
        }

        public Builder blockPaddingBottom(long blockPaddingBottom) {
            Utils.checkNotNull(blockPaddingBottom, "blockPaddingBottom");
            this.blockPaddingBottom = JsonNullable.of(blockPaddingBottom);
            return this;
        }

        public Builder blockPaddingBottom(JsonNullable<Long> blockPaddingBottom) {
            Utils.checkNotNull(blockPaddingBottom, "blockPaddingBottom");
            this.blockPaddingBottom = blockPaddingBottom;
            return this;
        }

        public Builder blockPaddingLeft(long blockPaddingLeft) {
            Utils.checkNotNull(blockPaddingLeft, "blockPaddingLeft");
            this.blockPaddingLeft = JsonNullable.of(blockPaddingLeft);
            return this;
        }

        public Builder blockPaddingLeft(JsonNullable<Long> blockPaddingLeft) {
            Utils.checkNotNull(blockPaddingLeft, "blockPaddingLeft");
            this.blockPaddingLeft = blockPaddingLeft;
            return this;
        }

        public Builder blockPaddingRight(long blockPaddingRight) {
            Utils.checkNotNull(blockPaddingRight, "blockPaddingRight");
            this.blockPaddingRight = JsonNullable.of(blockPaddingRight);
            return this;
        }

        public Builder blockPaddingRight(JsonNullable<Long> blockPaddingRight) {
            Utils.checkNotNull(blockPaddingRight, "blockPaddingRight");
            this.blockPaddingRight = blockPaddingRight;
            return this;
        }

        public Builder blockPaddingTop(long blockPaddingTop) {
            Utils.checkNotNull(blockPaddingTop, "blockPaddingTop");
            this.blockPaddingTop = JsonNullable.of(blockPaddingTop);
            return this;
        }

        public Builder blockPaddingTop(JsonNullable<Long> blockPaddingTop) {
            Utils.checkNotNull(blockPaddingTop, "blockPaddingTop");
            this.blockPaddingTop = blockPaddingTop;
            return this;
        }

        public Builder color(String color) {
            Utils.checkNotNull(color, "color");
            this.color = JsonNullable.of(color);
            return this;
        }

        public Builder color(JsonNullable<String> color) {
            Utils.checkNotNull(color, "color");
            this.color = color;
            return this;
        }

        public Builder extraCssClass(String extraCssClass) {
            Utils.checkNotNull(extraCssClass, "extraCssClass");
            this.extraCssClass = JsonNullable.of(extraCssClass);
            return this;
        }

        public Builder extraCssClass(JsonNullable<String> extraCssClass) {
            Utils.checkNotNull(extraCssClass, "extraCssClass");
            this.extraCssClass = extraCssClass;
            return this;
        }

        public Builder fontFamily(String fontFamily) {
            Utils.checkNotNull(fontFamily, "fontFamily");
            this.fontFamily = JsonNullable.of(fontFamily);
            return this;
        }

        public Builder fontFamily(JsonNullable<String> fontFamily) {
            Utils.checkNotNull(fontFamily, "fontFamily");
            this.fontFamily = fontFamily;
            return this;
        }

        public Builder fontSize(long fontSize) {
            Utils.checkNotNull(fontSize, "fontSize");
            this.fontSize = JsonNullable.of(fontSize);
            return this;
        }

        public Builder fontSize(JsonNullable<Long> fontSize) {
            Utils.checkNotNull(fontSize, "fontSize");
            this.fontSize = fontSize;
            return this;
        }

        /**
         * Font style.
         */
        public Builder fontStyle(FontStyle fontStyle) {
            Utils.checkNotNull(fontStyle, "fontStyle");
            this.fontStyle = JsonNullable.of(fontStyle);
            return this;
        }

        /**
         * Font style.
         */
        public Builder fontStyle(JsonNullable<? extends FontStyle> fontStyle) {
            Utils.checkNotNull(fontStyle, "fontStyle");
            this.fontStyle = fontStyle;
            return this;
        }

        public Builder fontWeight(String fontWeight) {
            Utils.checkNotNull(fontWeight, "fontWeight");
            this.fontWeight = JsonNullable.of(fontWeight);
            return this;
        }

        public Builder fontWeight(JsonNullable<String> fontWeight) {
            Utils.checkNotNull(fontWeight, "fontWeight");
            this.fontWeight = fontWeight;
            return this;
        }

        public Builder innerPaddingBottom(long innerPaddingBottom) {
            Utils.checkNotNull(innerPaddingBottom, "innerPaddingBottom");
            this.innerPaddingBottom = JsonNullable.of(innerPaddingBottom);
            return this;
        }

        public Builder innerPaddingBottom(JsonNullable<Long> innerPaddingBottom) {
            Utils.checkNotNull(innerPaddingBottom, "innerPaddingBottom");
            this.innerPaddingBottom = innerPaddingBottom;
            return this;
        }

        public Builder innerPaddingLeft(long innerPaddingLeft) {
            Utils.checkNotNull(innerPaddingLeft, "innerPaddingLeft");
            this.innerPaddingLeft = JsonNullable.of(innerPaddingLeft);
            return this;
        }

        public Builder innerPaddingLeft(JsonNullable<Long> innerPaddingLeft) {
            Utils.checkNotNull(innerPaddingLeft, "innerPaddingLeft");
            this.innerPaddingLeft = innerPaddingLeft;
            return this;
        }

        public Builder innerPaddingRight(long innerPaddingRight) {
            Utils.checkNotNull(innerPaddingRight, "innerPaddingRight");
            this.innerPaddingRight = JsonNullable.of(innerPaddingRight);
            return this;
        }

        public Builder innerPaddingRight(JsonNullable<Long> innerPaddingRight) {
            Utils.checkNotNull(innerPaddingRight, "innerPaddingRight");
            this.innerPaddingRight = innerPaddingRight;
            return this;
        }

        public Builder innerPaddingTop(long innerPaddingTop) {
            Utils.checkNotNull(innerPaddingTop, "innerPaddingTop");
            this.innerPaddingTop = JsonNullable.of(innerPaddingTop);
            return this;
        }

        public Builder innerPaddingTop(JsonNullable<Long> innerPaddingTop) {
            Utils.checkNotNull(innerPaddingTop, "innerPaddingTop");
            this.innerPaddingTop = innerPaddingTop;
            return this;
        }

        public Builder mobileStretchContent(boolean mobileStretchContent) {
            Utils.checkNotNull(mobileStretchContent, "mobileStretchContent");
            this.mobileStretchContent = JsonNullable.of(mobileStretchContent);
            return this;
        }

        public Builder mobileStretchContent(JsonNullable<Boolean> mobileStretchContent) {
            Utils.checkNotNull(mobileStretchContent, "mobileStretchContent");
            this.mobileStretchContent = mobileStretchContent;
            return this;
        }

        public Builder backgroundColor(String backgroundColor) {
            Utils.checkNotNull(backgroundColor, "backgroundColor");
            this.backgroundColor = JsonNullable.of(backgroundColor);
            return this;
        }

        public Builder backgroundColor(JsonNullable<String> backgroundColor) {
            Utils.checkNotNull(backgroundColor, "backgroundColor");
            this.backgroundColor = backgroundColor;
            return this;
        }

        public Builder letterSpacing(long letterSpacing) {
            Utils.checkNotNull(letterSpacing, "letterSpacing");
            this.letterSpacing = JsonNullable.of(letterSpacing);
            return this;
        }

        public Builder letterSpacing(JsonNullable<Long> letterSpacing) {
            Utils.checkNotNull(letterSpacing, "letterSpacing");
            this.letterSpacing = letterSpacing;
            return this;
        }

        public Builder lineHeight(double lineHeight) {
            Utils.checkNotNull(lineHeight, "lineHeight");
            this.lineHeight = JsonNullable.of(lineHeight);
            return this;
        }

        public Builder lineHeight(JsonNullable<Double> lineHeight) {
            Utils.checkNotNull(lineHeight, "lineHeight");
            this.lineHeight = lineHeight;
            return this;
        }

        /**
         * Text Alignment.
         */
        public Builder textAlign(TextAlign textAlign) {
            Utils.checkNotNull(textAlign, "textAlign");
            this.textAlign = JsonNullable.of(textAlign);
            return this;
        }

        /**
         * Text Alignment.
         */
        public Builder textAlign(JsonNullable<? extends TextAlign> textAlign) {
            Utils.checkNotNull(textAlign, "textAlign");
            this.textAlign = textAlign;
            return this;
        }

        public Builder textDecoration(String textDecoration) {
            Utils.checkNotNull(textDecoration, "textDecoration");
            this.textDecoration = JsonNullable.of(textDecoration);
            return this;
        }

        public Builder textDecoration(JsonNullable<String> textDecoration) {
            Utils.checkNotNull(textDecoration, "textDecoration");
            this.textDecoration = textDecoration;
            return this;
        }

        /**
         * Text table layout.
         */
        public Builder textTableLayout(TextTableLayout textTableLayout) {
            Utils.checkNotNull(textTableLayout, "textTableLayout");
            this.textTableLayout = JsonNullable.of(textTableLayout);
            return this;
        }

        /**
         * Text table layout.
         */
        public Builder textTableLayout(JsonNullable<? extends TextTableLayout> textTableLayout) {
            Utils.checkNotNull(textTableLayout, "textTableLayout");
            this.textTableLayout = textTableLayout;
            return this;
        }
        
        public TextBlockStyles build() {
            return new TextBlockStyles(
                blockBackgroundColor,
                blockBorderColor,
                blockBorderStyle,
                blockBorderWidth,
                blockPaddingBottom,
                blockPaddingLeft,
                blockPaddingRight,
                blockPaddingTop,
                color,
                extraCssClass,
                fontFamily,
                fontSize,
                fontStyle,
                fontWeight,
                innerPaddingBottom,
                innerPaddingLeft,
                innerPaddingRight,
                innerPaddingTop,
                mobileStretchContent,
                backgroundColor,
                letterSpacing,
                lineHeight,
                textAlign,
                textDecoration,
                textTableLayout);
        }
    }
}

