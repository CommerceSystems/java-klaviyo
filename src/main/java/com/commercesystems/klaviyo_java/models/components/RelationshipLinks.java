/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class RelationshipLinks {

    @JsonProperty("self")
    private String self;

    @JsonProperty("related")
    private String related;

    @JsonCreator
    public RelationshipLinks(
            @JsonProperty("self") String self,
            @JsonProperty("related") String related) {
        Utils.checkNotNull(self, "self");
        Utils.checkNotNull(related, "related");
        this.self = self;
        this.related = related;
    }

    @JsonIgnore
    public String self() {
        return self;
    }

    @JsonIgnore
    public String related() {
        return related;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RelationshipLinks withSelf(String self) {
        Utils.checkNotNull(self, "self");
        this.self = self;
        return this;
    }

    public RelationshipLinks withRelated(String related) {
        Utils.checkNotNull(related, "related");
        this.related = related;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RelationshipLinks other = (RelationshipLinks) o;
        return 
            Objects.deepEquals(this.self, other.self) &&
            Objects.deepEquals(this.related, other.related);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            self,
            related);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RelationshipLinks.class,
                "self", self,
                "related", related);
    }
    
    public final static class Builder {
 
        private String self;
 
        private String related;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder self(String self) {
            Utils.checkNotNull(self, "self");
            this.self = self;
            return this;
        }

        public Builder related(String related) {
            Utils.checkNotNull(related, "related");
            this.related = related;
            return this;
        }
        
        public RelationshipLinks build() {
            return new RelationshipLinks(
                self,
                related);
        }
    }
}

