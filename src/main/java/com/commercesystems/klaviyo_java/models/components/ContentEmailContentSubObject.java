/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class ContentEmailContentSubObject {

    /**
     * The subject of the message
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private JsonNullable<String> subject;

    /**
     * Preview text associated with the message
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preview_text")
    private JsonNullable<String> previewText;

    /**
     * The email the message should be sent from
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from_email")
    private JsonNullable<String> fromEmail;

    /**
     * The label associated with the from_email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from_label")
    private JsonNullable<String> fromLabel;

    /**
     * Optional Reply-To email address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reply_to_email")
    private JsonNullable<String> replyToEmail;

    /**
     * Optional CC email address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cc_email")
    private JsonNullable<String> ccEmail;

    /**
     * Optional BCC email address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bcc_email")
    private JsonNullable<String> bccEmail;

    @JsonCreator
    public ContentEmailContentSubObject(
            @JsonProperty("subject") JsonNullable<String> subject,
            @JsonProperty("preview_text") JsonNullable<String> previewText,
            @JsonProperty("from_email") JsonNullable<String> fromEmail,
            @JsonProperty("from_label") JsonNullable<String> fromLabel,
            @JsonProperty("reply_to_email") JsonNullable<String> replyToEmail,
            @JsonProperty("cc_email") JsonNullable<String> ccEmail,
            @JsonProperty("bcc_email") JsonNullable<String> bccEmail) {
        Utils.checkNotNull(subject, "subject");
        Utils.checkNotNull(previewText, "previewText");
        Utils.checkNotNull(fromEmail, "fromEmail");
        Utils.checkNotNull(fromLabel, "fromLabel");
        Utils.checkNotNull(replyToEmail, "replyToEmail");
        Utils.checkNotNull(ccEmail, "ccEmail");
        Utils.checkNotNull(bccEmail, "bccEmail");
        this.subject = subject;
        this.previewText = previewText;
        this.fromEmail = fromEmail;
        this.fromLabel = fromLabel;
        this.replyToEmail = replyToEmail;
        this.ccEmail = ccEmail;
        this.bccEmail = bccEmail;
    }
    
    public ContentEmailContentSubObject() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The subject of the message
     */
    @JsonIgnore
    public JsonNullable<String> subject() {
        return subject;
    }

    /**
     * Preview text associated with the message
     */
    @JsonIgnore
    public JsonNullable<String> previewText() {
        return previewText;
    }

    /**
     * The email the message should be sent from
     */
    @JsonIgnore
    public JsonNullable<String> fromEmail() {
        return fromEmail;
    }

    /**
     * The label associated with the from_email
     */
    @JsonIgnore
    public JsonNullable<String> fromLabel() {
        return fromLabel;
    }

    /**
     * Optional Reply-To email address
     */
    @JsonIgnore
    public JsonNullable<String> replyToEmail() {
        return replyToEmail;
    }

    /**
     * Optional CC email address
     */
    @JsonIgnore
    public JsonNullable<String> ccEmail() {
        return ccEmail;
    }

    /**
     * Optional BCC email address
     */
    @JsonIgnore
    public JsonNullable<String> bccEmail() {
        return bccEmail;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The subject of the message
     */
    public ContentEmailContentSubObject withSubject(String subject) {
        Utils.checkNotNull(subject, "subject");
        this.subject = JsonNullable.of(subject);
        return this;
    }

    /**
     * The subject of the message
     */
    public ContentEmailContentSubObject withSubject(JsonNullable<String> subject) {
        Utils.checkNotNull(subject, "subject");
        this.subject = subject;
        return this;
    }

    /**
     * Preview text associated with the message
     */
    public ContentEmailContentSubObject withPreviewText(String previewText) {
        Utils.checkNotNull(previewText, "previewText");
        this.previewText = JsonNullable.of(previewText);
        return this;
    }

    /**
     * Preview text associated with the message
     */
    public ContentEmailContentSubObject withPreviewText(JsonNullable<String> previewText) {
        Utils.checkNotNull(previewText, "previewText");
        this.previewText = previewText;
        return this;
    }

    /**
     * The email the message should be sent from
     */
    public ContentEmailContentSubObject withFromEmail(String fromEmail) {
        Utils.checkNotNull(fromEmail, "fromEmail");
        this.fromEmail = JsonNullable.of(fromEmail);
        return this;
    }

    /**
     * The email the message should be sent from
     */
    public ContentEmailContentSubObject withFromEmail(JsonNullable<String> fromEmail) {
        Utils.checkNotNull(fromEmail, "fromEmail");
        this.fromEmail = fromEmail;
        return this;
    }

    /**
     * The label associated with the from_email
     */
    public ContentEmailContentSubObject withFromLabel(String fromLabel) {
        Utils.checkNotNull(fromLabel, "fromLabel");
        this.fromLabel = JsonNullable.of(fromLabel);
        return this;
    }

    /**
     * The label associated with the from_email
     */
    public ContentEmailContentSubObject withFromLabel(JsonNullable<String> fromLabel) {
        Utils.checkNotNull(fromLabel, "fromLabel");
        this.fromLabel = fromLabel;
        return this;
    }

    /**
     * Optional Reply-To email address
     */
    public ContentEmailContentSubObject withReplyToEmail(String replyToEmail) {
        Utils.checkNotNull(replyToEmail, "replyToEmail");
        this.replyToEmail = JsonNullable.of(replyToEmail);
        return this;
    }

    /**
     * Optional Reply-To email address
     */
    public ContentEmailContentSubObject withReplyToEmail(JsonNullable<String> replyToEmail) {
        Utils.checkNotNull(replyToEmail, "replyToEmail");
        this.replyToEmail = replyToEmail;
        return this;
    }

    /**
     * Optional CC email address
     */
    public ContentEmailContentSubObject withCcEmail(String ccEmail) {
        Utils.checkNotNull(ccEmail, "ccEmail");
        this.ccEmail = JsonNullable.of(ccEmail);
        return this;
    }

    /**
     * Optional CC email address
     */
    public ContentEmailContentSubObject withCcEmail(JsonNullable<String> ccEmail) {
        Utils.checkNotNull(ccEmail, "ccEmail");
        this.ccEmail = ccEmail;
        return this;
    }

    /**
     * Optional BCC email address
     */
    public ContentEmailContentSubObject withBccEmail(String bccEmail) {
        Utils.checkNotNull(bccEmail, "bccEmail");
        this.bccEmail = JsonNullable.of(bccEmail);
        return this;
    }

    /**
     * Optional BCC email address
     */
    public ContentEmailContentSubObject withBccEmail(JsonNullable<String> bccEmail) {
        Utils.checkNotNull(bccEmail, "bccEmail");
        this.bccEmail = bccEmail;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContentEmailContentSubObject other = (ContentEmailContentSubObject) o;
        return 
            Objects.deepEquals(this.subject, other.subject) &&
            Objects.deepEquals(this.previewText, other.previewText) &&
            Objects.deepEquals(this.fromEmail, other.fromEmail) &&
            Objects.deepEquals(this.fromLabel, other.fromLabel) &&
            Objects.deepEquals(this.replyToEmail, other.replyToEmail) &&
            Objects.deepEquals(this.ccEmail, other.ccEmail) &&
            Objects.deepEquals(this.bccEmail, other.bccEmail);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            subject,
            previewText,
            fromEmail,
            fromLabel,
            replyToEmail,
            ccEmail,
            bccEmail);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContentEmailContentSubObject.class,
                "subject", subject,
                "previewText", previewText,
                "fromEmail", fromEmail,
                "fromLabel", fromLabel,
                "replyToEmail", replyToEmail,
                "ccEmail", ccEmail,
                "bccEmail", bccEmail);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> subject = JsonNullable.undefined();
 
        private JsonNullable<String> previewText = JsonNullable.undefined();
 
        private JsonNullable<String> fromEmail = JsonNullable.undefined();
 
        private JsonNullable<String> fromLabel = JsonNullable.undefined();
 
        private JsonNullable<String> replyToEmail = JsonNullable.undefined();
 
        private JsonNullable<String> ccEmail = JsonNullable.undefined();
 
        private JsonNullable<String> bccEmail = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The subject of the message
         */
        public Builder subject(String subject) {
            Utils.checkNotNull(subject, "subject");
            this.subject = JsonNullable.of(subject);
            return this;
        }

        /**
         * The subject of the message
         */
        public Builder subject(JsonNullable<String> subject) {
            Utils.checkNotNull(subject, "subject");
            this.subject = subject;
            return this;
        }

        /**
         * Preview text associated with the message
         */
        public Builder previewText(String previewText) {
            Utils.checkNotNull(previewText, "previewText");
            this.previewText = JsonNullable.of(previewText);
            return this;
        }

        /**
         * Preview text associated with the message
         */
        public Builder previewText(JsonNullable<String> previewText) {
            Utils.checkNotNull(previewText, "previewText");
            this.previewText = previewText;
            return this;
        }

        /**
         * The email the message should be sent from
         */
        public Builder fromEmail(String fromEmail) {
            Utils.checkNotNull(fromEmail, "fromEmail");
            this.fromEmail = JsonNullable.of(fromEmail);
            return this;
        }

        /**
         * The email the message should be sent from
         */
        public Builder fromEmail(JsonNullable<String> fromEmail) {
            Utils.checkNotNull(fromEmail, "fromEmail");
            this.fromEmail = fromEmail;
            return this;
        }

        /**
         * The label associated with the from_email
         */
        public Builder fromLabel(String fromLabel) {
            Utils.checkNotNull(fromLabel, "fromLabel");
            this.fromLabel = JsonNullable.of(fromLabel);
            return this;
        }

        /**
         * The label associated with the from_email
         */
        public Builder fromLabel(JsonNullable<String> fromLabel) {
            Utils.checkNotNull(fromLabel, "fromLabel");
            this.fromLabel = fromLabel;
            return this;
        }

        /**
         * Optional Reply-To email address
         */
        public Builder replyToEmail(String replyToEmail) {
            Utils.checkNotNull(replyToEmail, "replyToEmail");
            this.replyToEmail = JsonNullable.of(replyToEmail);
            return this;
        }

        /**
         * Optional Reply-To email address
         */
        public Builder replyToEmail(JsonNullable<String> replyToEmail) {
            Utils.checkNotNull(replyToEmail, "replyToEmail");
            this.replyToEmail = replyToEmail;
            return this;
        }

        /**
         * Optional CC email address
         */
        public Builder ccEmail(String ccEmail) {
            Utils.checkNotNull(ccEmail, "ccEmail");
            this.ccEmail = JsonNullable.of(ccEmail);
            return this;
        }

        /**
         * Optional CC email address
         */
        public Builder ccEmail(JsonNullable<String> ccEmail) {
            Utils.checkNotNull(ccEmail, "ccEmail");
            this.ccEmail = ccEmail;
            return this;
        }

        /**
         * Optional BCC email address
         */
        public Builder bccEmail(String bccEmail) {
            Utils.checkNotNull(bccEmail, "bccEmail");
            this.bccEmail = JsonNullable.of(bccEmail);
            return this;
        }

        /**
         * Optional BCC email address
         */
        public Builder bccEmail(JsonNullable<String> bccEmail) {
            Utils.checkNotNull(bccEmail, "bccEmail");
            this.bccEmail = bccEmail;
            return this;
        }
        
        public ContentEmailContentSubObject build() {
            return new ContentEmailContentSubObject(
                subject,
                previewText,
                fromEmail,
                fromLabel,
                replyToEmail,
                ccEmail,
                bccEmail);
        }
    }
}

