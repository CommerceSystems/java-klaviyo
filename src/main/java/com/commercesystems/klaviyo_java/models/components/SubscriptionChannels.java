/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class SubscriptionChannels {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<? extends EmailSubscriptionParameters> email;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sms")
    private Optional<? extends SMSSubscriptionParameters> sms;

    @JsonCreator
    public SubscriptionChannels(
            @JsonProperty("email") Optional<? extends EmailSubscriptionParameters> email,
            @JsonProperty("sms") Optional<? extends SMSSubscriptionParameters> sms) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(sms, "sms");
        this.email = email;
        this.sms = sms;
    }
    
    public SubscriptionChannels() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EmailSubscriptionParameters> email() {
        return (Optional<EmailSubscriptionParameters>) email;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SMSSubscriptionParameters> sms() {
        return (Optional<SMSSubscriptionParameters>) sms;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SubscriptionChannels withEmail(EmailSubscriptionParameters email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    public SubscriptionChannels withEmail(Optional<? extends EmailSubscriptionParameters> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public SubscriptionChannels withSms(SMSSubscriptionParameters sms) {
        Utils.checkNotNull(sms, "sms");
        this.sms = Optional.ofNullable(sms);
        return this;
    }

    public SubscriptionChannels withSms(Optional<? extends SMSSubscriptionParameters> sms) {
        Utils.checkNotNull(sms, "sms");
        this.sms = sms;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubscriptionChannels other = (SubscriptionChannels) o;
        return 
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.sms, other.sms);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            email,
            sms);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SubscriptionChannels.class,
                "email", email,
                "sms", sms);
    }
    
    public final static class Builder {
 
        private Optional<? extends EmailSubscriptionParameters> email = Optional.empty();
 
        private Optional<? extends SMSSubscriptionParameters> sms = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder email(EmailSubscriptionParameters email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        public Builder email(Optional<? extends EmailSubscriptionParameters> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder sms(SMSSubscriptionParameters sms) {
            Utils.checkNotNull(sms, "sms");
            this.sms = Optional.ofNullable(sms);
            return this;
        }

        public Builder sms(Optional<? extends SMSSubscriptionParameters> sms) {
            Utils.checkNotNull(sms, "sms");
            this.sms = sms;
            return this;
        }
        
        public SubscriptionChannels build() {
            return new SubscriptionChannels(
                email,
                sms);
        }
    }
}

