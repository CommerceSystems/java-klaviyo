/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class DeleteTagGroupResponseAttributes {

    /**
     * The Tag Group name
     */
    @JsonProperty("name")
    private String name;

    /**
     * If a tag group is non-exclusive, any given related resource (campaign, flow, etc.) can be linked to multiple tags from that tag group. If a tag group is exclusive, any given related resource can only be linked to one tag from that tag group.
     */
    @JsonProperty("exclusive")
    private boolean exclusive;

    /**
     * Every company automatically has one Default Tag Group. The Default Tag Group cannot be deleted, and no other Default Tag Groups can be created. This value is true for the Default Tag Group and false for all other Tag Groups.
     */
    @JsonProperty("default")
    private boolean default_;

    @JsonCreator
    public DeleteTagGroupResponseAttributes(
            @JsonProperty("name") String name,
            @JsonProperty("exclusive") boolean exclusive,
            @JsonProperty("default") boolean default_) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(exclusive, "exclusive");
        Utils.checkNotNull(default_, "default_");
        this.name = name;
        this.exclusive = exclusive;
        this.default_ = default_;
    }

    /**
     * The Tag Group name
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * If a tag group is non-exclusive, any given related resource (campaign, flow, etc.) can be linked to multiple tags from that tag group. If a tag group is exclusive, any given related resource can only be linked to one tag from that tag group.
     */
    @JsonIgnore
    public boolean exclusive() {
        return exclusive;
    }

    /**
     * Every company automatically has one Default Tag Group. The Default Tag Group cannot be deleted, and no other Default Tag Groups can be created. This value is true for the Default Tag Group and false for all other Tag Groups.
     */
    @JsonIgnore
    public boolean default_() {
        return default_;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The Tag Group name
     */
    public DeleteTagGroupResponseAttributes withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * If a tag group is non-exclusive, any given related resource (campaign, flow, etc.) can be linked to multiple tags from that tag group. If a tag group is exclusive, any given related resource can only be linked to one tag from that tag group.
     */
    public DeleteTagGroupResponseAttributes withExclusive(boolean exclusive) {
        Utils.checkNotNull(exclusive, "exclusive");
        this.exclusive = exclusive;
        return this;
    }

    /**
     * Every company automatically has one Default Tag Group. The Default Tag Group cannot be deleted, and no other Default Tag Groups can be created. This value is true for the Default Tag Group and false for all other Tag Groups.
     */
    public DeleteTagGroupResponseAttributes withDefault(boolean default_) {
        Utils.checkNotNull(default_, "default_");
        this.default_ = default_;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeleteTagGroupResponseAttributes other = (DeleteTagGroupResponseAttributes) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.exclusive, other.exclusive) &&
            Objects.deepEquals(this.default_, other.default_);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            exclusive,
            default_);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeleteTagGroupResponseAttributes.class,
                "name", name,
                "exclusive", exclusive,
                "default_", default_);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Boolean exclusive;
 
        private Boolean default_;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The Tag Group name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * If a tag group is non-exclusive, any given related resource (campaign, flow, etc.) can be linked to multiple tags from that tag group. If a tag group is exclusive, any given related resource can only be linked to one tag from that tag group.
         */
        public Builder exclusive(boolean exclusive) {
            Utils.checkNotNull(exclusive, "exclusive");
            this.exclusive = exclusive;
            return this;
        }

        /**
         * Every company automatically has one Default Tag Group. The Default Tag Group cannot be deleted, and no other Default Tag Groups can be created. This value is true for the Default Tag Group and false for all other Tag Groups.
         */
        public Builder default_(boolean default_) {
            Utils.checkNotNull(default_, "default_");
            this.default_ = default_;
            return this;
        }
        
        public DeleteTagGroupResponseAttributes build() {
            return new DeleteTagGroupResponseAttributes(
                name,
                exclusive,
                default_);
        }
    }
}

