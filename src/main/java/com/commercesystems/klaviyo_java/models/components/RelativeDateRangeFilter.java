/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class RelativeDateRangeFilter {

    @JsonProperty("type")
    private DateEnum type;

    /**
     * Operators for relative date range filters.
     * 
     * e.g. "between 10 and 20 days ago"
     */
    @JsonProperty("operator")
    private RelativeDateRangeFilterOperator operator;

    @JsonProperty("start")
    private long start;

    @JsonProperty("end")
    private long end;

    /**
     * Units for relative date filters.
     */
    @JsonProperty("unit")
    private RelativeDateRangeFilterUnit unit;

    @JsonCreator
    public RelativeDateRangeFilter(
            @JsonProperty("type") DateEnum type,
            @JsonProperty("operator") RelativeDateRangeFilterOperator operator,
            @JsonProperty("start") long start,
            @JsonProperty("end") long end,
            @JsonProperty("unit") RelativeDateRangeFilterUnit unit) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(operator, "operator");
        Utils.checkNotNull(start, "start");
        Utils.checkNotNull(end, "end");
        Utils.checkNotNull(unit, "unit");
        this.type = type;
        this.operator = operator;
        this.start = start;
        this.end = end;
        this.unit = unit;
    }

    @JsonIgnore
    public DateEnum type() {
        return type;
    }

    /**
     * Operators for relative date range filters.
     * 
     * e.g. "between 10 and 20 days ago"
     */
    @JsonIgnore
    public RelativeDateRangeFilterOperator operator() {
        return operator;
    }

    @JsonIgnore
    public long start() {
        return start;
    }

    @JsonIgnore
    public long end() {
        return end;
    }

    /**
     * Units for relative date filters.
     */
    @JsonIgnore
    public RelativeDateRangeFilterUnit unit() {
        return unit;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RelativeDateRangeFilter withType(DateEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Operators for relative date range filters.
     * 
     * e.g. "between 10 and 20 days ago"
     */
    public RelativeDateRangeFilter withOperator(RelativeDateRangeFilterOperator operator) {
        Utils.checkNotNull(operator, "operator");
        this.operator = operator;
        return this;
    }

    public RelativeDateRangeFilter withStart(long start) {
        Utils.checkNotNull(start, "start");
        this.start = start;
        return this;
    }

    public RelativeDateRangeFilter withEnd(long end) {
        Utils.checkNotNull(end, "end");
        this.end = end;
        return this;
    }

    /**
     * Units for relative date filters.
     */
    public RelativeDateRangeFilter withUnit(RelativeDateRangeFilterUnit unit) {
        Utils.checkNotNull(unit, "unit");
        this.unit = unit;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RelativeDateRangeFilter other = (RelativeDateRangeFilter) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.operator, other.operator) &&
            Objects.deepEquals(this.start, other.start) &&
            Objects.deepEquals(this.end, other.end) &&
            Objects.deepEquals(this.unit, other.unit);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            operator,
            start,
            end,
            unit);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RelativeDateRangeFilter.class,
                "type", type,
                "operator", operator,
                "start", start,
                "end", end,
                "unit", unit);
    }
    
    public final static class Builder {
 
        private DateEnum type;
 
        private RelativeDateRangeFilterOperator operator;
 
        private Long start;
 
        private Long end;
 
        private RelativeDateRangeFilterUnit unit;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder type(DateEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Operators for relative date range filters.
         * 
         * e.g. "between 10 and 20 days ago"
         */
        public Builder operator(RelativeDateRangeFilterOperator operator) {
            Utils.checkNotNull(operator, "operator");
            this.operator = operator;
            return this;
        }

        public Builder start(long start) {
            Utils.checkNotNull(start, "start");
            this.start = start;
            return this;
        }

        public Builder end(long end) {
            Utils.checkNotNull(end, "end");
            this.end = end;
            return this;
        }

        /**
         * Units for relative date filters.
         */
        public Builder unit(RelativeDateRangeFilterUnit unit) {
            Utils.checkNotNull(unit, "unit");
            this.unit = unit;
            return this;
        }
        
        public RelativeDateRangeFilter build() {
            return new RelativeDateRangeFilter(
                type,
                operator,
                start,
                end,
                unit);
        }
    }
}

