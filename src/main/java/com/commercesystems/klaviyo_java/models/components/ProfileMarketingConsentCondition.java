/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class ProfileMarketingConsentCondition {

    @JsonProperty("type")
    private ProfileMarketingConsentEnum type;

    @JsonProperty("consent")
    private Consent consent;

    @JsonCreator
    public ProfileMarketingConsentCondition(
            @JsonProperty("type") ProfileMarketingConsentEnum type,
            @JsonProperty("consent") Consent consent) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(consent, "consent");
        this.type = type;
        this.consent = consent;
    }

    @JsonIgnore
    public ProfileMarketingConsentEnum type() {
        return type;
    }

    @JsonIgnore
    public Consent consent() {
        return consent;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ProfileMarketingConsentCondition withType(ProfileMarketingConsentEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public ProfileMarketingConsentCondition withConsent(Consent consent) {
        Utils.checkNotNull(consent, "consent");
        this.consent = consent;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProfileMarketingConsentCondition other = (ProfileMarketingConsentCondition) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.consent, other.consent);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            consent);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProfileMarketingConsentCondition.class,
                "type", type,
                "consent", consent);
    }
    
    public final static class Builder {
 
        private ProfileMarketingConsentEnum type;
 
        private Consent consent;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder type(ProfileMarketingConsentEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder consent(Consent consent) {
            Utils.checkNotNull(consent, "consent");
            this.consent = consent;
            return this;
        }
        
        public ProfileMarketingConsentCondition build() {
            return new ProfileMarketingConsentCondition(
                type,
                consent);
        }
    }
}

