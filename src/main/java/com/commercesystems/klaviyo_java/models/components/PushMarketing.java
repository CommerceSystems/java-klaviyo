/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class PushMarketing {

    /**
     * Whether or not this profile is subscribed to receive mobile push.
     */
    @JsonProperty("can_receive_push_marketing")
    private boolean canReceivePushMarketing;

    /**
     * The consent status for mobile push marketing.
     */
    @JsonProperty("consent")
    private String consent;

    /**
     * The timestamp when the consent was last changed, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consent_timestamp")
    private JsonNullable<OffsetDateTime> consentTimestamp;

    @JsonCreator
    public PushMarketing(
            @JsonProperty("can_receive_push_marketing") boolean canReceivePushMarketing,
            @JsonProperty("consent") String consent,
            @JsonProperty("consent_timestamp") JsonNullable<OffsetDateTime> consentTimestamp) {
        Utils.checkNotNull(canReceivePushMarketing, "canReceivePushMarketing");
        Utils.checkNotNull(consent, "consent");
        Utils.checkNotNull(consentTimestamp, "consentTimestamp");
        this.canReceivePushMarketing = canReceivePushMarketing;
        this.consent = consent;
        this.consentTimestamp = consentTimestamp;
    }
    
    public PushMarketing(
            boolean canReceivePushMarketing,
            String consent) {
        this(canReceivePushMarketing, consent, JsonNullable.undefined());
    }

    /**
     * Whether or not this profile is subscribed to receive mobile push.
     */
    @JsonIgnore
    public boolean canReceivePushMarketing() {
        return canReceivePushMarketing;
    }

    /**
     * The consent status for mobile push marketing.
     */
    @JsonIgnore
    public String consent() {
        return consent;
    }

    /**
     * The timestamp when the consent was last changed, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> consentTimestamp() {
        return consentTimestamp;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Whether or not this profile is subscribed to receive mobile push.
     */
    public PushMarketing withCanReceivePushMarketing(boolean canReceivePushMarketing) {
        Utils.checkNotNull(canReceivePushMarketing, "canReceivePushMarketing");
        this.canReceivePushMarketing = canReceivePushMarketing;
        return this;
    }

    /**
     * The consent status for mobile push marketing.
     */
    public PushMarketing withConsent(String consent) {
        Utils.checkNotNull(consent, "consent");
        this.consent = consent;
        return this;
    }

    /**
     * The timestamp when the consent was last changed, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
     */
    public PushMarketing withConsentTimestamp(OffsetDateTime consentTimestamp) {
        Utils.checkNotNull(consentTimestamp, "consentTimestamp");
        this.consentTimestamp = JsonNullable.of(consentTimestamp);
        return this;
    }

    /**
     * The timestamp when the consent was last changed, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
     */
    public PushMarketing withConsentTimestamp(JsonNullable<OffsetDateTime> consentTimestamp) {
        Utils.checkNotNull(consentTimestamp, "consentTimestamp");
        this.consentTimestamp = consentTimestamp;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PushMarketing other = (PushMarketing) o;
        return 
            Objects.deepEquals(this.canReceivePushMarketing, other.canReceivePushMarketing) &&
            Objects.deepEquals(this.consent, other.consent) &&
            Objects.deepEquals(this.consentTimestamp, other.consentTimestamp);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            canReceivePushMarketing,
            consent,
            consentTimestamp);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PushMarketing.class,
                "canReceivePushMarketing", canReceivePushMarketing,
                "consent", consent,
                "consentTimestamp", consentTimestamp);
    }
    
    public final static class Builder {
 
        private Boolean canReceivePushMarketing;
 
        private String consent;
 
        private JsonNullable<OffsetDateTime> consentTimestamp = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether or not this profile is subscribed to receive mobile push.
         */
        public Builder canReceivePushMarketing(boolean canReceivePushMarketing) {
            Utils.checkNotNull(canReceivePushMarketing, "canReceivePushMarketing");
            this.canReceivePushMarketing = canReceivePushMarketing;
            return this;
        }

        /**
         * The consent status for mobile push marketing.
         */
        public Builder consent(String consent) {
            Utils.checkNotNull(consent, "consent");
            this.consent = consent;
            return this;
        }

        /**
         * The timestamp when the consent was last changed, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
         */
        public Builder consentTimestamp(OffsetDateTime consentTimestamp) {
            Utils.checkNotNull(consentTimestamp, "consentTimestamp");
            this.consentTimestamp = JsonNullable.of(consentTimestamp);
            return this;
        }

        /**
         * The timestamp when the consent was last changed, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
         */
        public Builder consentTimestamp(JsonNullable<OffsetDateTime> consentTimestamp) {
            Utils.checkNotNull(consentTimestamp, "consentTimestamp");
            this.consentTimestamp = consentTimestamp;
            return this;
        }
        
        public PushMarketing build() {
            return new PushMarketing(
                canReceivePushMarketing,
                consent,
                consentTimestamp);
        }
    }
}

