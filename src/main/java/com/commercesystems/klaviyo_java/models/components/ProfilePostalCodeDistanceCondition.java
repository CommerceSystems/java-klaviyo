/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class ProfilePostalCodeDistanceCondition {

    @JsonProperty("type")
    private ProfilePostalCodeDistanceEnum type;

    @JsonProperty("country_code")
    private String countryCode;

    @JsonProperty("postal_code")
    private String postalCode;

    /**
     * Units for profile postal code distance conditions.
     */
    @JsonProperty("unit")
    private ProfilePostalCodeDistanceConditionUnit unit;

    @JsonProperty("filter")
    private UnionPositiveNumericFilter filter;

    @JsonCreator
    public ProfilePostalCodeDistanceCondition(
            @JsonProperty("type") ProfilePostalCodeDistanceEnum type,
            @JsonProperty("country_code") String countryCode,
            @JsonProperty("postal_code") String postalCode,
            @JsonProperty("unit") ProfilePostalCodeDistanceConditionUnit unit,
            @JsonProperty("filter") UnionPositiveNumericFilter filter) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(unit, "unit");
        Utils.checkNotNull(filter, "filter");
        this.type = type;
        this.countryCode = countryCode;
        this.postalCode = postalCode;
        this.unit = unit;
        this.filter = filter;
    }

    @JsonIgnore
    public ProfilePostalCodeDistanceEnum type() {
        return type;
    }

    @JsonIgnore
    public String countryCode() {
        return countryCode;
    }

    @JsonIgnore
    public String postalCode() {
        return postalCode;
    }

    /**
     * Units for profile postal code distance conditions.
     */
    @JsonIgnore
    public ProfilePostalCodeDistanceConditionUnit unit() {
        return unit;
    }

    @JsonIgnore
    public UnionPositiveNumericFilter filter() {
        return filter;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ProfilePostalCodeDistanceCondition withType(ProfilePostalCodeDistanceEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public ProfilePostalCodeDistanceCondition withCountryCode(String countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    public ProfilePostalCodeDistanceCondition withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    /**
     * Units for profile postal code distance conditions.
     */
    public ProfilePostalCodeDistanceCondition withUnit(ProfilePostalCodeDistanceConditionUnit unit) {
        Utils.checkNotNull(unit, "unit");
        this.unit = unit;
        return this;
    }

    public ProfilePostalCodeDistanceCondition withFilter(UnionPositiveNumericFilter filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = filter;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProfilePostalCodeDistanceCondition other = (ProfilePostalCodeDistanceCondition) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.countryCode, other.countryCode) &&
            Objects.deepEquals(this.postalCode, other.postalCode) &&
            Objects.deepEquals(this.unit, other.unit) &&
            Objects.deepEquals(this.filter, other.filter);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            countryCode,
            postalCode,
            unit,
            filter);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProfilePostalCodeDistanceCondition.class,
                "type", type,
                "countryCode", countryCode,
                "postalCode", postalCode,
                "unit", unit,
                "filter", filter);
    }
    
    public final static class Builder {
 
        private ProfilePostalCodeDistanceEnum type;
 
        private String countryCode;
 
        private String postalCode;
 
        private ProfilePostalCodeDistanceConditionUnit unit;
 
        private UnionPositiveNumericFilter filter;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder type(ProfilePostalCodeDistanceEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder countryCode(String countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }

        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }

        /**
         * Units for profile postal code distance conditions.
         */
        public Builder unit(ProfilePostalCodeDistanceConditionUnit unit) {
            Utils.checkNotNull(unit, "unit");
            this.unit = unit;
            return this;
        }

        public Builder filter(UnionPositiveNumericFilter filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = filter;
            return this;
        }
        
        public ProfilePostalCodeDistanceCondition build() {
            return new ProfilePostalCodeDistanceCondition(
                type,
                countryCode,
                postalCode,
                unit,
                filter);
        }
    }
}

