/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.operations;


import com.commercesystems.klaviyo_java.utils.LazySingletonValue;
import com.commercesystems.klaviyo_java.utils.SpeakeasyMetadata;
import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class GetVariantsForCatalogItemRequest {

    /**
     * The catalog item ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private Optional<String> id;

    /**
     * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#sparse-fieldsets
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=fields[catalog-variant]")
    private Optional<? extends List<GetVariantsForCatalogItemQueryParamFieldsCatalogVariant>> fieldsCatalogVariant;

    /**
     * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;`ids`: `any`&lt;br&gt;`item.id`: `equals`&lt;br&gt;`sku`: `equals`&lt;br&gt;`title`: `contains`&lt;br&gt;`published`: `equals`
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=filter")
    private Optional<String> filter;

    /**
     * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#pagination
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page[cursor]")
    private Optional<String> pageCursor;

    /**
     * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#sorting
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    private Optional<? extends GetVariantsForCatalogItemQueryParamSort> sort;

    /**
     * API endpoint revision (format: YYYY-MM-DD[.suffix])
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=revision")
    private String revision;

    @JsonCreator
    public GetVariantsForCatalogItemRequest(
            Optional<String> id,
            Optional<? extends List<GetVariantsForCatalogItemQueryParamFieldsCatalogVariant>> fieldsCatalogVariant,
            Optional<String> filter,
            Optional<String> pageCursor,
            Optional<? extends GetVariantsForCatalogItemQueryParamSort> sort,
            String revision) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(fieldsCatalogVariant, "fieldsCatalogVariant");
        Utils.checkNotNull(filter, "filter");
        Utils.checkNotNull(pageCursor, "pageCursor");
        Utils.checkNotNull(sort, "sort");
        Utils.checkNotNull(revision, "revision");
        this.id = id;
        this.fieldsCatalogVariant = fieldsCatalogVariant;
        this.filter = filter;
        this.pageCursor = pageCursor;
        this.sort = sort;
        this.revision = revision;
    }
    
    public GetVariantsForCatalogItemRequest(
            String revision) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), revision);
    }

    /**
     * The catalog item ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#sparse-fieldsets
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetVariantsForCatalogItemQueryParamFieldsCatalogVariant>> fieldsCatalogVariant() {
        return (Optional<List<GetVariantsForCatalogItemQueryParamFieldsCatalogVariant>>) fieldsCatalogVariant;
    }

    /**
     * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;`ids`: `any`&lt;br&gt;`item.id`: `equals`&lt;br&gt;`sku`: `equals`&lt;br&gt;`title`: `contains`&lt;br&gt;`published`: `equals`
     */
    @JsonIgnore
    public Optional<String> filter() {
        return filter;
    }

    /**
     * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#pagination
     */
    @JsonIgnore
    public Optional<String> pageCursor() {
        return pageCursor;
    }

    /**
     * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#sorting
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetVariantsForCatalogItemQueryParamSort> sort() {
        return (Optional<GetVariantsForCatalogItemQueryParamSort>) sort;
    }

    /**
     * API endpoint revision (format: YYYY-MM-DD[.suffix])
     */
    @JsonIgnore
    public String revision() {
        return revision;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The catalog item ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
     */
    public GetVariantsForCatalogItemRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The catalog item ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
     */
    public GetVariantsForCatalogItemRequest withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#sparse-fieldsets
     */
    public GetVariantsForCatalogItemRequest withFieldsCatalogVariant(List<GetVariantsForCatalogItemQueryParamFieldsCatalogVariant> fieldsCatalogVariant) {
        Utils.checkNotNull(fieldsCatalogVariant, "fieldsCatalogVariant");
        this.fieldsCatalogVariant = Optional.ofNullable(fieldsCatalogVariant);
        return this;
    }

    /**
     * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#sparse-fieldsets
     */
    public GetVariantsForCatalogItemRequest withFieldsCatalogVariant(Optional<? extends List<GetVariantsForCatalogItemQueryParamFieldsCatalogVariant>> fieldsCatalogVariant) {
        Utils.checkNotNull(fieldsCatalogVariant, "fieldsCatalogVariant");
        this.fieldsCatalogVariant = fieldsCatalogVariant;
        return this;
    }

    /**
     * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;`ids`: `any`&lt;br&gt;`item.id`: `equals`&lt;br&gt;`sku`: `equals`&lt;br&gt;`title`: `contains`&lt;br&gt;`published`: `equals`
     */
    public GetVariantsForCatalogItemRequest withFilter(String filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = Optional.ofNullable(filter);
        return this;
    }

    /**
     * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;`ids`: `any`&lt;br&gt;`item.id`: `equals`&lt;br&gt;`sku`: `equals`&lt;br&gt;`title`: `contains`&lt;br&gt;`published`: `equals`
     */
    public GetVariantsForCatalogItemRequest withFilter(Optional<String> filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = filter;
        return this;
    }

    /**
     * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#pagination
     */
    public GetVariantsForCatalogItemRequest withPageCursor(String pageCursor) {
        Utils.checkNotNull(pageCursor, "pageCursor");
        this.pageCursor = Optional.ofNullable(pageCursor);
        return this;
    }

    /**
     * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#pagination
     */
    public GetVariantsForCatalogItemRequest withPageCursor(Optional<String> pageCursor) {
        Utils.checkNotNull(pageCursor, "pageCursor");
        this.pageCursor = pageCursor;
        return this;
    }

    /**
     * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#sorting
     */
    public GetVariantsForCatalogItemRequest withSort(GetVariantsForCatalogItemQueryParamSort sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = Optional.ofNullable(sort);
        return this;
    }

    /**
     * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#sorting
     */
    public GetVariantsForCatalogItemRequest withSort(Optional<? extends GetVariantsForCatalogItemQueryParamSort> sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = sort;
        return this;
    }

    /**
     * API endpoint revision (format: YYYY-MM-DD[.suffix])
     */
    public GetVariantsForCatalogItemRequest withRevision(String revision) {
        Utils.checkNotNull(revision, "revision");
        this.revision = revision;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetVariantsForCatalogItemRequest other = (GetVariantsForCatalogItemRequest) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.fieldsCatalogVariant, other.fieldsCatalogVariant) &&
            Objects.deepEquals(this.filter, other.filter) &&
            Objects.deepEquals(this.pageCursor, other.pageCursor) &&
            Objects.deepEquals(this.sort, other.sort) &&
            Objects.deepEquals(this.revision, other.revision);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            fieldsCatalogVariant,
            filter,
            pageCursor,
            sort,
            revision);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetVariantsForCatalogItemRequest.class,
                "id", id,
                "fieldsCatalogVariant", fieldsCatalogVariant,
                "filter", filter,
                "pageCursor", pageCursor,
                "sort", sort,
                "revision", revision);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends List<GetVariantsForCatalogItemQueryParamFieldsCatalogVariant>> fieldsCatalogVariant = Optional.empty();
 
        private Optional<String> filter = Optional.empty();
 
        private Optional<String> pageCursor = Optional.empty();
 
        private Optional<? extends GetVariantsForCatalogItemQueryParamSort> sort = Optional.empty();
 
        private String revision;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The catalog item ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The catalog item ID is a compound ID (string), with format: `{integration}:::{catalog}:::{external_id}`. Currently, the only supported integration type is `$custom`, and the only supported catalog is `$default`.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#sparse-fieldsets
         */
        public Builder fieldsCatalogVariant(List<GetVariantsForCatalogItemQueryParamFieldsCatalogVariant> fieldsCatalogVariant) {
            Utils.checkNotNull(fieldsCatalogVariant, "fieldsCatalogVariant");
            this.fieldsCatalogVariant = Optional.ofNullable(fieldsCatalogVariant);
            return this;
        }

        /**
         * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#sparse-fieldsets
         */
        public Builder fieldsCatalogVariant(Optional<? extends List<GetVariantsForCatalogItemQueryParamFieldsCatalogVariant>> fieldsCatalogVariant) {
            Utils.checkNotNull(fieldsCatalogVariant, "fieldsCatalogVariant");
            this.fieldsCatalogVariant = fieldsCatalogVariant;
            return this;
        }

        /**
         * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;`ids`: `any`&lt;br&gt;`item.id`: `equals`&lt;br&gt;`sku`: `equals`&lt;br&gt;`title`: `contains`&lt;br&gt;`published`: `equals`
         */
        public Builder filter(String filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = Optional.ofNullable(filter);
            return this;
        }

        /**
         * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;`ids`: `any`&lt;br&gt;`item.id`: `equals`&lt;br&gt;`sku`: `equals`&lt;br&gt;`title`: `contains`&lt;br&gt;`published`: `equals`
         */
        public Builder filter(Optional<String> filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = filter;
            return this;
        }

        /**
         * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#pagination
         */
        public Builder pageCursor(String pageCursor) {
            Utils.checkNotNull(pageCursor, "pageCursor");
            this.pageCursor = Optional.ofNullable(pageCursor);
            return this;
        }

        /**
         * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#pagination
         */
        public Builder pageCursor(Optional<String> pageCursor) {
            Utils.checkNotNull(pageCursor, "pageCursor");
            this.pageCursor = pageCursor;
            return this;
        }

        /**
         * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#sorting
         */
        public Builder sort(GetVariantsForCatalogItemQueryParamSort sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = Optional.ofNullable(sort);
            return this;
        }

        /**
         * For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#sorting
         */
        public Builder sort(Optional<? extends GetVariantsForCatalogItemQueryParamSort> sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = sort;
            return this;
        }

        /**
         * API endpoint revision (format: YYYY-MM-DD[.suffix])
         */
        public Builder revision(String revision) {
            Utils.checkNotNull(revision, "revision");
            this.revision = revision;
            return this;
        }
        
        public GetVariantsForCatalogItemRequest build() {
            if (revision == null) {
                revision = _SINGLETON_VALUE_Revision.value();
            }            return new GetVariantsForCatalogItemRequest(
                id,
                fieldsCatalogVariant,
                filter,
                pageCursor,
                sort,
                revision);
        }

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Revision =
                new LazySingletonValue<>(
                        "revision",
                        "\"2024-10-15\"",
                        new TypeReference<String>() {});
    }
}

