/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.operations;

import com.commercesystems.klaviyo_java.utils.LazySingletonValue;
import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public class GetTrackingSettingsRequestBuilder {

    private Optional<? extends List<FieldsTrackingSetting>> fieldsTrackingSetting = Optional.empty();
    private Optional<String> pageCursor = Optional.empty();
    private Optional<Long> pageSize = Utils.readDefaultOrConstValue(
                            "pageSize",
                            "1",
                            new TypeReference<Optional<Long>>() {});
    private String revision;
    private final SDKMethodInterfaces.MethodCallGetTrackingSettings sdk;

    public GetTrackingSettingsRequestBuilder(SDKMethodInterfaces.MethodCallGetTrackingSettings sdk) {
        this.sdk = sdk;
    }
                
    public GetTrackingSettingsRequestBuilder fieldsTrackingSetting(List<FieldsTrackingSetting> fieldsTrackingSetting) {
        Utils.checkNotNull(fieldsTrackingSetting, "fieldsTrackingSetting");
        this.fieldsTrackingSetting = Optional.of(fieldsTrackingSetting);
        return this;
    }

    public GetTrackingSettingsRequestBuilder fieldsTrackingSetting(Optional<? extends List<FieldsTrackingSetting>> fieldsTrackingSetting) {
        Utils.checkNotNull(fieldsTrackingSetting, "fieldsTrackingSetting");
        this.fieldsTrackingSetting = fieldsTrackingSetting;
        return this;
    }
                
    public GetTrackingSettingsRequestBuilder pageCursor(String pageCursor) {
        Utils.checkNotNull(pageCursor, "pageCursor");
        this.pageCursor = Optional.of(pageCursor);
        return this;
    }

    public GetTrackingSettingsRequestBuilder pageCursor(Optional<String> pageCursor) {
        Utils.checkNotNull(pageCursor, "pageCursor");
        this.pageCursor = pageCursor;
        return this;
    }
                
    public GetTrackingSettingsRequestBuilder pageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.of(pageSize);
        return this;
    }

    public GetTrackingSettingsRequestBuilder pageSize(Optional<Long> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    public GetTrackingSettingsRequestBuilder revision(String revision) {
        Utils.checkNotNull(revision, "revision");
        this.revision = revision;
        return this;
    }

    public GetTrackingSettingsResponse call() throws Exception {
        if (pageSize == null) {
            pageSize = _SINGLETON_VALUE_PageSize.value();
        }
        if (revision == null) {
            revision = _SINGLETON_VALUE_Revision.value();
        }
        return sdk.getTrackingSettings(
            fieldsTrackingSetting,
            pageCursor,
            pageSize,
            revision);
    }

    private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_PageSize =
            new LazySingletonValue<>(
                    "pageSize",
                    "1",
                    new TypeReference<Optional<Long>>() {});

    private static final LazySingletonValue<String> _SINGLETON_VALUE_Revision =
            new LazySingletonValue<>(
                    "revision",
                    "\"2024-10-15\"",
                    new TypeReference<String>() {});
}
