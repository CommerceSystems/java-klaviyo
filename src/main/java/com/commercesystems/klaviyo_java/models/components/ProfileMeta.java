/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class ProfileMeta {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("patch_properties")
    private Optional<? extends ProfileMetaPatchProperties> patchProperties;

    @JsonCreator
    public ProfileMeta(
            @JsonProperty("patch_properties") Optional<? extends ProfileMetaPatchProperties> patchProperties) {
        Utils.checkNotNull(patchProperties, "patchProperties");
        this.patchProperties = patchProperties;
    }
    
    public ProfileMeta() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProfileMetaPatchProperties> patchProperties() {
        return (Optional<ProfileMetaPatchProperties>) patchProperties;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ProfileMeta withPatchProperties(ProfileMetaPatchProperties patchProperties) {
        Utils.checkNotNull(patchProperties, "patchProperties");
        this.patchProperties = Optional.ofNullable(patchProperties);
        return this;
    }

    public ProfileMeta withPatchProperties(Optional<? extends ProfileMetaPatchProperties> patchProperties) {
        Utils.checkNotNull(patchProperties, "patchProperties");
        this.patchProperties = patchProperties;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProfileMeta other = (ProfileMeta) o;
        return 
            Objects.deepEquals(this.patchProperties, other.patchProperties);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            patchProperties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProfileMeta.class,
                "patchProperties", patchProperties);
    }
    
    public final static class Builder {
 
        private Optional<? extends ProfileMetaPatchProperties> patchProperties = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder patchProperties(ProfileMetaPatchProperties patchProperties) {
            Utils.checkNotNull(patchProperties, "patchProperties");
            this.patchProperties = Optional.ofNullable(patchProperties);
            return this;
        }

        public Builder patchProperties(Optional<? extends ProfileMetaPatchProperties> patchProperties) {
            Utils.checkNotNull(patchProperties, "patchProperties");
            this.patchProperties = patchProperties;
            return this;
        }
        
        public ProfileMeta build() {
            return new ProfileMeta(
                patchProperties);
        }
    }
}

