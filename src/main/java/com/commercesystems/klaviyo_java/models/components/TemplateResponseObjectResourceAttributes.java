/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class TemplateResponseObjectResourceAttributes {

    /**
     * The name of the template
     */
    @JsonProperty("name")
    private String name;

    /**
     * `editor_type` has a fixed set of values:
     * * SYSTEM_DRAGGABLE: indicates a drag-and-drop editor template
     * * SIMPLE: A rich text editor template
     * * CODE: A custom HTML template
     * * USER_DRAGGABLE: A hybrid template, using custom HTML in the drag-and-drop editor
     */
    @JsonProperty("editor_type")
    private String editorType;

    /**
     * The rendered HTML of the template
     */
    @JsonProperty("html")
    private String html;

    /**
     * The template plain_text
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    private JsonNullable<String> text;

    /**
     * The date the template was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created")
    private JsonNullable<OffsetDateTime> created;

    /**
     * The date the template was updated in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated")
    private JsonNullable<OffsetDateTime> updated;

    @JsonCreator
    public TemplateResponseObjectResourceAttributes(
            @JsonProperty("name") String name,
            @JsonProperty("editor_type") String editorType,
            @JsonProperty("html") String html,
            @JsonProperty("text") JsonNullable<String> text,
            @JsonProperty("created") JsonNullable<OffsetDateTime> created,
            @JsonProperty("updated") JsonNullable<OffsetDateTime> updated) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(editorType, "editorType");
        Utils.checkNotNull(html, "html");
        Utils.checkNotNull(text, "text");
        Utils.checkNotNull(created, "created");
        Utils.checkNotNull(updated, "updated");
        this.name = name;
        this.editorType = editorType;
        this.html = html;
        this.text = text;
        this.created = created;
        this.updated = updated;
    }
    
    public TemplateResponseObjectResourceAttributes(
            String name,
            String editorType,
            String html) {
        this(name, editorType, html, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The name of the template
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * `editor_type` has a fixed set of values:
     * * SYSTEM_DRAGGABLE: indicates a drag-and-drop editor template
     * * SIMPLE: A rich text editor template
     * * CODE: A custom HTML template
     * * USER_DRAGGABLE: A hybrid template, using custom HTML in the drag-and-drop editor
     */
    @JsonIgnore
    public String editorType() {
        return editorType;
    }

    /**
     * The rendered HTML of the template
     */
    @JsonIgnore
    public String html() {
        return html;
    }

    /**
     * The template plain_text
     */
    @JsonIgnore
    public JsonNullable<String> text() {
        return text;
    }

    /**
     * The date the template was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> created() {
        return created;
    }

    /**
     * The date the template was updated in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> updated() {
        return updated;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the template
     */
    public TemplateResponseObjectResourceAttributes withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * `editor_type` has a fixed set of values:
     * * SYSTEM_DRAGGABLE: indicates a drag-and-drop editor template
     * * SIMPLE: A rich text editor template
     * * CODE: A custom HTML template
     * * USER_DRAGGABLE: A hybrid template, using custom HTML in the drag-and-drop editor
     */
    public TemplateResponseObjectResourceAttributes withEditorType(String editorType) {
        Utils.checkNotNull(editorType, "editorType");
        this.editorType = editorType;
        return this;
    }

    /**
     * The rendered HTML of the template
     */
    public TemplateResponseObjectResourceAttributes withHtml(String html) {
        Utils.checkNotNull(html, "html");
        this.html = html;
        return this;
    }

    /**
     * The template plain_text
     */
    public TemplateResponseObjectResourceAttributes withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = JsonNullable.of(text);
        return this;
    }

    /**
     * The template plain_text
     */
    public TemplateResponseObjectResourceAttributes withText(JsonNullable<String> text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    /**
     * The date the template was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
     */
    public TemplateResponseObjectResourceAttributes withCreated(OffsetDateTime created) {
        Utils.checkNotNull(created, "created");
        this.created = JsonNullable.of(created);
        return this;
    }

    /**
     * The date the template was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
     */
    public TemplateResponseObjectResourceAttributes withCreated(JsonNullable<OffsetDateTime> created) {
        Utils.checkNotNull(created, "created");
        this.created = created;
        return this;
    }

    /**
     * The date the template was updated in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
     */
    public TemplateResponseObjectResourceAttributes withUpdated(OffsetDateTime updated) {
        Utils.checkNotNull(updated, "updated");
        this.updated = JsonNullable.of(updated);
        return this;
    }

    /**
     * The date the template was updated in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
     */
    public TemplateResponseObjectResourceAttributes withUpdated(JsonNullable<OffsetDateTime> updated) {
        Utils.checkNotNull(updated, "updated");
        this.updated = updated;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TemplateResponseObjectResourceAttributes other = (TemplateResponseObjectResourceAttributes) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.editorType, other.editorType) &&
            Objects.deepEquals(this.html, other.html) &&
            Objects.deepEquals(this.text, other.text) &&
            Objects.deepEquals(this.created, other.created) &&
            Objects.deepEquals(this.updated, other.updated);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            editorType,
            html,
            text,
            created,
            updated);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TemplateResponseObjectResourceAttributes.class,
                "name", name,
                "editorType", editorType,
                "html", html,
                "text", text,
                "created", created,
                "updated", updated);
    }
    
    public final static class Builder {
 
        private String name;
 
        private String editorType;
 
        private String html;
 
        private JsonNullable<String> text = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> created = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> updated = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the template
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * `editor_type` has a fixed set of values:
         * * SYSTEM_DRAGGABLE: indicates a drag-and-drop editor template
         * * SIMPLE: A rich text editor template
         * * CODE: A custom HTML template
         * * USER_DRAGGABLE: A hybrid template, using custom HTML in the drag-and-drop editor
         */
        public Builder editorType(String editorType) {
            Utils.checkNotNull(editorType, "editorType");
            this.editorType = editorType;
            return this;
        }

        /**
         * The rendered HTML of the template
         */
        public Builder html(String html) {
            Utils.checkNotNull(html, "html");
            this.html = html;
            return this;
        }

        /**
         * The template plain_text
         */
        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = JsonNullable.of(text);
            return this;
        }

        /**
         * The template plain_text
         */
        public Builder text(JsonNullable<String> text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }

        /**
         * The date the template was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
         */
        public Builder created(OffsetDateTime created) {
            Utils.checkNotNull(created, "created");
            this.created = JsonNullable.of(created);
            return this;
        }

        /**
         * The date the template was created in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
         */
        public Builder created(JsonNullable<OffsetDateTime> created) {
            Utils.checkNotNull(created, "created");
            this.created = created;
            return this;
        }

        /**
         * The date the template was updated in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
         */
        public Builder updated(OffsetDateTime updated) {
            Utils.checkNotNull(updated, "updated");
            this.updated = JsonNullable.of(updated);
            return this;
        }

        /**
         * The date the template was updated in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm)
         */
        public Builder updated(JsonNullable<OffsetDateTime> updated) {
            Utils.checkNotNull(updated, "updated");
            this.updated = updated;
            return this;
        }
        
        public TemplateResponseObjectResourceAttributes build() {
            return new TemplateResponseObjectResourceAttributes(
                name,
                editorType,
                html,
                text,
                created,
                updated);
        }
    }
}

