/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;

import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * EventCreateQueryV2ResourceObjectProperties - Properties of this event. Any top level property (that are not objects) can be
 * used to create segments. The $extra property is a special property. This records any
 * non-segmentable values that can be referenced later. For example, HTML templates are
 * useful on a segment but are not used to create a segment. There are limits
 * placed onto the size of the data present. This must not exceed 5 MB. This must not
 * exceed 300 event properties. A single string cannot be larger than 100 KB. Each array
 * must not exceed 4000 elements. The properties cannot contain more than 10 nested levels.
 */
public class EventCreateQueryV2ResourceObjectProperties {
    // A map to store arbitrary event properties dynamically.
    private final Map<String, Object> properties = new HashMap<>();

    @JsonCreator
    public EventCreateQueryV2ResourceObjectProperties() {
    }

    @JsonAnySetter
    public void setProperty(String key, Object value) {
        this.properties.put(key, value);
    }

    @JsonAnyGetter
    public Map<String, Object> getProperties() {
        return properties;
    }

    public static Builder builder() {
        return new Builder();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof EventCreateQueryV2ResourceObjectProperties)) {
            return false;
        }
        EventCreateQueryV2ResourceObjectProperties that = (EventCreateQueryV2ResourceObjectProperties) o;
        return Objects.equals(properties, that.properties);
    }

    @Override
    public int hashCode() {
        return Objects.hash(properties);
    }

    @Override
    public String toString() {
        return Utils.toString(EventCreateQueryV2ResourceObjectProperties.class, this.properties);
    }

    public static class Builder {
        private final Map<String, Object> properties = new HashMap<>();

        private Builder() {
            // Use static builder() method
        }

        /**
         * Add a property to the event.
         *
         * @param key   The property key.
         * @param value The property value.
         * @return this builder
         */
        public Builder property(String key, Object value) {
            this.properties.put(key, value);
            return this;
        }

        public EventCreateQueryV2ResourceObjectProperties build() {
            EventCreateQueryV2ResourceObjectProperties props = new EventCreateQueryV2ResourceObjectProperties();
            for (Map.Entry<String, Object> entry : this.properties.entrySet()) {
                props.setProperty(entry.getKey(), entry.getValue());
            }
            return props;
        }
    }
}
