/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;


public class ThrottledScheduleOptions {

    /**
     * The time to send at
     */
    @JsonProperty("datetime")
    private OffsetDateTime datetime;

    /**
     * The percentage of recipients per hour to send to. Allowed values: [10, 11, 13, 14, 17, 20, 25, 33, 50]
     */
    @JsonProperty("throttle_percentage")
    private long throttlePercentage;

    @JsonCreator
    public ThrottledScheduleOptions(
            @JsonProperty("datetime") OffsetDateTime datetime,
            @JsonProperty("throttle_percentage") long throttlePercentage) {
        Utils.checkNotNull(datetime, "datetime");
        Utils.checkNotNull(throttlePercentage, "throttlePercentage");
        this.datetime = datetime;
        this.throttlePercentage = throttlePercentage;
    }

    /**
     * The time to send at
     */
    @JsonIgnore
    public OffsetDateTime datetime() {
        return datetime;
    }

    /**
     * The percentage of recipients per hour to send to. Allowed values: [10, 11, 13, 14, 17, 20, 25, 33, 50]
     */
    @JsonIgnore
    public long throttlePercentage() {
        return throttlePercentage;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The time to send at
     */
    public ThrottledScheduleOptions withDatetime(OffsetDateTime datetime) {
        Utils.checkNotNull(datetime, "datetime");
        this.datetime = datetime;
        return this;
    }

    /**
     * The percentage of recipients per hour to send to. Allowed values: [10, 11, 13, 14, 17, 20, 25, 33, 50]
     */
    public ThrottledScheduleOptions withThrottlePercentage(long throttlePercentage) {
        Utils.checkNotNull(throttlePercentage, "throttlePercentage");
        this.throttlePercentage = throttlePercentage;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ThrottledScheduleOptions other = (ThrottledScheduleOptions) o;
        return 
            Objects.deepEquals(this.datetime, other.datetime) &&
            Objects.deepEquals(this.throttlePercentage, other.throttlePercentage);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            datetime,
            throttlePercentage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ThrottledScheduleOptions.class,
                "datetime", datetime,
                "throttlePercentage", throttlePercentage);
    }
    
    public final static class Builder {
 
        private OffsetDateTime datetime;
 
        private Long throttlePercentage;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The time to send at
         */
        public Builder datetime(OffsetDateTime datetime) {
            Utils.checkNotNull(datetime, "datetime");
            this.datetime = datetime;
            return this;
        }

        /**
         * The percentage of recipients per hour to send to. Allowed values: [10, 11, 13, 14, 17, 20, 25, 33, 50]
         */
        public Builder throttlePercentage(long throttlePercentage) {
            Utils.checkNotNull(throttlePercentage, "throttlePercentage");
            this.throttlePercentage = throttlePercentage;
            return this;
        }
        
        public ThrottledScheduleOptions build() {
            return new ThrottledScheduleOptions(
                datetime,
                throttlePercentage);
        }
    }
}

