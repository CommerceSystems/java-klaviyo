/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;


public class GetFormResponseCompoundDocumentAttributes {

    /**
     * Name of the form.
     */
    @JsonProperty("name")
    private String name;

    /**
     * Status of the form. A live form with an in-progress draft is considered "live".
     */
    @JsonProperty("status")
    private GetFormResponseCompoundDocumentStatus status;

    /**
     * Whether the form has an A/B test configured, regardless of its status.
     */
    @JsonProperty("ab_test")
    private boolean abTest;

    /**
     * ISO8601 timestamp when the form was created.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * ISO8601 timestamp when the form was last updated.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    @JsonCreator
    public GetFormResponseCompoundDocumentAttributes(
            @JsonProperty("name") String name,
            @JsonProperty("status") GetFormResponseCompoundDocumentStatus status,
            @JsonProperty("ab_test") boolean abTest,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("updated_at") OffsetDateTime updatedAt) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(abTest, "abTest");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.name = name;
        this.status = status;
        this.abTest = abTest;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    /**
     * Name of the form.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Status of the form. A live form with an in-progress draft is considered "live".
     */
    @JsonIgnore
    public GetFormResponseCompoundDocumentStatus status() {
        return status;
    }

    /**
     * Whether the form has an A/B test configured, regardless of its status.
     */
    @JsonIgnore
    public boolean abTest() {
        return abTest;
    }

    /**
     * ISO8601 timestamp when the form was created.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * ISO8601 timestamp when the form was last updated.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Name of the form.
     */
    public GetFormResponseCompoundDocumentAttributes withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Status of the form. A live form with an in-progress draft is considered "live".
     */
    public GetFormResponseCompoundDocumentAttributes withStatus(GetFormResponseCompoundDocumentStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Whether the form has an A/B test configured, regardless of its status.
     */
    public GetFormResponseCompoundDocumentAttributes withAbTest(boolean abTest) {
        Utils.checkNotNull(abTest, "abTest");
        this.abTest = abTest;
        return this;
    }

    /**
     * ISO8601 timestamp when the form was created.
     */
    public GetFormResponseCompoundDocumentAttributes withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * ISO8601 timestamp when the form was last updated.
     */
    public GetFormResponseCompoundDocumentAttributes withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetFormResponseCompoundDocumentAttributes other = (GetFormResponseCompoundDocumentAttributes) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.abTest, other.abTest) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            status,
            abTest,
            createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetFormResponseCompoundDocumentAttributes.class,
                "name", name,
                "status", status,
                "abTest", abTest,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private String name;
 
        private GetFormResponseCompoundDocumentStatus status;
 
        private Boolean abTest;
 
        private OffsetDateTime createdAt;
 
        private OffsetDateTime updatedAt;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the form.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Status of the form. A live form with an in-progress draft is considered "live".
         */
        public Builder status(GetFormResponseCompoundDocumentStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Whether the form has an A/B test configured, regardless of its status.
         */
        public Builder abTest(boolean abTest) {
            Utils.checkNotNull(abTest, "abTest");
            this.abTest = abTest;
            return this;
        }

        /**
         * ISO8601 timestamp when the form was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * ISO8601 timestamp when the form was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public GetFormResponseCompoundDocumentAttributes build() {
            return new GetFormResponseCompoundDocumentAttributes(
                name,
                status,
                abTest,
                createdAt,
                updatedAt);
        }
    }
}

