/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class StaticScheduleOptions {

    /**
     * The time to send at
     */
    @JsonProperty("datetime")
    private OffsetDateTime datetime;

    /**
     * If the campaign should be sent with local recipient timezone send (requires UTC time) or statically sent at the given time. Defaults to False.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_local")
    private JsonNullable<Boolean> isLocal;

    /**
     * Determines if we should send to local recipient timezone if the given time has passed. Only applicable to local sends. Defaults to False.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("send_past_recipients_immediately")
    private JsonNullable<Boolean> sendPastRecipientsImmediately;

    @JsonCreator
    public StaticScheduleOptions(
            @JsonProperty("datetime") OffsetDateTime datetime,
            @JsonProperty("is_local") JsonNullable<Boolean> isLocal,
            @JsonProperty("send_past_recipients_immediately") JsonNullable<Boolean> sendPastRecipientsImmediately) {
        Utils.checkNotNull(datetime, "datetime");
        Utils.checkNotNull(isLocal, "isLocal");
        Utils.checkNotNull(sendPastRecipientsImmediately, "sendPastRecipientsImmediately");
        this.datetime = datetime;
        this.isLocal = isLocal;
        this.sendPastRecipientsImmediately = sendPastRecipientsImmediately;
    }
    
    public StaticScheduleOptions(
            OffsetDateTime datetime) {
        this(datetime, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The time to send at
     */
    @JsonIgnore
    public OffsetDateTime datetime() {
        return datetime;
    }

    /**
     * If the campaign should be sent with local recipient timezone send (requires UTC time) or statically sent at the given time. Defaults to False.
     */
    @JsonIgnore
    public JsonNullable<Boolean> isLocal() {
        return isLocal;
    }

    /**
     * Determines if we should send to local recipient timezone if the given time has passed. Only applicable to local sends. Defaults to False.
     */
    @JsonIgnore
    public JsonNullable<Boolean> sendPastRecipientsImmediately() {
        return sendPastRecipientsImmediately;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The time to send at
     */
    public StaticScheduleOptions withDatetime(OffsetDateTime datetime) {
        Utils.checkNotNull(datetime, "datetime");
        this.datetime = datetime;
        return this;
    }

    /**
     * If the campaign should be sent with local recipient timezone send (requires UTC time) or statically sent at the given time. Defaults to False.
     */
    public StaticScheduleOptions withIsLocal(boolean isLocal) {
        Utils.checkNotNull(isLocal, "isLocal");
        this.isLocal = JsonNullable.of(isLocal);
        return this;
    }

    /**
     * If the campaign should be sent with local recipient timezone send (requires UTC time) or statically sent at the given time. Defaults to False.
     */
    public StaticScheduleOptions withIsLocal(JsonNullable<Boolean> isLocal) {
        Utils.checkNotNull(isLocal, "isLocal");
        this.isLocal = isLocal;
        return this;
    }

    /**
     * Determines if we should send to local recipient timezone if the given time has passed. Only applicable to local sends. Defaults to False.
     */
    public StaticScheduleOptions withSendPastRecipientsImmediately(boolean sendPastRecipientsImmediately) {
        Utils.checkNotNull(sendPastRecipientsImmediately, "sendPastRecipientsImmediately");
        this.sendPastRecipientsImmediately = JsonNullable.of(sendPastRecipientsImmediately);
        return this;
    }

    /**
     * Determines if we should send to local recipient timezone if the given time has passed. Only applicable to local sends. Defaults to False.
     */
    public StaticScheduleOptions withSendPastRecipientsImmediately(JsonNullable<Boolean> sendPastRecipientsImmediately) {
        Utils.checkNotNull(sendPastRecipientsImmediately, "sendPastRecipientsImmediately");
        this.sendPastRecipientsImmediately = sendPastRecipientsImmediately;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StaticScheduleOptions other = (StaticScheduleOptions) o;
        return 
            Objects.deepEquals(this.datetime, other.datetime) &&
            Objects.deepEquals(this.isLocal, other.isLocal) &&
            Objects.deepEquals(this.sendPastRecipientsImmediately, other.sendPastRecipientsImmediately);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            datetime,
            isLocal,
            sendPastRecipientsImmediately);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StaticScheduleOptions.class,
                "datetime", datetime,
                "isLocal", isLocal,
                "sendPastRecipientsImmediately", sendPastRecipientsImmediately);
    }
    
    public final static class Builder {
 
        private OffsetDateTime datetime;
 
        private JsonNullable<Boolean> isLocal = JsonNullable.undefined();
 
        private JsonNullable<Boolean> sendPastRecipientsImmediately = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The time to send at
         */
        public Builder datetime(OffsetDateTime datetime) {
            Utils.checkNotNull(datetime, "datetime");
            this.datetime = datetime;
            return this;
        }

        /**
         * If the campaign should be sent with local recipient timezone send (requires UTC time) or statically sent at the given time. Defaults to False.
         */
        public Builder isLocal(boolean isLocal) {
            Utils.checkNotNull(isLocal, "isLocal");
            this.isLocal = JsonNullable.of(isLocal);
            return this;
        }

        /**
         * If the campaign should be sent with local recipient timezone send (requires UTC time) or statically sent at the given time. Defaults to False.
         */
        public Builder isLocal(JsonNullable<Boolean> isLocal) {
            Utils.checkNotNull(isLocal, "isLocal");
            this.isLocal = isLocal;
            return this;
        }

        /**
         * Determines if we should send to local recipient timezone if the given time has passed. Only applicable to local sends. Defaults to False.
         */
        public Builder sendPastRecipientsImmediately(boolean sendPastRecipientsImmediately) {
            Utils.checkNotNull(sendPastRecipientsImmediately, "sendPastRecipientsImmediately");
            this.sendPastRecipientsImmediately = JsonNullable.of(sendPastRecipientsImmediately);
            return this;
        }

        /**
         * Determines if we should send to local recipient timezone if the given time has passed. Only applicable to local sends. Defaults to False.
         */
        public Builder sendPastRecipientsImmediately(JsonNullable<Boolean> sendPastRecipientsImmediately) {
            Utils.checkNotNull(sendPastRecipientsImmediately, "sendPastRecipientsImmediately");
            this.sendPastRecipientsImmediately = sendPastRecipientsImmediately;
            return this;
        }
        
        public StaticScheduleOptions build() {
            return new StaticScheduleOptions(
                datetime,
                isLocal,
                sendPastRecipientsImmediately);
        }
    }
}

