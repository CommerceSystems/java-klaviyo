/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.LazySingletonValue;
import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class EmailMarketing {

    /**
     * Whether or not this profile has implicit consent to receive email marketing. True if it does profile does not have any global suppressions.
     */
    @JsonProperty("can_receive_email_marketing")
    private boolean canReceiveEmailMarketing;

    /**
     * The consent status for email marketing.
     */
    @JsonProperty("consent")
    private String consent;

    /**
     * The timestamp when consent was recorded or updated for email marketing, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consent_timestamp")
    private JsonNullable<OffsetDateTime> consentTimestamp;

    /**
     * The timestamp when a field on the email marketing object was last modified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_updated")
    private JsonNullable<OffsetDateTime> lastUpdated;

    /**
     * The method by which the profile was subscribed to email marketing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private JsonNullable<String> method;

    /**
     * Additional details about the method by which the profile was subscribed to email marketing. This may be empty if no details were provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method_detail")
    private JsonNullable<String> methodDetail;

    /**
     * Additional detail provided by the caller when the profile was subscribed. This may be empty if no details were provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_method_detail")
    private JsonNullable<String> customMethodDetail;

    /**
     * Whether the profile was subscribed to email marketing using a double opt-in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("double_optin")
    private JsonNullable<Boolean> doubleOptin;

    /**
     * The global email marketing suppression for this profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suppression")
    private JsonNullable<? extends List<EmailMarketingSuppression>> suppression;

    /**
     * The list suppressions for this profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_suppressions")
    private JsonNullable<? extends List<EmailMarketingListSuppression>> listSuppressions;

    @JsonCreator
    public EmailMarketing(
            @JsonProperty("can_receive_email_marketing") boolean canReceiveEmailMarketing,
            @JsonProperty("consent") String consent,
            @JsonProperty("consent_timestamp") JsonNullable<OffsetDateTime> consentTimestamp,
            @JsonProperty("last_updated") JsonNullable<OffsetDateTime> lastUpdated,
            @JsonProperty("method") JsonNullable<String> method,
            @JsonProperty("method_detail") JsonNullable<String> methodDetail,
            @JsonProperty("custom_method_detail") JsonNullable<String> customMethodDetail,
            @JsonProperty("double_optin") JsonNullable<Boolean> doubleOptin,
            @JsonProperty("suppression") JsonNullable<? extends List<EmailMarketingSuppression>> suppression,
            @JsonProperty("list_suppressions") JsonNullable<? extends List<EmailMarketingListSuppression>> listSuppressions) {
        Utils.checkNotNull(canReceiveEmailMarketing, "canReceiveEmailMarketing");
        Utils.checkNotNull(consent, "consent");
        Utils.checkNotNull(consentTimestamp, "consentTimestamp");
        Utils.checkNotNull(lastUpdated, "lastUpdated");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(methodDetail, "methodDetail");
        Utils.checkNotNull(customMethodDetail, "customMethodDetail");
        Utils.checkNotNull(doubleOptin, "doubleOptin");
        Utils.checkNotNull(suppression, "suppression");
        Utils.checkNotNull(listSuppressions, "listSuppressions");
        this.canReceiveEmailMarketing = canReceiveEmailMarketing;
        this.consent = consent;
        this.consentTimestamp = consentTimestamp;
        this.lastUpdated = lastUpdated;
        this.method = method;
        this.methodDetail = methodDetail;
        this.customMethodDetail = customMethodDetail;
        this.doubleOptin = doubleOptin;
        this.suppression = suppression;
        this.listSuppressions = listSuppressions;
    }
    
    public EmailMarketing(
            boolean canReceiveEmailMarketing,
            String consent) {
        this(canReceiveEmailMarketing, consent, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Whether or not this profile has implicit consent to receive email marketing. True if it does profile does not have any global suppressions.
     */
    @JsonIgnore
    public boolean canReceiveEmailMarketing() {
        return canReceiveEmailMarketing;
    }

    /**
     * The consent status for email marketing.
     */
    @JsonIgnore
    public String consent() {
        return consent;
    }

    /**
     * The timestamp when consent was recorded or updated for email marketing, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> consentTimestamp() {
        return consentTimestamp;
    }

    /**
     * The timestamp when a field on the email marketing object was last modified.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> lastUpdated() {
        return lastUpdated;
    }

    /**
     * The method by which the profile was subscribed to email marketing.
     */
    @JsonIgnore
    public JsonNullable<String> method() {
        return method;
    }

    /**
     * Additional details about the method by which the profile was subscribed to email marketing. This may be empty if no details were provided.
     */
    @JsonIgnore
    public JsonNullable<String> methodDetail() {
        return methodDetail;
    }

    /**
     * Additional detail provided by the caller when the profile was subscribed. This may be empty if no details were provided.
     */
    @JsonIgnore
    public JsonNullable<String> customMethodDetail() {
        return customMethodDetail;
    }

    /**
     * Whether the profile was subscribed to email marketing using a double opt-in.
     */
    @JsonIgnore
    public JsonNullable<Boolean> doubleOptin() {
        return doubleOptin;
    }

    /**
     * The global email marketing suppression for this profile.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<EmailMarketingSuppression>> suppression() {
        return (JsonNullable<List<EmailMarketingSuppression>>) suppression;
    }

    /**
     * The list suppressions for this profile.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<EmailMarketingListSuppression>> listSuppressions() {
        return (JsonNullable<List<EmailMarketingListSuppression>>) listSuppressions;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Whether or not this profile has implicit consent to receive email marketing. True if it does profile does not have any global suppressions.
     */
    public EmailMarketing withCanReceiveEmailMarketing(boolean canReceiveEmailMarketing) {
        Utils.checkNotNull(canReceiveEmailMarketing, "canReceiveEmailMarketing");
        this.canReceiveEmailMarketing = canReceiveEmailMarketing;
        return this;
    }

    /**
     * The consent status for email marketing.
     */
    public EmailMarketing withConsent(String consent) {
        Utils.checkNotNull(consent, "consent");
        this.consent = consent;
        return this;
    }

    /**
     * The timestamp when consent was recorded or updated for email marketing, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
     */
    public EmailMarketing withConsentTimestamp(OffsetDateTime consentTimestamp) {
        Utils.checkNotNull(consentTimestamp, "consentTimestamp");
        this.consentTimestamp = JsonNullable.of(consentTimestamp);
        return this;
    }

    /**
     * The timestamp when consent was recorded or updated for email marketing, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
     */
    public EmailMarketing withConsentTimestamp(JsonNullable<OffsetDateTime> consentTimestamp) {
        Utils.checkNotNull(consentTimestamp, "consentTimestamp");
        this.consentTimestamp = consentTimestamp;
        return this;
    }

    /**
     * The timestamp when a field on the email marketing object was last modified.
     */
    public EmailMarketing withLastUpdated(OffsetDateTime lastUpdated) {
        Utils.checkNotNull(lastUpdated, "lastUpdated");
        this.lastUpdated = JsonNullable.of(lastUpdated);
        return this;
    }

    /**
     * The timestamp when a field on the email marketing object was last modified.
     */
    public EmailMarketing withLastUpdated(JsonNullable<OffsetDateTime> lastUpdated) {
        Utils.checkNotNull(lastUpdated, "lastUpdated");
        this.lastUpdated = lastUpdated;
        return this;
    }

    /**
     * The method by which the profile was subscribed to email marketing.
     */
    public EmailMarketing withMethod(String method) {
        Utils.checkNotNull(method, "method");
        this.method = JsonNullable.of(method);
        return this;
    }

    /**
     * The method by which the profile was subscribed to email marketing.
     */
    public EmailMarketing withMethod(JsonNullable<String> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * Additional details about the method by which the profile was subscribed to email marketing. This may be empty if no details were provided.
     */
    public EmailMarketing withMethodDetail(String methodDetail) {
        Utils.checkNotNull(methodDetail, "methodDetail");
        this.methodDetail = JsonNullable.of(methodDetail);
        return this;
    }

    /**
     * Additional details about the method by which the profile was subscribed to email marketing. This may be empty if no details were provided.
     */
    public EmailMarketing withMethodDetail(JsonNullable<String> methodDetail) {
        Utils.checkNotNull(methodDetail, "methodDetail");
        this.methodDetail = methodDetail;
        return this;
    }

    /**
     * Additional detail provided by the caller when the profile was subscribed. This may be empty if no details were provided.
     */
    public EmailMarketing withCustomMethodDetail(String customMethodDetail) {
        Utils.checkNotNull(customMethodDetail, "customMethodDetail");
        this.customMethodDetail = JsonNullable.of(customMethodDetail);
        return this;
    }

    /**
     * Additional detail provided by the caller when the profile was subscribed. This may be empty if no details were provided.
     */
    public EmailMarketing withCustomMethodDetail(JsonNullable<String> customMethodDetail) {
        Utils.checkNotNull(customMethodDetail, "customMethodDetail");
        this.customMethodDetail = customMethodDetail;
        return this;
    }

    /**
     * Whether the profile was subscribed to email marketing using a double opt-in.
     */
    public EmailMarketing withDoubleOptin(boolean doubleOptin) {
        Utils.checkNotNull(doubleOptin, "doubleOptin");
        this.doubleOptin = JsonNullable.of(doubleOptin);
        return this;
    }

    /**
     * Whether the profile was subscribed to email marketing using a double opt-in.
     */
    public EmailMarketing withDoubleOptin(JsonNullable<Boolean> doubleOptin) {
        Utils.checkNotNull(doubleOptin, "doubleOptin");
        this.doubleOptin = doubleOptin;
        return this;
    }

    /**
     * The global email marketing suppression for this profile.
     */
    public EmailMarketing withSuppression(List<EmailMarketingSuppression> suppression) {
        Utils.checkNotNull(suppression, "suppression");
        this.suppression = JsonNullable.of(suppression);
        return this;
    }

    /**
     * The global email marketing suppression for this profile.
     */
    public EmailMarketing withSuppression(JsonNullable<? extends List<EmailMarketingSuppression>> suppression) {
        Utils.checkNotNull(suppression, "suppression");
        this.suppression = suppression;
        return this;
    }

    /**
     * The list suppressions for this profile.
     */
    public EmailMarketing withListSuppressions(List<EmailMarketingListSuppression> listSuppressions) {
        Utils.checkNotNull(listSuppressions, "listSuppressions");
        this.listSuppressions = JsonNullable.of(listSuppressions);
        return this;
    }

    /**
     * The list suppressions for this profile.
     */
    public EmailMarketing withListSuppressions(JsonNullable<? extends List<EmailMarketingListSuppression>> listSuppressions) {
        Utils.checkNotNull(listSuppressions, "listSuppressions");
        this.listSuppressions = listSuppressions;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmailMarketing other = (EmailMarketing) o;
        return 
            Objects.deepEquals(this.canReceiveEmailMarketing, other.canReceiveEmailMarketing) &&
            Objects.deepEquals(this.consent, other.consent) &&
            Objects.deepEquals(this.consentTimestamp, other.consentTimestamp) &&
            Objects.deepEquals(this.lastUpdated, other.lastUpdated) &&
            Objects.deepEquals(this.method, other.method) &&
            Objects.deepEquals(this.methodDetail, other.methodDetail) &&
            Objects.deepEquals(this.customMethodDetail, other.customMethodDetail) &&
            Objects.deepEquals(this.doubleOptin, other.doubleOptin) &&
            Objects.deepEquals(this.suppression, other.suppression) &&
            Objects.deepEquals(this.listSuppressions, other.listSuppressions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            canReceiveEmailMarketing,
            consent,
            consentTimestamp,
            lastUpdated,
            method,
            methodDetail,
            customMethodDetail,
            doubleOptin,
            suppression,
            listSuppressions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmailMarketing.class,
                "canReceiveEmailMarketing", canReceiveEmailMarketing,
                "consent", consent,
                "consentTimestamp", consentTimestamp,
                "lastUpdated", lastUpdated,
                "method", method,
                "methodDetail", methodDetail,
                "customMethodDetail", customMethodDetail,
                "doubleOptin", doubleOptin,
                "suppression", suppression,
                "listSuppressions", listSuppressions);
    }
    
    public final static class Builder {
 
        private Boolean canReceiveEmailMarketing;
 
        private String consent;
 
        private JsonNullable<OffsetDateTime> consentTimestamp = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> lastUpdated = JsonNullable.undefined();
 
        private JsonNullable<String> method = JsonNullable.undefined();
 
        private JsonNullable<String> methodDetail;
 
        private JsonNullable<String> customMethodDetail = JsonNullable.undefined();
 
        private JsonNullable<Boolean> doubleOptin = JsonNullable.undefined();
 
        private JsonNullable<? extends List<EmailMarketingSuppression>> suppression = JsonNullable.undefined();
 
        private JsonNullable<? extends List<EmailMarketingListSuppression>> listSuppressions = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether or not this profile has implicit consent to receive email marketing. True if it does profile does not have any global suppressions.
         */
        public Builder canReceiveEmailMarketing(boolean canReceiveEmailMarketing) {
            Utils.checkNotNull(canReceiveEmailMarketing, "canReceiveEmailMarketing");
            this.canReceiveEmailMarketing = canReceiveEmailMarketing;
            return this;
        }

        /**
         * The consent status for email marketing.
         */
        public Builder consent(String consent) {
            Utils.checkNotNull(consent, "consent");
            this.consent = consent;
            return this;
        }

        /**
         * The timestamp when consent was recorded or updated for email marketing, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
         */
        public Builder consentTimestamp(OffsetDateTime consentTimestamp) {
            Utils.checkNotNull(consentTimestamp, "consentTimestamp");
            this.consentTimestamp = JsonNullable.of(consentTimestamp);
            return this;
        }

        /**
         * The timestamp when consent was recorded or updated for email marketing, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
         */
        public Builder consentTimestamp(JsonNullable<OffsetDateTime> consentTimestamp) {
            Utils.checkNotNull(consentTimestamp, "consentTimestamp");
            this.consentTimestamp = consentTimestamp;
            return this;
        }

        /**
         * The timestamp when a field on the email marketing object was last modified.
         */
        public Builder lastUpdated(OffsetDateTime lastUpdated) {
            Utils.checkNotNull(lastUpdated, "lastUpdated");
            this.lastUpdated = JsonNullable.of(lastUpdated);
            return this;
        }

        /**
         * The timestamp when a field on the email marketing object was last modified.
         */
        public Builder lastUpdated(JsonNullable<OffsetDateTime> lastUpdated) {
            Utils.checkNotNull(lastUpdated, "lastUpdated");
            this.lastUpdated = lastUpdated;
            return this;
        }

        /**
         * The method by which the profile was subscribed to email marketing.
         */
        public Builder method(String method) {
            Utils.checkNotNull(method, "method");
            this.method = JsonNullable.of(method);
            return this;
        }

        /**
         * The method by which the profile was subscribed to email marketing.
         */
        public Builder method(JsonNullable<String> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        /**
         * Additional details about the method by which the profile was subscribed to email marketing. This may be empty if no details were provided.
         */
        public Builder methodDetail(String methodDetail) {
            Utils.checkNotNull(methodDetail, "methodDetail");
            this.methodDetail = JsonNullable.of(methodDetail);
            return this;
        }

        /**
         * Additional details about the method by which the profile was subscribed to email marketing. This may be empty if no details were provided.
         */
        public Builder methodDetail(JsonNullable<String> methodDetail) {
            Utils.checkNotNull(methodDetail, "methodDetail");
            this.methodDetail = methodDetail;
            return this;
        }

        /**
         * Additional detail provided by the caller when the profile was subscribed. This may be empty if no details were provided.
         */
        public Builder customMethodDetail(String customMethodDetail) {
            Utils.checkNotNull(customMethodDetail, "customMethodDetail");
            this.customMethodDetail = JsonNullable.of(customMethodDetail);
            return this;
        }

        /**
         * Additional detail provided by the caller when the profile was subscribed. This may be empty if no details were provided.
         */
        public Builder customMethodDetail(JsonNullable<String> customMethodDetail) {
            Utils.checkNotNull(customMethodDetail, "customMethodDetail");
            this.customMethodDetail = customMethodDetail;
            return this;
        }

        /**
         * Whether the profile was subscribed to email marketing using a double opt-in.
         */
        public Builder doubleOptin(boolean doubleOptin) {
            Utils.checkNotNull(doubleOptin, "doubleOptin");
            this.doubleOptin = JsonNullable.of(doubleOptin);
            return this;
        }

        /**
         * Whether the profile was subscribed to email marketing using a double opt-in.
         */
        public Builder doubleOptin(JsonNullable<Boolean> doubleOptin) {
            Utils.checkNotNull(doubleOptin, "doubleOptin");
            this.doubleOptin = doubleOptin;
            return this;
        }

        /**
         * The global email marketing suppression for this profile.
         */
        public Builder suppression(List<EmailMarketingSuppression> suppression) {
            Utils.checkNotNull(suppression, "suppression");
            this.suppression = JsonNullable.of(suppression);
            return this;
        }

        /**
         * The global email marketing suppression for this profile.
         */
        public Builder suppression(JsonNullable<? extends List<EmailMarketingSuppression>> suppression) {
            Utils.checkNotNull(suppression, "suppression");
            this.suppression = suppression;
            return this;
        }

        /**
         * The list suppressions for this profile.
         */
        public Builder listSuppressions(List<EmailMarketingListSuppression> listSuppressions) {
            Utils.checkNotNull(listSuppressions, "listSuppressions");
            this.listSuppressions = JsonNullable.of(listSuppressions);
            return this;
        }

        /**
         * The list suppressions for this profile.
         */
        public Builder listSuppressions(JsonNullable<? extends List<EmailMarketingListSuppression>> listSuppressions) {
            Utils.checkNotNull(listSuppressions, "listSuppressions");
            this.listSuppressions = listSuppressions;
            return this;
        }
        
        public EmailMarketing build() {
            if (methodDetail == null) {
                methodDetail = _SINGLETON_VALUE_MethodDetail.value();
            }            return new EmailMarketing(
                canReceiveEmailMarketing,
                consent,
                consentTimestamp,
                lastUpdated,
                method,
                methodDetail,
                customMethodDetail,
                doubleOptin,
                suppression,
                listSuppressions);
        }

        private static final LazySingletonValue<JsonNullable<String>> _SINGLETON_VALUE_MethodDetail =
                new LazySingletonValue<>(
                        "method_detail",
                        "\"\"",
                        new TypeReference<JsonNullable<String>>() {});
    }
}

