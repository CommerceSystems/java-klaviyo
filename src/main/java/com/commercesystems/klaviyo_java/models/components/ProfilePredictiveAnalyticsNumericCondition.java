/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class ProfilePredictiveAnalyticsNumericCondition {

    @JsonProperty("type")
    private ProfilePredictiveAnalyticsEnum type;

    /**
     * Dimensions for numeric profile predictive analytics conditions.
     */
    @JsonProperty("dimension")
    private Dimension dimension;

    @JsonProperty("filter")
    private NumericOperatorFilter filter;

    @JsonCreator
    public ProfilePredictiveAnalyticsNumericCondition(
            @JsonProperty("type") ProfilePredictiveAnalyticsEnum type,
            @JsonProperty("dimension") Dimension dimension,
            @JsonProperty("filter") NumericOperatorFilter filter) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(dimension, "dimension");
        Utils.checkNotNull(filter, "filter");
        this.type = type;
        this.dimension = dimension;
        this.filter = filter;
    }

    @JsonIgnore
    public ProfilePredictiveAnalyticsEnum type() {
        return type;
    }

    /**
     * Dimensions for numeric profile predictive analytics conditions.
     */
    @JsonIgnore
    public Dimension dimension() {
        return dimension;
    }

    @JsonIgnore
    public NumericOperatorFilter filter() {
        return filter;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ProfilePredictiveAnalyticsNumericCondition withType(ProfilePredictiveAnalyticsEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Dimensions for numeric profile predictive analytics conditions.
     */
    public ProfilePredictiveAnalyticsNumericCondition withDimension(Dimension dimension) {
        Utils.checkNotNull(dimension, "dimension");
        this.dimension = dimension;
        return this;
    }

    public ProfilePredictiveAnalyticsNumericCondition withFilter(NumericOperatorFilter filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = filter;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProfilePredictiveAnalyticsNumericCondition other = (ProfilePredictiveAnalyticsNumericCondition) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.dimension, other.dimension) &&
            Objects.deepEquals(this.filter, other.filter);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            dimension,
            filter);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProfilePredictiveAnalyticsNumericCondition.class,
                "type", type,
                "dimension", dimension,
                "filter", filter);
    }
    
    public final static class Builder {
 
        private ProfilePredictiveAnalyticsEnum type;
 
        private Dimension dimension;
 
        private NumericOperatorFilter filter;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder type(ProfilePredictiveAnalyticsEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Dimensions for numeric profile predictive analytics conditions.
         */
        public Builder dimension(Dimension dimension) {
            Utils.checkNotNull(dimension, "dimension");
            this.dimension = dimension;
            return this;
        }

        public Builder filter(NumericOperatorFilter filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = filter;
            return this;
        }
        
        public ProfilePredictiveAnalyticsNumericCondition build() {
            return new ProfilePredictiveAnalyticsNumericCondition(
                type,
                dimension,
                filter);
        }
    }
}

