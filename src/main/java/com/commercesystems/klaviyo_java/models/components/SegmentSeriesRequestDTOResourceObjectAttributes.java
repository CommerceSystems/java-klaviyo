/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class SegmentSeriesRequestDTOResourceObjectAttributes {

    /**
     * List of statistics to query for.
     */
    @JsonProperty("statistics")
    private List<SegmentSeriesRequestDTOResourceObjectStatistics> statistics;

    /**
     * The timeframe to query for data within. Data is unavailable before June 1st, 2023. Please use a timeframe after this date. The max length a timeframe can be is 1 year
     */
    @JsonProperty("timeframe")
    private SegmentSeriesRequestDTOResourceObjectTimeframe timeframe;

    /**
     * The interval used to aggregate data within the series request.
     * If hourly is used, the timeframe cannot be longer than 7 days.
     * If daily is used, the timeframe cannot be longer than 60 days.
     * If monthly is used, the timeframe cannot be longer than 52 weeks.
     */
    @JsonProperty("interval")
    private SegmentSeriesRequestDTOResourceObjectInterval interval;

    /**
     * API filter string used to filter the query.
     * Allowed filters are segment_id.
     * Allowed operators are equals, any.
     * Only one filter can be used per attribute.
     * Max of 100 messages per ANY filter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filter")
    private JsonNullable<String> filter;

    @JsonCreator
    public SegmentSeriesRequestDTOResourceObjectAttributes(
            @JsonProperty("statistics") List<SegmentSeriesRequestDTOResourceObjectStatistics> statistics,
            @JsonProperty("timeframe") SegmentSeriesRequestDTOResourceObjectTimeframe timeframe,
            @JsonProperty("interval") SegmentSeriesRequestDTOResourceObjectInterval interval,
            @JsonProperty("filter") JsonNullable<String> filter) {
        Utils.checkNotNull(statistics, "statistics");
        Utils.checkNotNull(timeframe, "timeframe");
        Utils.checkNotNull(interval, "interval");
        Utils.checkNotNull(filter, "filter");
        this.statistics = statistics;
        this.timeframe = timeframe;
        this.interval = interval;
        this.filter = filter;
    }
    
    public SegmentSeriesRequestDTOResourceObjectAttributes(
            List<SegmentSeriesRequestDTOResourceObjectStatistics> statistics,
            SegmentSeriesRequestDTOResourceObjectTimeframe timeframe,
            SegmentSeriesRequestDTOResourceObjectInterval interval) {
        this(statistics, timeframe, interval, JsonNullable.undefined());
    }

    /**
     * List of statistics to query for.
     */
    @JsonIgnore
    public List<SegmentSeriesRequestDTOResourceObjectStatistics> statistics() {
        return statistics;
    }

    /**
     * The timeframe to query for data within. Data is unavailable before June 1st, 2023. Please use a timeframe after this date. The max length a timeframe can be is 1 year
     */
    @JsonIgnore
    public SegmentSeriesRequestDTOResourceObjectTimeframe timeframe() {
        return timeframe;
    }

    /**
     * The interval used to aggregate data within the series request.
     * If hourly is used, the timeframe cannot be longer than 7 days.
     * If daily is used, the timeframe cannot be longer than 60 days.
     * If monthly is used, the timeframe cannot be longer than 52 weeks.
     */
    @JsonIgnore
    public SegmentSeriesRequestDTOResourceObjectInterval interval() {
        return interval;
    }

    /**
     * API filter string used to filter the query.
     * Allowed filters are segment_id.
     * Allowed operators are equals, any.
     * Only one filter can be used per attribute.
     * Max of 100 messages per ANY filter.
     */
    @JsonIgnore
    public JsonNullable<String> filter() {
        return filter;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * List of statistics to query for.
     */
    public SegmentSeriesRequestDTOResourceObjectAttributes withStatistics(List<SegmentSeriesRequestDTOResourceObjectStatistics> statistics) {
        Utils.checkNotNull(statistics, "statistics");
        this.statistics = statistics;
        return this;
    }

    /**
     * The timeframe to query for data within. Data is unavailable before June 1st, 2023. Please use a timeframe after this date. The max length a timeframe can be is 1 year
     */
    public SegmentSeriesRequestDTOResourceObjectAttributes withTimeframe(SegmentSeriesRequestDTOResourceObjectTimeframe timeframe) {
        Utils.checkNotNull(timeframe, "timeframe");
        this.timeframe = timeframe;
        return this;
    }

    /**
     * The interval used to aggregate data within the series request.
     * If hourly is used, the timeframe cannot be longer than 7 days.
     * If daily is used, the timeframe cannot be longer than 60 days.
     * If monthly is used, the timeframe cannot be longer than 52 weeks.
     */
    public SegmentSeriesRequestDTOResourceObjectAttributes withInterval(SegmentSeriesRequestDTOResourceObjectInterval interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = interval;
        return this;
    }

    /**
     * API filter string used to filter the query.
     * Allowed filters are segment_id.
     * Allowed operators are equals, any.
     * Only one filter can be used per attribute.
     * Max of 100 messages per ANY filter.
     */
    public SegmentSeriesRequestDTOResourceObjectAttributes withFilter(String filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = JsonNullable.of(filter);
        return this;
    }

    /**
     * API filter string used to filter the query.
     * Allowed filters are segment_id.
     * Allowed operators are equals, any.
     * Only one filter can be used per attribute.
     * Max of 100 messages per ANY filter.
     */
    public SegmentSeriesRequestDTOResourceObjectAttributes withFilter(JsonNullable<String> filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = filter;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SegmentSeriesRequestDTOResourceObjectAttributes other = (SegmentSeriesRequestDTOResourceObjectAttributes) o;
        return 
            Objects.deepEquals(this.statistics, other.statistics) &&
            Objects.deepEquals(this.timeframe, other.timeframe) &&
            Objects.deepEquals(this.interval, other.interval) &&
            Objects.deepEquals(this.filter, other.filter);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            statistics,
            timeframe,
            interval,
            filter);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SegmentSeriesRequestDTOResourceObjectAttributes.class,
                "statistics", statistics,
                "timeframe", timeframe,
                "interval", interval,
                "filter", filter);
    }
    
    public final static class Builder {
 
        private List<SegmentSeriesRequestDTOResourceObjectStatistics> statistics;
 
        private SegmentSeriesRequestDTOResourceObjectTimeframe timeframe;
 
        private SegmentSeriesRequestDTOResourceObjectInterval interval;
 
        private JsonNullable<String> filter = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of statistics to query for.
         */
        public Builder statistics(List<SegmentSeriesRequestDTOResourceObjectStatistics> statistics) {
            Utils.checkNotNull(statistics, "statistics");
            this.statistics = statistics;
            return this;
        }

        /**
         * The timeframe to query for data within. Data is unavailable before June 1st, 2023. Please use a timeframe after this date. The max length a timeframe can be is 1 year
         */
        public Builder timeframe(SegmentSeriesRequestDTOResourceObjectTimeframe timeframe) {
            Utils.checkNotNull(timeframe, "timeframe");
            this.timeframe = timeframe;
            return this;
        }

        /**
         * The interval used to aggregate data within the series request.
         * If hourly is used, the timeframe cannot be longer than 7 days.
         * If daily is used, the timeframe cannot be longer than 60 days.
         * If monthly is used, the timeframe cannot be longer than 52 weeks.
         */
        public Builder interval(SegmentSeriesRequestDTOResourceObjectInterval interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = interval;
            return this;
        }

        /**
         * API filter string used to filter the query.
         * Allowed filters are segment_id.
         * Allowed operators are equals, any.
         * Only one filter can be used per attribute.
         * Max of 100 messages per ANY filter.
         */
        public Builder filter(String filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = JsonNullable.of(filter);
            return this;
        }

        /**
         * API filter string used to filter the query.
         * Allowed filters are segment_id.
         * Allowed operators are equals, any.
         * Only one filter can be used per attribute.
         * Max of 100 messages per ANY filter.
         */
        public Builder filter(JsonNullable<String> filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = filter;
            return this;
        }
        
        public SegmentSeriesRequestDTOResourceObjectAttributes build() {
            return new SegmentSeriesRequestDTOResourceObjectAttributes(
                statistics,
                timeframe,
                interval,
                filter);
        }
    }
}

