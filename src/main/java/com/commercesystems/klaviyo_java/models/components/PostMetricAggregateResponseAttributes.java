/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;


public class PostMetricAggregateResponseAttributes {

    /**
     * The dates of the query range
     */
    @JsonProperty("dates")
    private List<OffsetDateTime> dates;

    /**
     * Aggregation result data
     */
    @JsonProperty("data")
    private List<MetricAggregateRowDTO> data;

    @JsonCreator
    public PostMetricAggregateResponseAttributes(
            @JsonProperty("dates") List<OffsetDateTime> dates,
            @JsonProperty("data") List<MetricAggregateRowDTO> data) {
        Utils.checkNotNull(dates, "dates");
        Utils.checkNotNull(data, "data");
        this.dates = dates;
        this.data = data;
    }

    /**
     * The dates of the query range
     */
    @JsonIgnore
    public List<OffsetDateTime> dates() {
        return dates;
    }

    /**
     * Aggregation result data
     */
    @JsonIgnore
    public List<MetricAggregateRowDTO> data() {
        return data;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The dates of the query range
     */
    public PostMetricAggregateResponseAttributes withDates(List<OffsetDateTime> dates) {
        Utils.checkNotNull(dates, "dates");
        this.dates = dates;
        return this;
    }

    /**
     * Aggregation result data
     */
    public PostMetricAggregateResponseAttributes withData(List<MetricAggregateRowDTO> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostMetricAggregateResponseAttributes other = (PostMetricAggregateResponseAttributes) o;
        return 
            Objects.deepEquals(this.dates, other.dates) &&
            Objects.deepEquals(this.data, other.data);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            dates,
            data);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostMetricAggregateResponseAttributes.class,
                "dates", dates,
                "data", data);
    }
    
    public final static class Builder {
 
        private List<OffsetDateTime> dates;
 
        private List<MetricAggregateRowDTO> data;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The dates of the query range
         */
        public Builder dates(List<OffsetDateTime> dates) {
            Utils.checkNotNull(dates, "dates");
            this.dates = dates;
            return this;
        }

        /**
         * Aggregation result data
         */
        public Builder data(List<MetricAggregateRowDTO> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }
        
        public PostMetricAggregateResponseAttributes build() {
            return new PostMetricAggregateResponseAttributes(
                dates,
                data);
        }
    }
}

