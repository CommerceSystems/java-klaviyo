/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class TimeframeFilterRelativeDateOperatorBaseFilter {

    @JsonProperty("type")
    private DateEnum type;

    /**
     * Operators for relative date filters.
     * 
     * e.g. "in the last 10 days"
     */
    @JsonProperty("operator")
    private RelativeDateOperatorBaseFilterTimeframeFilterOperator operator;

    /**
     * Units for relative date filters.
     */
    @JsonProperty("unit")
    private RelativeDateOperatorBaseFilterTimeframeFilterUnit unit;

    @JsonProperty("quantity")
    private long quantity;

    @JsonCreator
    public TimeframeFilterRelativeDateOperatorBaseFilter(
            @JsonProperty("type") DateEnum type,
            @JsonProperty("operator") RelativeDateOperatorBaseFilterTimeframeFilterOperator operator,
            @JsonProperty("unit") RelativeDateOperatorBaseFilterTimeframeFilterUnit unit,
            @JsonProperty("quantity") long quantity) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(operator, "operator");
        Utils.checkNotNull(unit, "unit");
        Utils.checkNotNull(quantity, "quantity");
        this.type = type;
        this.operator = operator;
        this.unit = unit;
        this.quantity = quantity;
    }

    @JsonIgnore
    public DateEnum type() {
        return type;
    }

    /**
     * Operators for relative date filters.
     * 
     * e.g. "in the last 10 days"
     */
    @JsonIgnore
    public RelativeDateOperatorBaseFilterTimeframeFilterOperator operator() {
        return operator;
    }

    /**
     * Units for relative date filters.
     */
    @JsonIgnore
    public RelativeDateOperatorBaseFilterTimeframeFilterUnit unit() {
        return unit;
    }

    @JsonIgnore
    public long quantity() {
        return quantity;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TimeframeFilterRelativeDateOperatorBaseFilter withType(DateEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Operators for relative date filters.
     * 
     * e.g. "in the last 10 days"
     */
    public TimeframeFilterRelativeDateOperatorBaseFilter withOperator(RelativeDateOperatorBaseFilterTimeframeFilterOperator operator) {
        Utils.checkNotNull(operator, "operator");
        this.operator = operator;
        return this;
    }

    /**
     * Units for relative date filters.
     */
    public TimeframeFilterRelativeDateOperatorBaseFilter withUnit(RelativeDateOperatorBaseFilterTimeframeFilterUnit unit) {
        Utils.checkNotNull(unit, "unit");
        this.unit = unit;
        return this;
    }

    public TimeframeFilterRelativeDateOperatorBaseFilter withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TimeframeFilterRelativeDateOperatorBaseFilter other = (TimeframeFilterRelativeDateOperatorBaseFilter) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.operator, other.operator) &&
            Objects.deepEquals(this.unit, other.unit) &&
            Objects.deepEquals(this.quantity, other.quantity);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            operator,
            unit,
            quantity);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TimeframeFilterRelativeDateOperatorBaseFilter.class,
                "type", type,
                "operator", operator,
                "unit", unit,
                "quantity", quantity);
    }
    
    public final static class Builder {
 
        private DateEnum type;
 
        private RelativeDateOperatorBaseFilterTimeframeFilterOperator operator;
 
        private RelativeDateOperatorBaseFilterTimeframeFilterUnit unit;
 
        private Long quantity;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder type(DateEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Operators for relative date filters.
         * 
         * e.g. "in the last 10 days"
         */
        public Builder operator(RelativeDateOperatorBaseFilterTimeframeFilterOperator operator) {
            Utils.checkNotNull(operator, "operator");
            this.operator = operator;
            return this;
        }

        /**
         * Units for relative date filters.
         */
        public Builder unit(RelativeDateOperatorBaseFilterTimeframeFilterUnit unit) {
            Utils.checkNotNull(unit, "unit");
            this.unit = unit;
            return this;
        }

        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }
        
        public TimeframeFilterRelativeDateOperatorBaseFilter build() {
            return new TimeframeFilterRelativeDateOperatorBaseFilter(
                type,
                operator,
                unit,
                quantity);
        }
    }
}

