/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class TrackingOptionsEmailTrackingOptionsSubObject {

    /**
     * Whether the campaign needs custom tracking parameters. If set to False, tracking params will not be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("add_tracking_params")
    private JsonNullable<Boolean> addTrackingParams;

    /**
     * A list of custom tracking parameters. If an empty list is given and add_tracking_params is True, uses company defaults.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_tracking_params")
    private JsonNullable<? extends List<TrackingOptionsCustomTrackingParams>> customTrackingParams;

    /**
     * Whether the campaign is tracking click events. If not specified, uses company defaults.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_tracking_clicks")
    private JsonNullable<Boolean> isTrackingClicks;

    /**
     * Whether the campaign is tracking open events. If not specified, uses company defaults.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_tracking_opens")
    private JsonNullable<Boolean> isTrackingOpens;

    @JsonCreator
    public TrackingOptionsEmailTrackingOptionsSubObject(
            @JsonProperty("add_tracking_params") JsonNullable<Boolean> addTrackingParams,
            @JsonProperty("custom_tracking_params") JsonNullable<? extends List<TrackingOptionsCustomTrackingParams>> customTrackingParams,
            @JsonProperty("is_tracking_clicks") JsonNullable<Boolean> isTrackingClicks,
            @JsonProperty("is_tracking_opens") JsonNullable<Boolean> isTrackingOpens) {
        Utils.checkNotNull(addTrackingParams, "addTrackingParams");
        Utils.checkNotNull(customTrackingParams, "customTrackingParams");
        Utils.checkNotNull(isTrackingClicks, "isTrackingClicks");
        Utils.checkNotNull(isTrackingOpens, "isTrackingOpens");
        this.addTrackingParams = addTrackingParams;
        this.customTrackingParams = customTrackingParams;
        this.isTrackingClicks = isTrackingClicks;
        this.isTrackingOpens = isTrackingOpens;
    }
    
    public TrackingOptionsEmailTrackingOptionsSubObject() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Whether the campaign needs custom tracking parameters. If set to False, tracking params will not be used.
     */
    @JsonIgnore
    public JsonNullable<Boolean> addTrackingParams() {
        return addTrackingParams;
    }

    /**
     * A list of custom tracking parameters. If an empty list is given and add_tracking_params is True, uses company defaults.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<TrackingOptionsCustomTrackingParams>> customTrackingParams() {
        return (JsonNullable<List<TrackingOptionsCustomTrackingParams>>) customTrackingParams;
    }

    /**
     * Whether the campaign is tracking click events. If not specified, uses company defaults.
     */
    @JsonIgnore
    public JsonNullable<Boolean> isTrackingClicks() {
        return isTrackingClicks;
    }

    /**
     * Whether the campaign is tracking open events. If not specified, uses company defaults.
     */
    @JsonIgnore
    public JsonNullable<Boolean> isTrackingOpens() {
        return isTrackingOpens;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Whether the campaign needs custom tracking parameters. If set to False, tracking params will not be used.
     */
    public TrackingOptionsEmailTrackingOptionsSubObject withAddTrackingParams(boolean addTrackingParams) {
        Utils.checkNotNull(addTrackingParams, "addTrackingParams");
        this.addTrackingParams = JsonNullable.of(addTrackingParams);
        return this;
    }

    /**
     * Whether the campaign needs custom tracking parameters. If set to False, tracking params will not be used.
     */
    public TrackingOptionsEmailTrackingOptionsSubObject withAddTrackingParams(JsonNullable<Boolean> addTrackingParams) {
        Utils.checkNotNull(addTrackingParams, "addTrackingParams");
        this.addTrackingParams = addTrackingParams;
        return this;
    }

    /**
     * A list of custom tracking parameters. If an empty list is given and add_tracking_params is True, uses company defaults.
     */
    public TrackingOptionsEmailTrackingOptionsSubObject withCustomTrackingParams(List<TrackingOptionsCustomTrackingParams> customTrackingParams) {
        Utils.checkNotNull(customTrackingParams, "customTrackingParams");
        this.customTrackingParams = JsonNullable.of(customTrackingParams);
        return this;
    }

    /**
     * A list of custom tracking parameters. If an empty list is given and add_tracking_params is True, uses company defaults.
     */
    public TrackingOptionsEmailTrackingOptionsSubObject withCustomTrackingParams(JsonNullable<? extends List<TrackingOptionsCustomTrackingParams>> customTrackingParams) {
        Utils.checkNotNull(customTrackingParams, "customTrackingParams");
        this.customTrackingParams = customTrackingParams;
        return this;
    }

    /**
     * Whether the campaign is tracking click events. If not specified, uses company defaults.
     */
    public TrackingOptionsEmailTrackingOptionsSubObject withIsTrackingClicks(boolean isTrackingClicks) {
        Utils.checkNotNull(isTrackingClicks, "isTrackingClicks");
        this.isTrackingClicks = JsonNullable.of(isTrackingClicks);
        return this;
    }

    /**
     * Whether the campaign is tracking click events. If not specified, uses company defaults.
     */
    public TrackingOptionsEmailTrackingOptionsSubObject withIsTrackingClicks(JsonNullable<Boolean> isTrackingClicks) {
        Utils.checkNotNull(isTrackingClicks, "isTrackingClicks");
        this.isTrackingClicks = isTrackingClicks;
        return this;
    }

    /**
     * Whether the campaign is tracking open events. If not specified, uses company defaults.
     */
    public TrackingOptionsEmailTrackingOptionsSubObject withIsTrackingOpens(boolean isTrackingOpens) {
        Utils.checkNotNull(isTrackingOpens, "isTrackingOpens");
        this.isTrackingOpens = JsonNullable.of(isTrackingOpens);
        return this;
    }

    /**
     * Whether the campaign is tracking open events. If not specified, uses company defaults.
     */
    public TrackingOptionsEmailTrackingOptionsSubObject withIsTrackingOpens(JsonNullable<Boolean> isTrackingOpens) {
        Utils.checkNotNull(isTrackingOpens, "isTrackingOpens");
        this.isTrackingOpens = isTrackingOpens;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TrackingOptionsEmailTrackingOptionsSubObject other = (TrackingOptionsEmailTrackingOptionsSubObject) o;
        return 
            Objects.deepEquals(this.addTrackingParams, other.addTrackingParams) &&
            Objects.deepEquals(this.customTrackingParams, other.customTrackingParams) &&
            Objects.deepEquals(this.isTrackingClicks, other.isTrackingClicks) &&
            Objects.deepEquals(this.isTrackingOpens, other.isTrackingOpens);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            addTrackingParams,
            customTrackingParams,
            isTrackingClicks,
            isTrackingOpens);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TrackingOptionsEmailTrackingOptionsSubObject.class,
                "addTrackingParams", addTrackingParams,
                "customTrackingParams", customTrackingParams,
                "isTrackingClicks", isTrackingClicks,
                "isTrackingOpens", isTrackingOpens);
    }
    
    public final static class Builder {
 
        private JsonNullable<Boolean> addTrackingParams = JsonNullable.undefined();
 
        private JsonNullable<? extends List<TrackingOptionsCustomTrackingParams>> customTrackingParams = JsonNullable.undefined();
 
        private JsonNullable<Boolean> isTrackingClicks = JsonNullable.undefined();
 
        private JsonNullable<Boolean> isTrackingOpens = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether the campaign needs custom tracking parameters. If set to False, tracking params will not be used.
         */
        public Builder addTrackingParams(boolean addTrackingParams) {
            Utils.checkNotNull(addTrackingParams, "addTrackingParams");
            this.addTrackingParams = JsonNullable.of(addTrackingParams);
            return this;
        }

        /**
         * Whether the campaign needs custom tracking parameters. If set to False, tracking params will not be used.
         */
        public Builder addTrackingParams(JsonNullable<Boolean> addTrackingParams) {
            Utils.checkNotNull(addTrackingParams, "addTrackingParams");
            this.addTrackingParams = addTrackingParams;
            return this;
        }

        /**
         * A list of custom tracking parameters. If an empty list is given and add_tracking_params is True, uses company defaults.
         */
        public Builder customTrackingParams(List<TrackingOptionsCustomTrackingParams> customTrackingParams) {
            Utils.checkNotNull(customTrackingParams, "customTrackingParams");
            this.customTrackingParams = JsonNullable.of(customTrackingParams);
            return this;
        }

        /**
         * A list of custom tracking parameters. If an empty list is given and add_tracking_params is True, uses company defaults.
         */
        public Builder customTrackingParams(JsonNullable<? extends List<TrackingOptionsCustomTrackingParams>> customTrackingParams) {
            Utils.checkNotNull(customTrackingParams, "customTrackingParams");
            this.customTrackingParams = customTrackingParams;
            return this;
        }

        /**
         * Whether the campaign is tracking click events. If not specified, uses company defaults.
         */
        public Builder isTrackingClicks(boolean isTrackingClicks) {
            Utils.checkNotNull(isTrackingClicks, "isTrackingClicks");
            this.isTrackingClicks = JsonNullable.of(isTrackingClicks);
            return this;
        }

        /**
         * Whether the campaign is tracking click events. If not specified, uses company defaults.
         */
        public Builder isTrackingClicks(JsonNullable<Boolean> isTrackingClicks) {
            Utils.checkNotNull(isTrackingClicks, "isTrackingClicks");
            this.isTrackingClicks = isTrackingClicks;
            return this;
        }

        /**
         * Whether the campaign is tracking open events. If not specified, uses company defaults.
         */
        public Builder isTrackingOpens(boolean isTrackingOpens) {
            Utils.checkNotNull(isTrackingOpens, "isTrackingOpens");
            this.isTrackingOpens = JsonNullable.of(isTrackingOpens);
            return this;
        }

        /**
         * Whether the campaign is tracking open events. If not specified, uses company defaults.
         */
        public Builder isTrackingOpens(JsonNullable<Boolean> isTrackingOpens) {
            Utils.checkNotNull(isTrackingOpens, "isTrackingOpens");
            this.isTrackingOpens = isTrackingOpens;
            return this;
        }
        
        public TrackingOptionsEmailTrackingOptionsSubObject build() {
            return new TrackingOptionsEmailTrackingOptionsSubObject(
                addTrackingParams,
                customTrackingParams,
                isTrackingClicks,
                isTrackingOpens);
        }
    }
}

