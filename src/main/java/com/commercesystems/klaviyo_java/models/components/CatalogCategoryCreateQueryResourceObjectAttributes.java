/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.LazySingletonValue;
import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class CatalogCategoryCreateQueryResourceObjectAttributes {

    /**
     * The ID of the catalog category in an external system.
     */
    @JsonProperty("external_id")
    private String externalId;

    /**
     * The name of the catalog category.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The integration type. Currently only "$custom" is supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integration_type")
    private JsonNullable<? extends CatalogCategoryCreateQueryResourceObjectIntegrationType> integrationType;

    /**
     * The type of catalog. Currently only "$default" is supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalog_type")
    private JsonNullable<String> catalogType;

    @JsonCreator
    public CatalogCategoryCreateQueryResourceObjectAttributes(
            @JsonProperty("external_id") String externalId,
            @JsonProperty("name") String name,
            @JsonProperty("integration_type") JsonNullable<? extends CatalogCategoryCreateQueryResourceObjectIntegrationType> integrationType,
            @JsonProperty("catalog_type") JsonNullable<String> catalogType) {
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(integrationType, "integrationType");
        Utils.checkNotNull(catalogType, "catalogType");
        this.externalId = externalId;
        this.name = name;
        this.integrationType = integrationType;
        this.catalogType = catalogType;
    }
    
    public CatalogCategoryCreateQueryResourceObjectAttributes(
            String externalId,
            String name) {
        this(externalId, name, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The ID of the catalog category in an external system.
     */
    @JsonIgnore
    public String externalId() {
        return externalId;
    }

    /**
     * The name of the catalog category.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The integration type. Currently only "$custom" is supported.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CatalogCategoryCreateQueryResourceObjectIntegrationType> integrationType() {
        return (JsonNullable<CatalogCategoryCreateQueryResourceObjectIntegrationType>) integrationType;
    }

    /**
     * The type of catalog. Currently only "$default" is supported.
     */
    @JsonIgnore
    public JsonNullable<String> catalogType() {
        return catalogType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the catalog category in an external system.
     */
    public CatalogCategoryCreateQueryResourceObjectAttributes withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * The name of the catalog category.
     */
    public CatalogCategoryCreateQueryResourceObjectAttributes withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The integration type. Currently only "$custom" is supported.
     */
    public CatalogCategoryCreateQueryResourceObjectAttributes withIntegrationType(CatalogCategoryCreateQueryResourceObjectIntegrationType integrationType) {
        Utils.checkNotNull(integrationType, "integrationType");
        this.integrationType = JsonNullable.of(integrationType);
        return this;
    }

    /**
     * The integration type. Currently only "$custom" is supported.
     */
    public CatalogCategoryCreateQueryResourceObjectAttributes withIntegrationType(JsonNullable<? extends CatalogCategoryCreateQueryResourceObjectIntegrationType> integrationType) {
        Utils.checkNotNull(integrationType, "integrationType");
        this.integrationType = integrationType;
        return this;
    }

    /**
     * The type of catalog. Currently only "$default" is supported.
     */
    public CatalogCategoryCreateQueryResourceObjectAttributes withCatalogType(String catalogType) {
        Utils.checkNotNull(catalogType, "catalogType");
        this.catalogType = JsonNullable.of(catalogType);
        return this;
    }

    /**
     * The type of catalog. Currently only "$default" is supported.
     */
    public CatalogCategoryCreateQueryResourceObjectAttributes withCatalogType(JsonNullable<String> catalogType) {
        Utils.checkNotNull(catalogType, "catalogType");
        this.catalogType = catalogType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CatalogCategoryCreateQueryResourceObjectAttributes other = (CatalogCategoryCreateQueryResourceObjectAttributes) o;
        return 
            Objects.deepEquals(this.externalId, other.externalId) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.integrationType, other.integrationType) &&
            Objects.deepEquals(this.catalogType, other.catalogType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            externalId,
            name,
            integrationType,
            catalogType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CatalogCategoryCreateQueryResourceObjectAttributes.class,
                "externalId", externalId,
                "name", name,
                "integrationType", integrationType,
                "catalogType", catalogType);
    }
    
    public final static class Builder {
 
        private String externalId;
 
        private String name;
 
        private JsonNullable<? extends CatalogCategoryCreateQueryResourceObjectIntegrationType> integrationType;
 
        private JsonNullable<String> catalogType;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the catalog category in an external system.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }

        /**
         * The name of the catalog category.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The integration type. Currently only "$custom" is supported.
         */
        public Builder integrationType(CatalogCategoryCreateQueryResourceObjectIntegrationType integrationType) {
            Utils.checkNotNull(integrationType, "integrationType");
            this.integrationType = JsonNullable.of(integrationType);
            return this;
        }

        /**
         * The integration type. Currently only "$custom" is supported.
         */
        public Builder integrationType(JsonNullable<? extends CatalogCategoryCreateQueryResourceObjectIntegrationType> integrationType) {
            Utils.checkNotNull(integrationType, "integrationType");
            this.integrationType = integrationType;
            return this;
        }

        /**
         * The type of catalog. Currently only "$default" is supported.
         */
        public Builder catalogType(String catalogType) {
            Utils.checkNotNull(catalogType, "catalogType");
            this.catalogType = JsonNullable.of(catalogType);
            return this;
        }

        /**
         * The type of catalog. Currently only "$default" is supported.
         */
        public Builder catalogType(JsonNullable<String> catalogType) {
            Utils.checkNotNull(catalogType, "catalogType");
            this.catalogType = catalogType;
            return this;
        }
        
        public CatalogCategoryCreateQueryResourceObjectAttributes build() {
            if (integrationType == null) {
                integrationType = _SINGLETON_VALUE_IntegrationType.value();
            }
            if (catalogType == null) {
                catalogType = _SINGLETON_VALUE_CatalogType.value();
            }            return new CatalogCategoryCreateQueryResourceObjectAttributes(
                externalId,
                name,
                integrationType,
                catalogType);
        }

        private static final LazySingletonValue<JsonNullable<? extends CatalogCategoryCreateQueryResourceObjectIntegrationType>> _SINGLETON_VALUE_IntegrationType =
                new LazySingletonValue<>(
                        "integration_type",
                        "\"$custom\"",
                        new TypeReference<JsonNullable<? extends CatalogCategoryCreateQueryResourceObjectIntegrationType>>() {});

        private static final LazySingletonValue<JsonNullable<String>> _SINGLETON_VALUE_CatalogType =
                new LazySingletonValue<>(
                        "catalog_type",
                        "\"$default\"",
                        new TypeReference<JsonNullable<String>>() {});
    }
}

