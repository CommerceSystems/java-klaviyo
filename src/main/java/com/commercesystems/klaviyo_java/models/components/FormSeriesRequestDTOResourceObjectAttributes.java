/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class FormSeriesRequestDTOResourceObjectAttributes {

    /**
     * List of statistics to query for. All rate statistics will be returned in fractional form [0.0, 1.0]
     */
    @JsonProperty("statistics")
    private List<FormSeriesRequestDTOResourceObjectStatistics> statistics;

    /**
     * The timeframe to query for data within. The max length a timeframe can be is 1 year
     */
    @JsonProperty("timeframe")
    private FormSeriesRequestDTOResourceObjectTimeframe timeframe;

    /**
     * The interval used to aggregate data within the series request.
     * If hourly is used, the timeframe cannot be longer than 7 days.
     * If daily is used, the timeframe cannot be longer than 60 days.
     * If monthly is used, the timeframe cannot be longer than 52 weeks.
     */
    @JsonProperty("interval")
    private FormSeriesRequestDTOResourceObjectInterval interval;

    /**
     * List of attributes to group the data by.
     * Allowed group-bys are form_id, form_version_id.
     * If not passed in, the data will be grouped by form_id.
     * If a group by has prerequisites, they must be passed in together. The prerequisites for form_version_id is form_id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_by")
    private JsonNullable<? extends List<FormSeriesRequestDTOResourceObjectGroupBy>> groupBy;

    /**
     * API filter string used to filter the query.
     * Allowed filters are form_id, form_version_id.
     * Allowed operators are equals, any.
     * Only one filter can be used per attribute, only AND can be used as a combination operator.
     * Max of 100 messages per ANY filter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filter")
    private JsonNullable<String> filter;

    @JsonCreator
    public FormSeriesRequestDTOResourceObjectAttributes(
            @JsonProperty("statistics") List<FormSeriesRequestDTOResourceObjectStatistics> statistics,
            @JsonProperty("timeframe") FormSeriesRequestDTOResourceObjectTimeframe timeframe,
            @JsonProperty("interval") FormSeriesRequestDTOResourceObjectInterval interval,
            @JsonProperty("group_by") JsonNullable<? extends List<FormSeriesRequestDTOResourceObjectGroupBy>> groupBy,
            @JsonProperty("filter") JsonNullable<String> filter) {
        Utils.checkNotNull(statistics, "statistics");
        Utils.checkNotNull(timeframe, "timeframe");
        Utils.checkNotNull(interval, "interval");
        Utils.checkNotNull(groupBy, "groupBy");
        Utils.checkNotNull(filter, "filter");
        this.statistics = statistics;
        this.timeframe = timeframe;
        this.interval = interval;
        this.groupBy = groupBy;
        this.filter = filter;
    }
    
    public FormSeriesRequestDTOResourceObjectAttributes(
            List<FormSeriesRequestDTOResourceObjectStatistics> statistics,
            FormSeriesRequestDTOResourceObjectTimeframe timeframe,
            FormSeriesRequestDTOResourceObjectInterval interval) {
        this(statistics, timeframe, interval, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * List of statistics to query for. All rate statistics will be returned in fractional form [0.0, 1.0]
     */
    @JsonIgnore
    public List<FormSeriesRequestDTOResourceObjectStatistics> statistics() {
        return statistics;
    }

    /**
     * The timeframe to query for data within. The max length a timeframe can be is 1 year
     */
    @JsonIgnore
    public FormSeriesRequestDTOResourceObjectTimeframe timeframe() {
        return timeframe;
    }

    /**
     * The interval used to aggregate data within the series request.
     * If hourly is used, the timeframe cannot be longer than 7 days.
     * If daily is used, the timeframe cannot be longer than 60 days.
     * If monthly is used, the timeframe cannot be longer than 52 weeks.
     */
    @JsonIgnore
    public FormSeriesRequestDTOResourceObjectInterval interval() {
        return interval;
    }

    /**
     * List of attributes to group the data by.
     * Allowed group-bys are form_id, form_version_id.
     * If not passed in, the data will be grouped by form_id.
     * If a group by has prerequisites, they must be passed in together. The prerequisites for form_version_id is form_id
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<FormSeriesRequestDTOResourceObjectGroupBy>> groupBy() {
        return (JsonNullable<List<FormSeriesRequestDTOResourceObjectGroupBy>>) groupBy;
    }

    /**
     * API filter string used to filter the query.
     * Allowed filters are form_id, form_version_id.
     * Allowed operators are equals, any.
     * Only one filter can be used per attribute, only AND can be used as a combination operator.
     * Max of 100 messages per ANY filter.
     */
    @JsonIgnore
    public JsonNullable<String> filter() {
        return filter;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * List of statistics to query for. All rate statistics will be returned in fractional form [0.0, 1.0]
     */
    public FormSeriesRequestDTOResourceObjectAttributes withStatistics(List<FormSeriesRequestDTOResourceObjectStatistics> statistics) {
        Utils.checkNotNull(statistics, "statistics");
        this.statistics = statistics;
        return this;
    }

    /**
     * The timeframe to query for data within. The max length a timeframe can be is 1 year
     */
    public FormSeriesRequestDTOResourceObjectAttributes withTimeframe(FormSeriesRequestDTOResourceObjectTimeframe timeframe) {
        Utils.checkNotNull(timeframe, "timeframe");
        this.timeframe = timeframe;
        return this;
    }

    /**
     * The interval used to aggregate data within the series request.
     * If hourly is used, the timeframe cannot be longer than 7 days.
     * If daily is used, the timeframe cannot be longer than 60 days.
     * If monthly is used, the timeframe cannot be longer than 52 weeks.
     */
    public FormSeriesRequestDTOResourceObjectAttributes withInterval(FormSeriesRequestDTOResourceObjectInterval interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = interval;
        return this;
    }

    /**
     * List of attributes to group the data by.
     * Allowed group-bys are form_id, form_version_id.
     * If not passed in, the data will be grouped by form_id.
     * If a group by has prerequisites, they must be passed in together. The prerequisites for form_version_id is form_id
     */
    public FormSeriesRequestDTOResourceObjectAttributes withGroupBy(List<FormSeriesRequestDTOResourceObjectGroupBy> groupBy) {
        Utils.checkNotNull(groupBy, "groupBy");
        this.groupBy = JsonNullable.of(groupBy);
        return this;
    }

    /**
     * List of attributes to group the data by.
     * Allowed group-bys are form_id, form_version_id.
     * If not passed in, the data will be grouped by form_id.
     * If a group by has prerequisites, they must be passed in together. The prerequisites for form_version_id is form_id
     */
    public FormSeriesRequestDTOResourceObjectAttributes withGroupBy(JsonNullable<? extends List<FormSeriesRequestDTOResourceObjectGroupBy>> groupBy) {
        Utils.checkNotNull(groupBy, "groupBy");
        this.groupBy = groupBy;
        return this;
    }

    /**
     * API filter string used to filter the query.
     * Allowed filters are form_id, form_version_id.
     * Allowed operators are equals, any.
     * Only one filter can be used per attribute, only AND can be used as a combination operator.
     * Max of 100 messages per ANY filter.
     */
    public FormSeriesRequestDTOResourceObjectAttributes withFilter(String filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = JsonNullable.of(filter);
        return this;
    }

    /**
     * API filter string used to filter the query.
     * Allowed filters are form_id, form_version_id.
     * Allowed operators are equals, any.
     * Only one filter can be used per attribute, only AND can be used as a combination operator.
     * Max of 100 messages per ANY filter.
     */
    public FormSeriesRequestDTOResourceObjectAttributes withFilter(JsonNullable<String> filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = filter;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FormSeriesRequestDTOResourceObjectAttributes other = (FormSeriesRequestDTOResourceObjectAttributes) o;
        return 
            Objects.deepEquals(this.statistics, other.statistics) &&
            Objects.deepEquals(this.timeframe, other.timeframe) &&
            Objects.deepEquals(this.interval, other.interval) &&
            Objects.deepEquals(this.groupBy, other.groupBy) &&
            Objects.deepEquals(this.filter, other.filter);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            statistics,
            timeframe,
            interval,
            groupBy,
            filter);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FormSeriesRequestDTOResourceObjectAttributes.class,
                "statistics", statistics,
                "timeframe", timeframe,
                "interval", interval,
                "groupBy", groupBy,
                "filter", filter);
    }
    
    public final static class Builder {
 
        private List<FormSeriesRequestDTOResourceObjectStatistics> statistics;
 
        private FormSeriesRequestDTOResourceObjectTimeframe timeframe;
 
        private FormSeriesRequestDTOResourceObjectInterval interval;
 
        private JsonNullable<? extends List<FormSeriesRequestDTOResourceObjectGroupBy>> groupBy = JsonNullable.undefined();
 
        private JsonNullable<String> filter = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of statistics to query for. All rate statistics will be returned in fractional form [0.0, 1.0]
         */
        public Builder statistics(List<FormSeriesRequestDTOResourceObjectStatistics> statistics) {
            Utils.checkNotNull(statistics, "statistics");
            this.statistics = statistics;
            return this;
        }

        /**
         * The timeframe to query for data within. The max length a timeframe can be is 1 year
         */
        public Builder timeframe(FormSeriesRequestDTOResourceObjectTimeframe timeframe) {
            Utils.checkNotNull(timeframe, "timeframe");
            this.timeframe = timeframe;
            return this;
        }

        /**
         * The interval used to aggregate data within the series request.
         * If hourly is used, the timeframe cannot be longer than 7 days.
         * If daily is used, the timeframe cannot be longer than 60 days.
         * If monthly is used, the timeframe cannot be longer than 52 weeks.
         */
        public Builder interval(FormSeriesRequestDTOResourceObjectInterval interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = interval;
            return this;
        }

        /**
         * List of attributes to group the data by.
         * Allowed group-bys are form_id, form_version_id.
         * If not passed in, the data will be grouped by form_id.
         * If a group by has prerequisites, they must be passed in together. The prerequisites for form_version_id is form_id
         */
        public Builder groupBy(List<FormSeriesRequestDTOResourceObjectGroupBy> groupBy) {
            Utils.checkNotNull(groupBy, "groupBy");
            this.groupBy = JsonNullable.of(groupBy);
            return this;
        }

        /**
         * List of attributes to group the data by.
         * Allowed group-bys are form_id, form_version_id.
         * If not passed in, the data will be grouped by form_id.
         * If a group by has prerequisites, they must be passed in together. The prerequisites for form_version_id is form_id
         */
        public Builder groupBy(JsonNullable<? extends List<FormSeriesRequestDTOResourceObjectGroupBy>> groupBy) {
            Utils.checkNotNull(groupBy, "groupBy");
            this.groupBy = groupBy;
            return this;
        }

        /**
         * API filter string used to filter the query.
         * Allowed filters are form_id, form_version_id.
         * Allowed operators are equals, any.
         * Only one filter can be used per attribute, only AND can be used as a combination operator.
         * Max of 100 messages per ANY filter.
         */
        public Builder filter(String filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = JsonNullable.of(filter);
            return this;
        }

        /**
         * API filter string used to filter the query.
         * Allowed filters are form_id, form_version_id.
         * Allowed operators are equals, any.
         * Only one filter can be used per attribute, only AND can be used as a combination operator.
         * Max of 100 messages per ANY filter.
         */
        public Builder filter(JsonNullable<String> filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = filter;
            return this;
        }
        
        public FormSeriesRequestDTOResourceObjectAttributes build() {
            return new FormSeriesRequestDTOResourceObjectAttributes(
                statistics,
                timeframe,
                interval,
                groupBy,
                filter);
        }
    }
}

