/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class SMSChannelWithTransactional {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketing")
    private Optional<? extends SMSMarketing> marketing;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactional")
    private Optional<? extends SMSTransactional> transactional;

    @JsonCreator
    public SMSChannelWithTransactional(
            @JsonProperty("marketing") Optional<? extends SMSMarketing> marketing,
            @JsonProperty("transactional") Optional<? extends SMSTransactional> transactional) {
        Utils.checkNotNull(marketing, "marketing");
        Utils.checkNotNull(transactional, "transactional");
        this.marketing = marketing;
        this.transactional = transactional;
    }
    
    public SMSChannelWithTransactional() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SMSMarketing> marketing() {
        return (Optional<SMSMarketing>) marketing;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SMSTransactional> transactional() {
        return (Optional<SMSTransactional>) transactional;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SMSChannelWithTransactional withMarketing(SMSMarketing marketing) {
        Utils.checkNotNull(marketing, "marketing");
        this.marketing = Optional.ofNullable(marketing);
        return this;
    }

    public SMSChannelWithTransactional withMarketing(Optional<? extends SMSMarketing> marketing) {
        Utils.checkNotNull(marketing, "marketing");
        this.marketing = marketing;
        return this;
    }

    public SMSChannelWithTransactional withTransactional(SMSTransactional transactional) {
        Utils.checkNotNull(transactional, "transactional");
        this.transactional = Optional.ofNullable(transactional);
        return this;
    }

    public SMSChannelWithTransactional withTransactional(Optional<? extends SMSTransactional> transactional) {
        Utils.checkNotNull(transactional, "transactional");
        this.transactional = transactional;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SMSChannelWithTransactional other = (SMSChannelWithTransactional) o;
        return 
            Objects.deepEquals(this.marketing, other.marketing) &&
            Objects.deepEquals(this.transactional, other.transactional);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            marketing,
            transactional);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SMSChannelWithTransactional.class,
                "marketing", marketing,
                "transactional", transactional);
    }
    
    public final static class Builder {
 
        private Optional<? extends SMSMarketing> marketing = Optional.empty();
 
        private Optional<? extends SMSTransactional> transactional = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder marketing(SMSMarketing marketing) {
            Utils.checkNotNull(marketing, "marketing");
            this.marketing = Optional.ofNullable(marketing);
            return this;
        }

        public Builder marketing(Optional<? extends SMSMarketing> marketing) {
            Utils.checkNotNull(marketing, "marketing");
            this.marketing = marketing;
            return this;
        }

        public Builder transactional(SMSTransactional transactional) {
            Utils.checkNotNull(transactional, "transactional");
            this.transactional = Optional.ofNullable(transactional);
            return this;
        }

        public Builder transactional(Optional<? extends SMSTransactional> transactional) {
            Utils.checkNotNull(transactional, "transactional");
            this.transactional = transactional;
            return this;
        }
        
        public SMSChannelWithTransactional build() {
            return new SMSChannelWithTransactional(
                marketing,
                transactional);
        }
    }
}

