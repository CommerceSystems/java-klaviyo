/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class GetFlowActionResponseRelationships {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flow")
    private Optional<? extends GetFlowActionResponseFlow> flow;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flow-messages")
    private Optional<? extends GetFlowActionResponseFlowMessages> flowMessages;

    @JsonCreator
    public GetFlowActionResponseRelationships(
            @JsonProperty("flow") Optional<? extends GetFlowActionResponseFlow> flow,
            @JsonProperty("flow-messages") Optional<? extends GetFlowActionResponseFlowMessages> flowMessages) {
        Utils.checkNotNull(flow, "flow");
        Utils.checkNotNull(flowMessages, "flowMessages");
        this.flow = flow;
        this.flowMessages = flowMessages;
    }
    
    public GetFlowActionResponseRelationships() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetFlowActionResponseFlow> flow() {
        return (Optional<GetFlowActionResponseFlow>) flow;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetFlowActionResponseFlowMessages> flowMessages() {
        return (Optional<GetFlowActionResponseFlowMessages>) flowMessages;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetFlowActionResponseRelationships withFlow(GetFlowActionResponseFlow flow) {
        Utils.checkNotNull(flow, "flow");
        this.flow = Optional.ofNullable(flow);
        return this;
    }

    public GetFlowActionResponseRelationships withFlow(Optional<? extends GetFlowActionResponseFlow> flow) {
        Utils.checkNotNull(flow, "flow");
        this.flow = flow;
        return this;
    }

    public GetFlowActionResponseRelationships withFlowMessages(GetFlowActionResponseFlowMessages flowMessages) {
        Utils.checkNotNull(flowMessages, "flowMessages");
        this.flowMessages = Optional.ofNullable(flowMessages);
        return this;
    }

    public GetFlowActionResponseRelationships withFlowMessages(Optional<? extends GetFlowActionResponseFlowMessages> flowMessages) {
        Utils.checkNotNull(flowMessages, "flowMessages");
        this.flowMessages = flowMessages;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetFlowActionResponseRelationships other = (GetFlowActionResponseRelationships) o;
        return 
            Objects.deepEquals(this.flow, other.flow) &&
            Objects.deepEquals(this.flowMessages, other.flowMessages);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            flow,
            flowMessages);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetFlowActionResponseRelationships.class,
                "flow", flow,
                "flowMessages", flowMessages);
    }
    
    public final static class Builder {
 
        private Optional<? extends GetFlowActionResponseFlow> flow = Optional.empty();
 
        private Optional<? extends GetFlowActionResponseFlowMessages> flowMessages = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder flow(GetFlowActionResponseFlow flow) {
            Utils.checkNotNull(flow, "flow");
            this.flow = Optional.ofNullable(flow);
            return this;
        }

        public Builder flow(Optional<? extends GetFlowActionResponseFlow> flow) {
            Utils.checkNotNull(flow, "flow");
            this.flow = flow;
            return this;
        }

        public Builder flowMessages(GetFlowActionResponseFlowMessages flowMessages) {
            Utils.checkNotNull(flowMessages, "flowMessages");
            this.flowMessages = Optional.ofNullable(flowMessages);
            return this;
        }

        public Builder flowMessages(Optional<? extends GetFlowActionResponseFlowMessages> flowMessages) {
            Utils.checkNotNull(flowMessages, "flowMessages");
            this.flowMessages = flowMessages;
            return this;
        }
        
        public GetFlowActionResponseRelationships build() {
            return new GetFlowActionResponseRelationships(
                flow,
                flowMessages);
        }
    }
}

