/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class HTMLBlockData {

    @JsonProperty("content")
    private String content;

    @JsonProperty("display_options")
    private BlockDisplayOptions displayOptions;

    @JsonCreator
    public HTMLBlockData(
            @JsonProperty("content") String content,
            @JsonProperty("display_options") BlockDisplayOptions displayOptions) {
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(displayOptions, "displayOptions");
        this.content = content;
        this.displayOptions = displayOptions;
    }

    @JsonIgnore
    public String content() {
        return content;
    }

    @JsonIgnore
    public BlockDisplayOptions displayOptions() {
        return displayOptions;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public HTMLBlockData withContent(String content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    public HTMLBlockData withDisplayOptions(BlockDisplayOptions displayOptions) {
        Utils.checkNotNull(displayOptions, "displayOptions");
        this.displayOptions = displayOptions;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HTMLBlockData other = (HTMLBlockData) o;
        return 
            Objects.deepEquals(this.content, other.content) &&
            Objects.deepEquals(this.displayOptions, other.displayOptions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            content,
            displayOptions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HTMLBlockData.class,
                "content", content,
                "displayOptions", displayOptions);
    }
    
    public final static class Builder {
 
        private String content;
 
        private BlockDisplayOptions displayOptions;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder content(String content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        public Builder displayOptions(BlockDisplayOptions displayOptions) {
            Utils.checkNotNull(displayOptions, "displayOptions");
            this.displayOptions = displayOptions;
            return this;
        }
        
        public HTMLBlockData build() {
            return new HTMLBlockData(
                content,
                displayOptions);
        }
    }
}

