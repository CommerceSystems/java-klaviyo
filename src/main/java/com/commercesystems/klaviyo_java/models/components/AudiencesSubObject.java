/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class AudiencesSubObject {

    /**
     * A list of included audiences
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("included")
    private JsonNullable<? extends List<String>> included;

    /**
     * An optional list of excluded audiences
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("excluded")
    private JsonNullable<? extends List<String>> excluded;

    @JsonCreator
    public AudiencesSubObject(
            @JsonProperty("included") JsonNullable<? extends List<String>> included,
            @JsonProperty("excluded") JsonNullable<? extends List<String>> excluded) {
        Utils.checkNotNull(included, "included");
        Utils.checkNotNull(excluded, "excluded");
        this.included = included;
        this.excluded = excluded;
    }
    
    public AudiencesSubObject() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A list of included audiences
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> included() {
        return (JsonNullable<List<String>>) included;
    }

    /**
     * An optional list of excluded audiences
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> excluded() {
        return (JsonNullable<List<String>>) excluded;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A list of included audiences
     */
    public AudiencesSubObject withIncluded(List<String> included) {
        Utils.checkNotNull(included, "included");
        this.included = JsonNullable.of(included);
        return this;
    }

    /**
     * A list of included audiences
     */
    public AudiencesSubObject withIncluded(JsonNullable<? extends List<String>> included) {
        Utils.checkNotNull(included, "included");
        this.included = included;
        return this;
    }

    /**
     * An optional list of excluded audiences
     */
    public AudiencesSubObject withExcluded(List<String> excluded) {
        Utils.checkNotNull(excluded, "excluded");
        this.excluded = JsonNullable.of(excluded);
        return this;
    }

    /**
     * An optional list of excluded audiences
     */
    public AudiencesSubObject withExcluded(JsonNullable<? extends List<String>> excluded) {
        Utils.checkNotNull(excluded, "excluded");
        this.excluded = excluded;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AudiencesSubObject other = (AudiencesSubObject) o;
        return 
            Objects.deepEquals(this.included, other.included) &&
            Objects.deepEquals(this.excluded, other.excluded);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            included,
            excluded);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AudiencesSubObject.class,
                "included", included,
                "excluded", excluded);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends List<String>> included = JsonNullable.undefined();
 
        private JsonNullable<? extends List<String>> excluded = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A list of included audiences
         */
        public Builder included(List<String> included) {
            Utils.checkNotNull(included, "included");
            this.included = JsonNullable.of(included);
            return this;
        }

        /**
         * A list of included audiences
         */
        public Builder included(JsonNullable<? extends List<String>> included) {
            Utils.checkNotNull(included, "included");
            this.included = included;
            return this;
        }

        /**
         * An optional list of excluded audiences
         */
        public Builder excluded(List<String> excluded) {
            Utils.checkNotNull(excluded, "excluded");
            this.excluded = JsonNullable.of(excluded);
            return this;
        }

        /**
         * An optional list of excluded audiences
         */
        public Builder excluded(JsonNullable<? extends List<String>> excluded) {
            Utils.checkNotNull(excluded, "excluded");
            this.excluded = excluded;
            return this;
        }
        
        public AudiencesSubObject build() {
            return new AudiencesSubObject(
                included,
                excluded);
        }
    }
}

