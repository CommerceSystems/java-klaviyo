/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java;

import com.commercesystems.klaviyo_java.models.components.CampaignValuesRequestDTO;
import com.commercesystems.klaviyo_java.models.components.FlowSeriesRequestDTO;
import com.commercesystems.klaviyo_java.models.components.FlowValuesRequestDTO;
import com.commercesystems.klaviyo_java.models.components.FormSeriesRequestDTO;
import com.commercesystems.klaviyo_java.models.components.FormValuesRequestDTO;
import com.commercesystems.klaviyo_java.models.components.PostCampaignValuesResponseDTO;
import com.commercesystems.klaviyo_java.models.components.PostFlowSeriesResponseDTO;
import com.commercesystems.klaviyo_java.models.components.PostFlowValuesResponseDTO;
import com.commercesystems.klaviyo_java.models.components.PostFormSeriesResponseDTO;
import com.commercesystems.klaviyo_java.models.components.PostFormValuesResponseDTO;
import com.commercesystems.klaviyo_java.models.components.PostSegmentSeriesResponseDTO;
import com.commercesystems.klaviyo_java.models.components.PostSegmentValuesResponseDTO;
import com.commercesystems.klaviyo_java.models.components.SegmentSeriesRequestDTO;
import com.commercesystems.klaviyo_java.models.components.SegmentValuesRequestDTO;
import com.commercesystems.klaviyo_java.models.errors.APIException;
import com.commercesystems.klaviyo_java.models.errors.ClientError;
import com.commercesystems.klaviyo_java.models.errors.ServerError;
import com.commercesystems.klaviyo_java.models.operations.QueryCampaignValuesRequest;
import com.commercesystems.klaviyo_java.models.operations.QueryCampaignValuesRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.QueryCampaignValuesResponse;
import com.commercesystems.klaviyo_java.models.operations.QueryFlowSeriesRequest;
import com.commercesystems.klaviyo_java.models.operations.QueryFlowSeriesRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.QueryFlowSeriesResponse;
import com.commercesystems.klaviyo_java.models.operations.QueryFlowValuesRequest;
import com.commercesystems.klaviyo_java.models.operations.QueryFlowValuesRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.QueryFlowValuesResponse;
import com.commercesystems.klaviyo_java.models.operations.QueryFormSeriesRequest;
import com.commercesystems.klaviyo_java.models.operations.QueryFormSeriesRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.QueryFormSeriesResponse;
import com.commercesystems.klaviyo_java.models.operations.QueryFormValuesRequest;
import com.commercesystems.klaviyo_java.models.operations.QueryFormValuesRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.QueryFormValuesResponse;
import com.commercesystems.klaviyo_java.models.operations.QuerySegmentSeriesRequest;
import com.commercesystems.klaviyo_java.models.operations.QuerySegmentSeriesRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.QuerySegmentSeriesResponse;
import com.commercesystems.klaviyo_java.models.operations.QuerySegmentValuesRequest;
import com.commercesystems.klaviyo_java.models.operations.QuerySegmentValuesRequestBuilder;
import com.commercesystems.klaviyo_java.models.operations.QuerySegmentValuesResponse;
import com.commercesystems.klaviyo_java.models.operations.SDKMethodInterfaces.*;
import com.commercesystems.klaviyo_java.utils.HTTPClient;
import com.commercesystems.klaviyo_java.utils.HTTPRequest;
import com.commercesystems.klaviyo_java.utils.Hook.AfterErrorContextImpl;
import com.commercesystems.klaviyo_java.utils.Hook.AfterSuccessContextImpl;
import com.commercesystems.klaviyo_java.utils.Hook.BeforeRequestContextImpl;
import com.commercesystems.klaviyo_java.utils.SerializedBody;
import com.commercesystems.klaviyo_java.utils.Utils.JsonShape;
import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional; 

/**
 * reporting
 */
public class Reporting implements
            MethodCallQueryCampaignValues,
            MethodCallQueryFlowValues,
            MethodCallQueryFlowSeries,
            MethodCallQueryFormValues,
            MethodCallQueryFormSeries,
            MethodCallQuerySegmentValues,
            MethodCallQuerySegmentSeries {

    private final SDKConfiguration sdkConfiguration;

    Reporting(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Query Campaign Values
     * Returns the requested campaign analytics values data&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `2/m`&lt;br&gt;Daily: `225/d`
     * 
     * **Scopes:**
     * `campaigns:read`
     * @return The call builder
     */
    public QueryCampaignValuesRequestBuilder queryCampaignValues() {
        return new QueryCampaignValuesRequestBuilder(this);
    }

    /**
     * Query Campaign Values
     * Returns the requested campaign analytics values data&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `2/m`&lt;br&gt;Daily: `225/d`
     * 
     * **Scopes:**
     * `campaigns:read`
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param campaignValuesRequestDTO
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public QueryCampaignValuesResponse queryCampaignValues(
            String revision,
            CampaignValuesRequestDTO campaignValuesRequestDTO) throws Exception {
        return queryCampaignValues(Optional.empty(), revision, campaignValuesRequestDTO);
    }
    
    /**
     * Query Campaign Values
     * Returns the requested campaign analytics values data&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `2/m`&lt;br&gt;Daily: `225/d`
     * 
     * **Scopes:**
     * `campaigns:read`
     * @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#pagination
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param campaignValuesRequestDTO
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public QueryCampaignValuesResponse queryCampaignValues(
            Optional<String> pageCursor,
            String revision,
            CampaignValuesRequestDTO campaignValuesRequestDTO) throws Exception {
        QueryCampaignValuesRequest request =
            QueryCampaignValuesRequest
                .builder()
                .pageCursor(pageCursor)
                .revision(revision)
                .campaignValuesRequestDTO(campaignValuesRequestDTO)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/campaign-values-reports");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "campaignValuesRequestDTO",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                QueryCampaignValuesRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "query_campaign_values", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "query_campaign_values",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "query_campaign_values",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "query_campaign_values",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        QueryCampaignValuesResponse.Builder _resBuilder = 
            QueryCampaignValuesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        QueryCampaignValuesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                PostCampaignValuesResponseDTO _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PostCampaignValuesResponseDTO>() {});
                _res.withPostCampaignValuesResponseDTO(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Query Flow Values
     * Returns the requested flow analytics values data&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `2/m`&lt;br&gt;Daily: `225/d`
     * 
     * **Scopes:**
     * `flows:read`
     * @return The call builder
     */
    public QueryFlowValuesRequestBuilder queryFlowValues() {
        return new QueryFlowValuesRequestBuilder(this);
    }

    /**
     * Query Flow Values
     * Returns the requested flow analytics values data&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `2/m`&lt;br&gt;Daily: `225/d`
     * 
     * **Scopes:**
     * `flows:read`
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param flowValuesRequestDTO
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public QueryFlowValuesResponse queryFlowValues(
            String revision,
            FlowValuesRequestDTO flowValuesRequestDTO) throws Exception {
        return queryFlowValues(Optional.empty(), revision, flowValuesRequestDTO);
    }
    
    /**
     * Query Flow Values
     * Returns the requested flow analytics values data&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `2/m`&lt;br&gt;Daily: `225/d`
     * 
     * **Scopes:**
     * `flows:read`
     * @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#pagination
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param flowValuesRequestDTO
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public QueryFlowValuesResponse queryFlowValues(
            Optional<String> pageCursor,
            String revision,
            FlowValuesRequestDTO flowValuesRequestDTO) throws Exception {
        QueryFlowValuesRequest request =
            QueryFlowValuesRequest
                .builder()
                .pageCursor(pageCursor)
                .revision(revision)
                .flowValuesRequestDTO(flowValuesRequestDTO)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/flow-values-reports");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "flowValuesRequestDTO",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                QueryFlowValuesRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "query_flow_values", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "query_flow_values",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "query_flow_values",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "query_flow_values",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        QueryFlowValuesResponse.Builder _resBuilder = 
            QueryFlowValuesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        QueryFlowValuesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                PostFlowValuesResponseDTO _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PostFlowValuesResponseDTO>() {});
                _res.withPostFlowValuesResponseDTO(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Query Flow Series
     * Returns the requested flow analytics series data&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `2/m`&lt;br&gt;Daily: `225/d`
     * 
     * **Scopes:**
     * `flows:read`
     * @return The call builder
     */
    public QueryFlowSeriesRequestBuilder queryFlowSeries() {
        return new QueryFlowSeriesRequestBuilder(this);
    }

    /**
     * Query Flow Series
     * Returns the requested flow analytics series data&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `2/m`&lt;br&gt;Daily: `225/d`
     * 
     * **Scopes:**
     * `flows:read`
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param flowSeriesRequestDTO
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public QueryFlowSeriesResponse queryFlowSeries(
            String revision,
            FlowSeriesRequestDTO flowSeriesRequestDTO) throws Exception {
        return queryFlowSeries(Optional.empty(), revision, flowSeriesRequestDTO);
    }
    
    /**
     * Query Flow Series
     * Returns the requested flow analytics series data&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `2/m`&lt;br&gt;Daily: `225/d`
     * 
     * **Scopes:**
     * `flows:read`
     * @param pageCursor For more information please visit https://developers.klaviyo.com/en/v2024-10-15/reference/api-overview#pagination
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param flowSeriesRequestDTO
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public QueryFlowSeriesResponse queryFlowSeries(
            Optional<String> pageCursor,
            String revision,
            FlowSeriesRequestDTO flowSeriesRequestDTO) throws Exception {
        QueryFlowSeriesRequest request =
            QueryFlowSeriesRequest
                .builder()
                .pageCursor(pageCursor)
                .revision(revision)
                .flowSeriesRequestDTO(flowSeriesRequestDTO)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/flow-series-reports");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "flowSeriesRequestDTO",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                QueryFlowSeriesRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "query_flow_series", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "query_flow_series",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "query_flow_series",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "query_flow_series",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        QueryFlowSeriesResponse.Builder _resBuilder = 
            QueryFlowSeriesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        QueryFlowSeriesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                PostFlowSeriesResponseDTO _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PostFlowSeriesResponseDTO>() {});
                _res.withPostFlowSeriesResponseDTO(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Query Form Values
     * Returns the requested form analytics values data.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `2/m`&lt;br&gt;Daily: `225/d`
     * 
     * **Scopes:**
     * `forms:read`
     * @return The call builder
     */
    public QueryFormValuesRequestBuilder queryFormValues() {
        return new QueryFormValuesRequestBuilder(this);
    }

    /**
     * Query Form Values
     * Returns the requested form analytics values data.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `2/m`&lt;br&gt;Daily: `225/d`
     * 
     * **Scopes:**
     * `forms:read`
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param formValuesRequestDTO
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public QueryFormValuesResponse queryFormValues(
            String revision,
            FormValuesRequestDTO formValuesRequestDTO) throws Exception {
        QueryFormValuesRequest request =
            QueryFormValuesRequest
                .builder()
                .revision(revision)
                .formValuesRequestDTO(formValuesRequestDTO)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/form-values-reports");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "formValuesRequestDTO",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "query_form_values", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "query_form_values",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "query_form_values",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "query_form_values",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        QueryFormValuesResponse.Builder _resBuilder = 
            QueryFormValuesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        QueryFormValuesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                PostFormValuesResponseDTO _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PostFormValuesResponseDTO>() {});
                _res.withPostFormValuesResponseDTO(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Query Form Series
     * Returns the requested form analytics series data.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `2/m`&lt;br&gt;Daily: `225/d`
     * 
     * **Scopes:**
     * `forms:read`
     * @return The call builder
     */
    public QueryFormSeriesRequestBuilder queryFormSeries() {
        return new QueryFormSeriesRequestBuilder(this);
    }

    /**
     * Query Form Series
     * Returns the requested form analytics series data.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `2/m`&lt;br&gt;Daily: `225/d`
     * 
     * **Scopes:**
     * `forms:read`
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param formSeriesRequestDTO
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public QueryFormSeriesResponse queryFormSeries(
            String revision,
            FormSeriesRequestDTO formSeriesRequestDTO) throws Exception {
        QueryFormSeriesRequest request =
            QueryFormSeriesRequest
                .builder()
                .revision(revision)
                .formSeriesRequestDTO(formSeriesRequestDTO)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/form-series-reports");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "formSeriesRequestDTO",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "query_form_series", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "query_form_series",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "query_form_series",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "query_form_series",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        QueryFormSeriesResponse.Builder _resBuilder = 
            QueryFormSeriesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        QueryFormSeriesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                PostFormSeriesResponseDTO _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PostFormSeriesResponseDTO>() {});
                _res.withPostFormSeriesResponseDTO(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Query Segment Values
     * Returns the requested segment analytics values data.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `2/m`&lt;br&gt;Daily: `225/d`
     * 
     * **Scopes:**
     * `segments:read`
     * @return The call builder
     */
    public QuerySegmentValuesRequestBuilder querySegmentValues() {
        return new QuerySegmentValuesRequestBuilder(this);
    }

    /**
     * Query Segment Values
     * Returns the requested segment analytics values data.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `2/m`&lt;br&gt;Daily: `225/d`
     * 
     * **Scopes:**
     * `segments:read`
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param segmentValuesRequestDTO
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public QuerySegmentValuesResponse querySegmentValues(
            String revision,
            SegmentValuesRequestDTO segmentValuesRequestDTO) throws Exception {
        QuerySegmentValuesRequest request =
            QuerySegmentValuesRequest
                .builder()
                .revision(revision)
                .segmentValuesRequestDTO(segmentValuesRequestDTO)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/segment-values-reports");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "segmentValuesRequestDTO",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "query_segment_values", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "query_segment_values",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "query_segment_values",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "query_segment_values",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        QuerySegmentValuesResponse.Builder _resBuilder = 
            QuerySegmentValuesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        QuerySegmentValuesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                PostSegmentValuesResponseDTO _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PostSegmentValuesResponseDTO>() {});
                _res.withPostSegmentValuesResponseDTO(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Query Segment Series
     * Returns the requested segment analytics series data.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `2/m`&lt;br&gt;Daily: `225/d`
     * 
     * **Scopes:**
     * `segments:read`
     * @return The call builder
     */
    public QuerySegmentSeriesRequestBuilder querySegmentSeries() {
        return new QuerySegmentSeriesRequestBuilder(this);
    }

    /**
     * Query Segment Series
     * Returns the requested segment analytics series data.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: `1/s`&lt;br&gt;Steady: `2/m`&lt;br&gt;Daily: `225/d`
     * 
     * **Scopes:**
     * `segments:read`
     * @param revision API endpoint revision (format: YYYY-MM-DD[.suffix])
     * @param segmentSeriesRequestDTO
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public QuerySegmentSeriesResponse querySegmentSeries(
            String revision,
            SegmentSeriesRequestDTO segmentSeriesRequestDTO) throws Exception {
        QuerySegmentSeriesRequest request =
            QuerySegmentSeriesRequest
                .builder()
                .revision(revision)
                .segmentSeriesRequestDTO(segmentSeriesRequestDTO)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/api/segment-series-reports");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "segmentSeriesRequestDTO",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/vnd.api+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "query_segment_series", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "query_segment_series",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "query_segment_series",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "query_segment_series",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        QuerySegmentSeriesResponse.Builder _resBuilder = 
            QuerySegmentSeriesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        QuerySegmentSeriesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                PostSegmentSeriesResponseDTO _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PostSegmentSeriesResponseDTO>() {});
                _res.withPostSegmentSeriesResponseDTO(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ClientError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ClientError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/vnd.api+json")) {
                ServerError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ServerError>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
