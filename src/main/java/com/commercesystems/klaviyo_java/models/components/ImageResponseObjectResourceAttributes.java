/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;


public class ImageResponseObjectResourceAttributes {

    @JsonProperty("name")
    private String name;

    @JsonProperty("image_url")
    private String imageUrl;

    @JsonProperty("format")
    private String format;

    @JsonProperty("size")
    private long size;

    @JsonProperty("hidden")
    private boolean hidden;

    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    @JsonCreator
    public ImageResponseObjectResourceAttributes(
            @JsonProperty("name") String name,
            @JsonProperty("image_url") String imageUrl,
            @JsonProperty("format") String format,
            @JsonProperty("size") long size,
            @JsonProperty("hidden") boolean hidden,
            @JsonProperty("updated_at") OffsetDateTime updatedAt) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(imageUrl, "imageUrl");
        Utils.checkNotNull(format, "format");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(hidden, "hidden");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.name = name;
        this.imageUrl = imageUrl;
        this.format = format;
        this.size = size;
        this.hidden = hidden;
        this.updatedAt = updatedAt;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public String imageUrl() {
        return imageUrl;
    }

    @JsonIgnore
    public String format() {
        return format;
    }

    @JsonIgnore
    public long size() {
        return size;
    }

    @JsonIgnore
    public boolean hidden() {
        return hidden;
    }

    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ImageResponseObjectResourceAttributes withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ImageResponseObjectResourceAttributes withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }

    public ImageResponseObjectResourceAttributes withFormat(String format) {
        Utils.checkNotNull(format, "format");
        this.format = format;
        return this;
    }

    public ImageResponseObjectResourceAttributes withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    public ImageResponseObjectResourceAttributes withHidden(boolean hidden) {
        Utils.checkNotNull(hidden, "hidden");
        this.hidden = hidden;
        return this;
    }

    public ImageResponseObjectResourceAttributes withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ImageResponseObjectResourceAttributes other = (ImageResponseObjectResourceAttributes) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.imageUrl, other.imageUrl) &&
            Objects.deepEquals(this.format, other.format) &&
            Objects.deepEquals(this.size, other.size) &&
            Objects.deepEquals(this.hidden, other.hidden) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            imageUrl,
            format,
            size,
            hidden,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ImageResponseObjectResourceAttributes.class,
                "name", name,
                "imageUrl", imageUrl,
                "format", format,
                "size", size,
                "hidden", hidden,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private String name;
 
        private String imageUrl;
 
        private String format;
 
        private Long size;
 
        private Boolean hidden;
 
        private OffsetDateTime updatedAt;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }

        public Builder format(String format) {
            Utils.checkNotNull(format, "format");
            this.format = format;
            return this;
        }

        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public Builder hidden(boolean hidden) {
            Utils.checkNotNull(hidden, "hidden");
            this.hidden = hidden;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public ImageResponseObjectResourceAttributes build() {
            return new ImageResponseObjectResourceAttributes(
                name,
                imageUrl,
                format,
                size,
                hidden,
                updatedAt);
        }
    }
}

