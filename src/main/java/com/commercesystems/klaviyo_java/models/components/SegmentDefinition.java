/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public class SegmentDefinition {

    @JsonProperty("condition_groups")
    private List<ConditionGroup> conditionGroups;

    @JsonCreator
    public SegmentDefinition(
            @JsonProperty("condition_groups") List<ConditionGroup> conditionGroups) {
        Utils.checkNotNull(conditionGroups, "conditionGroups");
        this.conditionGroups = conditionGroups;
    }

    @JsonIgnore
    public List<ConditionGroup> conditionGroups() {
        return conditionGroups;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SegmentDefinition withConditionGroups(List<ConditionGroup> conditionGroups) {
        Utils.checkNotNull(conditionGroups, "conditionGroups");
        this.conditionGroups = conditionGroups;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SegmentDefinition other = (SegmentDefinition) o;
        return 
            Objects.deepEquals(this.conditionGroups, other.conditionGroups);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            conditionGroups);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SegmentDefinition.class,
                "conditionGroups", conditionGroups);
    }
    
    public final static class Builder {
 
        private List<ConditionGroup> conditionGroups;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder conditionGroups(List<ConditionGroup> conditionGroups) {
            Utils.checkNotNull(conditionGroups, "conditionGroups");
            this.conditionGroups = conditionGroups;
            return this;
        }
        
        public SegmentDefinition build() {
            return new SegmentDefinition(
                conditionGroups);
        }
    }
}

