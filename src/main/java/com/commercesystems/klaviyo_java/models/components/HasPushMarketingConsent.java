/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class HasPushMarketingConsent {

    @JsonProperty("channel")
    private PushEnum channel;

    @JsonProperty("can_receive_marketing")
    private HasPushMarketingConsentCanReceiveMarketing canReceiveMarketing;

    @JsonProperty("consent_status")
    private HasPushMarketing consentStatus;

    @JsonCreator
    public HasPushMarketingConsent(
            @JsonProperty("channel") PushEnum channel,
            @JsonProperty("can_receive_marketing") HasPushMarketingConsentCanReceiveMarketing canReceiveMarketing,
            @JsonProperty("consent_status") HasPushMarketing consentStatus) {
        Utils.checkNotNull(channel, "channel");
        Utils.checkNotNull(canReceiveMarketing, "canReceiveMarketing");
        Utils.checkNotNull(consentStatus, "consentStatus");
        this.channel = channel;
        this.canReceiveMarketing = canReceiveMarketing;
        this.consentStatus = consentStatus;
    }

    @JsonIgnore
    public PushEnum channel() {
        return channel;
    }

    @JsonIgnore
    public HasPushMarketingConsentCanReceiveMarketing canReceiveMarketing() {
        return canReceiveMarketing;
    }

    @JsonIgnore
    public HasPushMarketing consentStatus() {
        return consentStatus;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public HasPushMarketingConsent withChannel(PushEnum channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = channel;
        return this;
    }

    public HasPushMarketingConsent withCanReceiveMarketing(HasPushMarketingConsentCanReceiveMarketing canReceiveMarketing) {
        Utils.checkNotNull(canReceiveMarketing, "canReceiveMarketing");
        this.canReceiveMarketing = canReceiveMarketing;
        return this;
    }

    public HasPushMarketingConsent withConsentStatus(HasPushMarketing consentStatus) {
        Utils.checkNotNull(consentStatus, "consentStatus");
        this.consentStatus = consentStatus;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HasPushMarketingConsent other = (HasPushMarketingConsent) o;
        return 
            Objects.deepEquals(this.channel, other.channel) &&
            Objects.deepEquals(this.canReceiveMarketing, other.canReceiveMarketing) &&
            Objects.deepEquals(this.consentStatus, other.consentStatus);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            channel,
            canReceiveMarketing,
            consentStatus);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HasPushMarketingConsent.class,
                "channel", channel,
                "canReceiveMarketing", canReceiveMarketing,
                "consentStatus", consentStatus);
    }
    
    public final static class Builder {
 
        private PushEnum channel;
 
        private HasPushMarketingConsentCanReceiveMarketing canReceiveMarketing;
 
        private HasPushMarketing consentStatus;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder channel(PushEnum channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = channel;
            return this;
        }

        public Builder canReceiveMarketing(HasPushMarketingConsentCanReceiveMarketing canReceiveMarketing) {
            Utils.checkNotNull(canReceiveMarketing, "canReceiveMarketing");
            this.canReceiveMarketing = canReceiveMarketing;
            return this;
        }

        public Builder consentStatus(HasPushMarketing consentStatus) {
            Utils.checkNotNull(consentStatus, "consentStatus");
            this.consentStatus = consentStatus;
            return this;
        }
        
        public HasPushMarketingConsent build() {
            return new HasPushMarketingConsent(
                channel,
                canReceiveMarketing,
                consentStatus);
        }
    }
}

