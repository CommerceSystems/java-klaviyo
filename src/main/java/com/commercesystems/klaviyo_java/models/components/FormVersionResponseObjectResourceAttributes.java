/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class FormVersionResponseObjectResourceAttributes {

    /**
     * The type of form.
     */
    @JsonProperty("form_type")
    private FormType formType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ab_test")
    private Optional<? extends FormVersionABTest> abTest;

    /**
     * Status of the form version. "live" means it's live on site.
     */
    @JsonProperty("status")
    private FormVersionResponseObjectResourceStatus status;

    /**
     * ISO8601 timestamp when the form version was created.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * ISO8601 timestamp when the form version was last updated.
     */
    @JsonProperty("updated_at")
    private OffsetDateTime updatedAt;

    @JsonCreator
    public FormVersionResponseObjectResourceAttributes(
            @JsonProperty("form_type") FormType formType,
            @JsonProperty("ab_test") Optional<? extends FormVersionABTest> abTest,
            @JsonProperty("status") FormVersionResponseObjectResourceStatus status,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("updated_at") OffsetDateTime updatedAt) {
        Utils.checkNotNull(formType, "formType");
        Utils.checkNotNull(abTest, "abTest");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.formType = formType;
        this.abTest = abTest;
        this.status = status;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public FormVersionResponseObjectResourceAttributes(
            FormType formType,
            FormVersionResponseObjectResourceStatus status,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt) {
        this(formType, Optional.empty(), status, createdAt, updatedAt);
    }

    /**
     * The type of form.
     */
    @JsonIgnore
    public FormType formType() {
        return formType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FormVersionABTest> abTest() {
        return (Optional<FormVersionABTest>) abTest;
    }

    /**
     * Status of the form version. "live" means it's live on site.
     */
    @JsonIgnore
    public FormVersionResponseObjectResourceStatus status() {
        return status;
    }

    /**
     * ISO8601 timestamp when the form version was created.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * ISO8601 timestamp when the form version was last updated.
     */
    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The type of form.
     */
    public FormVersionResponseObjectResourceAttributes withFormType(FormType formType) {
        Utils.checkNotNull(formType, "formType");
        this.formType = formType;
        return this;
    }

    public FormVersionResponseObjectResourceAttributes withAbTest(FormVersionABTest abTest) {
        Utils.checkNotNull(abTest, "abTest");
        this.abTest = Optional.ofNullable(abTest);
        return this;
    }

    public FormVersionResponseObjectResourceAttributes withAbTest(Optional<? extends FormVersionABTest> abTest) {
        Utils.checkNotNull(abTest, "abTest");
        this.abTest = abTest;
        return this;
    }

    /**
     * Status of the form version. "live" means it's live on site.
     */
    public FormVersionResponseObjectResourceAttributes withStatus(FormVersionResponseObjectResourceStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * ISO8601 timestamp when the form version was created.
     */
    public FormVersionResponseObjectResourceAttributes withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * ISO8601 timestamp when the form version was last updated.
     */
    public FormVersionResponseObjectResourceAttributes withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FormVersionResponseObjectResourceAttributes other = (FormVersionResponseObjectResourceAttributes) o;
        return 
            Objects.deepEquals(this.formType, other.formType) &&
            Objects.deepEquals(this.abTest, other.abTest) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            formType,
            abTest,
            status,
            createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FormVersionResponseObjectResourceAttributes.class,
                "formType", formType,
                "abTest", abTest,
                "status", status,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private FormType formType;
 
        private Optional<? extends FormVersionABTest> abTest = Optional.empty();
 
        private FormVersionResponseObjectResourceStatus status;
 
        private OffsetDateTime createdAt;
 
        private OffsetDateTime updatedAt;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The type of form.
         */
        public Builder formType(FormType formType) {
            Utils.checkNotNull(formType, "formType");
            this.formType = formType;
            return this;
        }

        public Builder abTest(FormVersionABTest abTest) {
            Utils.checkNotNull(abTest, "abTest");
            this.abTest = Optional.ofNullable(abTest);
            return this;
        }

        public Builder abTest(Optional<? extends FormVersionABTest> abTest) {
            Utils.checkNotNull(abTest, "abTest");
            this.abTest = abTest;
            return this;
        }

        /**
         * Status of the form version. "live" means it's live on site.
         */
        public Builder status(FormVersionResponseObjectResourceStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * ISO8601 timestamp when the form version was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * ISO8601 timestamp when the form version was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public FormVersionResponseObjectResourceAttributes build() {
            return new FormVersionResponseObjectResourceAttributes(
                formType,
                abTest,
                status,
                createdAt,
                updatedAt);
        }
    }
}

