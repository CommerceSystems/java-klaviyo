/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class HTMLBlock {

    @JsonProperty("content_type")
    private BlockEnum contentType;

    @JsonProperty("type")
    private HtmlEnum type;

    @JsonProperty("data")
    private HTMLBlockData data;

    @JsonCreator
    public HTMLBlock(
            @JsonProperty("content_type") BlockEnum contentType,
            @JsonProperty("type") HtmlEnum type,
            @JsonProperty("data") HTMLBlockData data) {
        Utils.checkNotNull(contentType, "contentType");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(data, "data");
        this.contentType = contentType;
        this.type = type;
        this.data = data;
    }

    @JsonIgnore
    public BlockEnum contentType() {
        return contentType;
    }

    @JsonIgnore
    public HtmlEnum type() {
        return type;
    }

    @JsonIgnore
    public HTMLBlockData data() {
        return data;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public HTMLBlock withContentType(BlockEnum contentType) {
        Utils.checkNotNull(contentType, "contentType");
        this.contentType = contentType;
        return this;
    }

    public HTMLBlock withType(HtmlEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public HTMLBlock withData(HTMLBlockData data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HTMLBlock other = (HTMLBlock) o;
        return 
            Objects.deepEquals(this.contentType, other.contentType) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.data, other.data);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            contentType,
            type,
            data);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HTMLBlock.class,
                "contentType", contentType,
                "type", type,
                "data", data);
    }
    
    public final static class Builder {
 
        private BlockEnum contentType;
 
        private HtmlEnum type;
 
        private HTMLBlockData data;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder contentType(BlockEnum contentType) {
            Utils.checkNotNull(contentType, "contentType");
            this.contentType = contentType;
            return this;
        }

        public Builder type(HtmlEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder data(HTMLBlockData data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }
        
        public HTMLBlock build() {
            return new HTMLBlock(
                contentType,
                type,
                data);
        }
    }
}

