/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;


public class StaticDateFilter {

    @JsonProperty("type")
    private DateEnum type;

    /**
     * Operators for static date filters.
     * 
     * E.g. "before 2023-01-01"
     */
    @JsonProperty("operator")
    private StaticDateFilterOperator operator;

    @JsonProperty("date")
    private OffsetDateTime date;

    @JsonCreator
    public StaticDateFilter(
            @JsonProperty("type") DateEnum type,
            @JsonProperty("operator") StaticDateFilterOperator operator,
            @JsonProperty("date") OffsetDateTime date) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(operator, "operator");
        Utils.checkNotNull(date, "date");
        this.type = type;
        this.operator = operator;
        this.date = date;
    }

    @JsonIgnore
    public DateEnum type() {
        return type;
    }

    /**
     * Operators for static date filters.
     * 
     * E.g. "before 2023-01-01"
     */
    @JsonIgnore
    public StaticDateFilterOperator operator() {
        return operator;
    }

    @JsonIgnore
    public OffsetDateTime date() {
        return date;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public StaticDateFilter withType(DateEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Operators for static date filters.
     * 
     * E.g. "before 2023-01-01"
     */
    public StaticDateFilter withOperator(StaticDateFilterOperator operator) {
        Utils.checkNotNull(operator, "operator");
        this.operator = operator;
        return this;
    }

    public StaticDateFilter withDate(OffsetDateTime date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StaticDateFilter other = (StaticDateFilter) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.operator, other.operator) &&
            Objects.deepEquals(this.date, other.date);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            operator,
            date);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StaticDateFilter.class,
                "type", type,
                "operator", operator,
                "date", date);
    }
    
    public final static class Builder {
 
        private DateEnum type;
 
        private StaticDateFilterOperator operator;
 
        private OffsetDateTime date;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder type(DateEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Operators for static date filters.
         * 
         * E.g. "before 2023-01-01"
         */
        public Builder operator(StaticDateFilterOperator operator) {
            Utils.checkNotNull(operator, "operator");
            this.operator = operator;
            return this;
        }

        public Builder date(OffsetDateTime date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }
        
        public StaticDateFilter build() {
            return new StaticDateFilter(
                type,
                operator,
                date);
        }
    }
}

