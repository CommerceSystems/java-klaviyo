/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class SendStrategySubObject {

    /**
     * Describes the shape of the options object. Allowed values: ['static', 'throttled', 'immediate', 'smart_send_time']
     */
    @JsonProperty("method")
    private String method;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options_static")
    private Optional<? extends StaticScheduleOptions> optionsStatic;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options_throttled")
    private Optional<? extends ThrottledScheduleOptions> optionsThrottled;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options_sto")
    private Optional<? extends STOScheduleOptions> optionsSto;

    @JsonCreator
    public SendStrategySubObject(
            @JsonProperty("method") String method,
            @JsonProperty("options_static") Optional<? extends StaticScheduleOptions> optionsStatic,
            @JsonProperty("options_throttled") Optional<? extends ThrottledScheduleOptions> optionsThrottled,
            @JsonProperty("options_sto") Optional<? extends STOScheduleOptions> optionsSto) {
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(optionsStatic, "optionsStatic");
        Utils.checkNotNull(optionsThrottled, "optionsThrottled");
        Utils.checkNotNull(optionsSto, "optionsSto");
        this.method = method;
        this.optionsStatic = optionsStatic;
        this.optionsThrottled = optionsThrottled;
        this.optionsSto = optionsSto;
    }
    
    public SendStrategySubObject(
            String method) {
        this(method, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Describes the shape of the options object. Allowed values: ['static', 'throttled', 'immediate', 'smart_send_time']
     */
    @JsonIgnore
    public String method() {
        return method;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<StaticScheduleOptions> optionsStatic() {
        return (Optional<StaticScheduleOptions>) optionsStatic;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ThrottledScheduleOptions> optionsThrottled() {
        return (Optional<ThrottledScheduleOptions>) optionsThrottled;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<STOScheduleOptions> optionsSto() {
        return (Optional<STOScheduleOptions>) optionsSto;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Describes the shape of the options object. Allowed values: ['static', 'throttled', 'immediate', 'smart_send_time']
     */
    public SendStrategySubObject withMethod(String method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    public SendStrategySubObject withOptionsStatic(StaticScheduleOptions optionsStatic) {
        Utils.checkNotNull(optionsStatic, "optionsStatic");
        this.optionsStatic = Optional.ofNullable(optionsStatic);
        return this;
    }

    public SendStrategySubObject withOptionsStatic(Optional<? extends StaticScheduleOptions> optionsStatic) {
        Utils.checkNotNull(optionsStatic, "optionsStatic");
        this.optionsStatic = optionsStatic;
        return this;
    }

    public SendStrategySubObject withOptionsThrottled(ThrottledScheduleOptions optionsThrottled) {
        Utils.checkNotNull(optionsThrottled, "optionsThrottled");
        this.optionsThrottled = Optional.ofNullable(optionsThrottled);
        return this;
    }

    public SendStrategySubObject withOptionsThrottled(Optional<? extends ThrottledScheduleOptions> optionsThrottled) {
        Utils.checkNotNull(optionsThrottled, "optionsThrottled");
        this.optionsThrottled = optionsThrottled;
        return this;
    }

    public SendStrategySubObject withOptionsSto(STOScheduleOptions optionsSto) {
        Utils.checkNotNull(optionsSto, "optionsSto");
        this.optionsSto = Optional.ofNullable(optionsSto);
        return this;
    }

    public SendStrategySubObject withOptionsSto(Optional<? extends STOScheduleOptions> optionsSto) {
        Utils.checkNotNull(optionsSto, "optionsSto");
        this.optionsSto = optionsSto;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SendStrategySubObject other = (SendStrategySubObject) o;
        return 
            Objects.deepEquals(this.method, other.method) &&
            Objects.deepEquals(this.optionsStatic, other.optionsStatic) &&
            Objects.deepEquals(this.optionsThrottled, other.optionsThrottled) &&
            Objects.deepEquals(this.optionsSto, other.optionsSto);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            method,
            optionsStatic,
            optionsThrottled,
            optionsSto);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SendStrategySubObject.class,
                "method", method,
                "optionsStatic", optionsStatic,
                "optionsThrottled", optionsThrottled,
                "optionsSto", optionsSto);
    }
    
    public final static class Builder {
 
        private String method;
 
        private Optional<? extends StaticScheduleOptions> optionsStatic = Optional.empty();
 
        private Optional<? extends ThrottledScheduleOptions> optionsThrottled = Optional.empty();
 
        private Optional<? extends STOScheduleOptions> optionsSto = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Describes the shape of the options object. Allowed values: ['static', 'throttled', 'immediate', 'smart_send_time']
         */
        public Builder method(String method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        public Builder optionsStatic(StaticScheduleOptions optionsStatic) {
            Utils.checkNotNull(optionsStatic, "optionsStatic");
            this.optionsStatic = Optional.ofNullable(optionsStatic);
            return this;
        }

        public Builder optionsStatic(Optional<? extends StaticScheduleOptions> optionsStatic) {
            Utils.checkNotNull(optionsStatic, "optionsStatic");
            this.optionsStatic = optionsStatic;
            return this;
        }

        public Builder optionsThrottled(ThrottledScheduleOptions optionsThrottled) {
            Utils.checkNotNull(optionsThrottled, "optionsThrottled");
            this.optionsThrottled = Optional.ofNullable(optionsThrottled);
            return this;
        }

        public Builder optionsThrottled(Optional<? extends ThrottledScheduleOptions> optionsThrottled) {
            Utils.checkNotNull(optionsThrottled, "optionsThrottled");
            this.optionsThrottled = optionsThrottled;
            return this;
        }

        public Builder optionsSto(STOScheduleOptions optionsSto) {
            Utils.checkNotNull(optionsSto, "optionsSto");
            this.optionsSto = Optional.ofNullable(optionsSto);
            return this;
        }

        public Builder optionsSto(Optional<? extends STOScheduleOptions> optionsSto) {
            Utils.checkNotNull(optionsSto, "optionsSto");
            this.optionsSto = optionsSto;
            return this;
        }
        
        public SendStrategySubObject build() {
            return new SendStrategySubObject(
                method,
                optionsStatic,
                optionsThrottled,
                optionsSto);
        }
    }
}

