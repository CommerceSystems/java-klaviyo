/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public class NoEmailMarketingSubscribed {

    @JsonProperty("subscription")
    private SubscribedEnum subscription;

    @JsonProperty("filters")
    private List<NoEmailMarketingSubscribedFilters> filters;

    @JsonCreator
    public NoEmailMarketingSubscribed(
            @JsonProperty("subscription") SubscribedEnum subscription,
            @JsonProperty("filters") List<NoEmailMarketingSubscribedFilters> filters) {
        Utils.checkNotNull(subscription, "subscription");
        Utils.checkNotNull(filters, "filters");
        this.subscription = subscription;
        this.filters = filters;
    }

    @JsonIgnore
    public SubscribedEnum subscription() {
        return subscription;
    }

    @JsonIgnore
    public List<NoEmailMarketingSubscribedFilters> filters() {
        return filters;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public NoEmailMarketingSubscribed withSubscription(SubscribedEnum subscription) {
        Utils.checkNotNull(subscription, "subscription");
        this.subscription = subscription;
        return this;
    }

    public NoEmailMarketingSubscribed withFilters(List<NoEmailMarketingSubscribedFilters> filters) {
        Utils.checkNotNull(filters, "filters");
        this.filters = filters;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NoEmailMarketingSubscribed other = (NoEmailMarketingSubscribed) o;
        return 
            Objects.deepEquals(this.subscription, other.subscription) &&
            Objects.deepEquals(this.filters, other.filters);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            subscription,
            filters);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NoEmailMarketingSubscribed.class,
                "subscription", subscription,
                "filters", filters);
    }
    
    public final static class Builder {
 
        private SubscribedEnum subscription;
 
        private List<NoEmailMarketingSubscribedFilters> filters;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder subscription(SubscribedEnum subscription) {
            Utils.checkNotNull(subscription, "subscription");
            this.subscription = subscription;
            return this;
        }

        public Builder filters(List<NoEmailMarketingSubscribedFilters> filters) {
            Utils.checkNotNull(filters, "filters");
            this.filters = filters;
            return this;
        }
        
        public NoEmailMarketingSubscribed build() {
            return new NoEmailMarketingSubscribed(
                subscription,
                filters);
        }
    }
}

