
////////////////////////////////////////////////////////////////////////////////////////////
// This file is generated by Speakeasy and any edits will be lost in generation updates.
//
// If you wish to customize this file then place those customizations in `build-extras.gradle` which 
// is not touched by generation updates.
//
// Additions to the plugins block can be made by setting the `additionalPlugins` property (an array 
// of string where each string value is an additional line in the block) in gen.yaml.
////////////////////////////////////////////////////////////////////////////////////////////

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.bouncycastle:bcpg-jdk15on:1.70'
    }
}


plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.30.0'
}

group = 'com.commercesystems'
version = '0.0.2'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.commercesystems'
            artifactId = 'klaviyo-java'
            version = '0.0.2'

            from components.java

            pom {
                name = 'Klaviyo Java SDK'
                description = 'SDK enabling Java developers to easily integrate with the Klaviyo API.'
                url = 'https://github.com/commercesystems/klaviyo-java'
                scm {
                    url = 'https://github.com/commercesystems/klaviyo-java'
                    connection = 'scm:git:git://github.com/commercesystems/klaviyo-java.git'
                    developerConnection = 'scm:git:ssh://git@github.com/commercesystems/klaviyo-java.git'
                }
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://opensource.org/licenses/MIT'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'aaron'
                        name = 'Aaron Shakibpanah'
                        email = 'aaron@commercesystems.com'
                        organization = 'Commerce Systems'
                        organizationUrl = 'https://www.commercesystems.com'
                    }
                }
                organization {
                    name = 'Commerce Systems'
                    url = 'https://www.commercesystems.com'
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(findProperty('signingKey'), findProperty('signingPassphrase'))
    sign publishing.publications.maven
}

task testPgpKey {
    doLast {
        def key = findProperty('signingKey')
        def passphrase = findProperty('signingPassphrase')

        if (key == null || passphrase == null) {
            println 'Signing key or passphrase not found.'
            return
        }

        try {
            def pgpKeyRingCollection = new org.bouncycastle.openpgp.PGPSecretKeyRingCollection(
                    org.bouncycastle.openpgp.PGPUtil.getDecoderStream(new ByteArrayInputStream(key.decodeBase64())),
                    new org.bouncycastle.openpgp.operator.jcajce.JcaKeyFingerprintCalculator()
            )
            println 'PGP key successfully read.'
        } catch (Exception e) {
            println 'Error reading PGP key: ' + e.message
            e.printStackTrace()
        }
    }
}


nexusStaging {
    packageGroup = 'com.commercesystems'
    stagingProfileId = 'your-staging-profile-id' // Replace with your actual ID
    username = findProperty("ossrhUsername")
    password = findProperty("ossrhPassword")
}


dependencies {
    api 'com.fasterxml.jackson.core:jackson-annotations:2.17.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.17.2'
    api('org.openapitools:jackson-databind-nullable:0.2.6') {exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'}
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    implementation 'org.apache.httpcomponents:httpmime:4.5.14'
    implementation 'commons-io:commons-io:2.15.1'
}



apply from: 'build-extras.gradle'
