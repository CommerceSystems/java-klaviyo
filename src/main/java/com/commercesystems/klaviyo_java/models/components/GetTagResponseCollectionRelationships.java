/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.components;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class GetTagResponseCollectionRelationships {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tag-group")
    private Optional<? extends GetTagResponseCollectionTagGroup> tagGroup;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lists")
    private Optional<? extends GetTagResponseCollectionLists> lists;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("segments")
    private Optional<? extends Segments> segments;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("campaigns")
    private Optional<? extends Campaigns> campaigns;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flows")
    private Optional<? extends Flows> flows;

    @JsonCreator
    public GetTagResponseCollectionRelationships(
            @JsonProperty("tag-group") Optional<? extends GetTagResponseCollectionTagGroup> tagGroup,
            @JsonProperty("lists") Optional<? extends GetTagResponseCollectionLists> lists,
            @JsonProperty("segments") Optional<? extends Segments> segments,
            @JsonProperty("campaigns") Optional<? extends Campaigns> campaigns,
            @JsonProperty("flows") Optional<? extends Flows> flows) {
        Utils.checkNotNull(tagGroup, "tagGroup");
        Utils.checkNotNull(lists, "lists");
        Utils.checkNotNull(segments, "segments");
        Utils.checkNotNull(campaigns, "campaigns");
        Utils.checkNotNull(flows, "flows");
        this.tagGroup = tagGroup;
        this.lists = lists;
        this.segments = segments;
        this.campaigns = campaigns;
        this.flows = flows;
    }
    
    public GetTagResponseCollectionRelationships() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetTagResponseCollectionTagGroup> tagGroup() {
        return (Optional<GetTagResponseCollectionTagGroup>) tagGroup;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetTagResponseCollectionLists> lists() {
        return (Optional<GetTagResponseCollectionLists>) lists;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Segments> segments() {
        return (Optional<Segments>) segments;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Campaigns> campaigns() {
        return (Optional<Campaigns>) campaigns;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Flows> flows() {
        return (Optional<Flows>) flows;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetTagResponseCollectionRelationships withTagGroup(GetTagResponseCollectionTagGroup tagGroup) {
        Utils.checkNotNull(tagGroup, "tagGroup");
        this.tagGroup = Optional.ofNullable(tagGroup);
        return this;
    }

    public GetTagResponseCollectionRelationships withTagGroup(Optional<? extends GetTagResponseCollectionTagGroup> tagGroup) {
        Utils.checkNotNull(tagGroup, "tagGroup");
        this.tagGroup = tagGroup;
        return this;
    }

    public GetTagResponseCollectionRelationships withLists(GetTagResponseCollectionLists lists) {
        Utils.checkNotNull(lists, "lists");
        this.lists = Optional.ofNullable(lists);
        return this;
    }

    public GetTagResponseCollectionRelationships withLists(Optional<? extends GetTagResponseCollectionLists> lists) {
        Utils.checkNotNull(lists, "lists");
        this.lists = lists;
        return this;
    }

    public GetTagResponseCollectionRelationships withSegments(Segments segments) {
        Utils.checkNotNull(segments, "segments");
        this.segments = Optional.ofNullable(segments);
        return this;
    }

    public GetTagResponseCollectionRelationships withSegments(Optional<? extends Segments> segments) {
        Utils.checkNotNull(segments, "segments");
        this.segments = segments;
        return this;
    }

    public GetTagResponseCollectionRelationships withCampaigns(Campaigns campaigns) {
        Utils.checkNotNull(campaigns, "campaigns");
        this.campaigns = Optional.ofNullable(campaigns);
        return this;
    }

    public GetTagResponseCollectionRelationships withCampaigns(Optional<? extends Campaigns> campaigns) {
        Utils.checkNotNull(campaigns, "campaigns");
        this.campaigns = campaigns;
        return this;
    }

    public GetTagResponseCollectionRelationships withFlows(Flows flows) {
        Utils.checkNotNull(flows, "flows");
        this.flows = Optional.ofNullable(flows);
        return this;
    }

    public GetTagResponseCollectionRelationships withFlows(Optional<? extends Flows> flows) {
        Utils.checkNotNull(flows, "flows");
        this.flows = flows;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetTagResponseCollectionRelationships other = (GetTagResponseCollectionRelationships) o;
        return 
            Objects.deepEquals(this.tagGroup, other.tagGroup) &&
            Objects.deepEquals(this.lists, other.lists) &&
            Objects.deepEquals(this.segments, other.segments) &&
            Objects.deepEquals(this.campaigns, other.campaigns) &&
            Objects.deepEquals(this.flows, other.flows);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            tagGroup,
            lists,
            segments,
            campaigns,
            flows);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetTagResponseCollectionRelationships.class,
                "tagGroup", tagGroup,
                "lists", lists,
                "segments", segments,
                "campaigns", campaigns,
                "flows", flows);
    }
    
    public final static class Builder {
 
        private Optional<? extends GetTagResponseCollectionTagGroup> tagGroup = Optional.empty();
 
        private Optional<? extends GetTagResponseCollectionLists> lists = Optional.empty();
 
        private Optional<? extends Segments> segments = Optional.empty();
 
        private Optional<? extends Campaigns> campaigns = Optional.empty();
 
        private Optional<? extends Flows> flows = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder tagGroup(GetTagResponseCollectionTagGroup tagGroup) {
            Utils.checkNotNull(tagGroup, "tagGroup");
            this.tagGroup = Optional.ofNullable(tagGroup);
            return this;
        }

        public Builder tagGroup(Optional<? extends GetTagResponseCollectionTagGroup> tagGroup) {
            Utils.checkNotNull(tagGroup, "tagGroup");
            this.tagGroup = tagGroup;
            return this;
        }

        public Builder lists(GetTagResponseCollectionLists lists) {
            Utils.checkNotNull(lists, "lists");
            this.lists = Optional.ofNullable(lists);
            return this;
        }

        public Builder lists(Optional<? extends GetTagResponseCollectionLists> lists) {
            Utils.checkNotNull(lists, "lists");
            this.lists = lists;
            return this;
        }

        public Builder segments(Segments segments) {
            Utils.checkNotNull(segments, "segments");
            this.segments = Optional.ofNullable(segments);
            return this;
        }

        public Builder segments(Optional<? extends Segments> segments) {
            Utils.checkNotNull(segments, "segments");
            this.segments = segments;
            return this;
        }

        public Builder campaigns(Campaigns campaigns) {
            Utils.checkNotNull(campaigns, "campaigns");
            this.campaigns = Optional.ofNullable(campaigns);
            return this;
        }

        public Builder campaigns(Optional<? extends Campaigns> campaigns) {
            Utils.checkNotNull(campaigns, "campaigns");
            this.campaigns = campaigns;
            return this;
        }

        public Builder flows(Flows flows) {
            Utils.checkNotNull(flows, "flows");
            this.flows = Optional.ofNullable(flows);
            return this;
        }

        public Builder flows(Optional<? extends Flows> flows) {
            Utils.checkNotNull(flows, "flows");
            this.flows = flows;
            return this;
        }
        
        public GetTagResponseCollectionRelationships build() {
            return new GetTagResponseCollectionRelationships(
                tagGroup,
                lists,
                segments,
                campaigns,
                flows);
        }
    }
}

