/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.commercesystems.klaviyo_java.models.errors;


import com.commercesystems.klaviyo_java.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class ServerErrorSource {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pointer")
    private Optional<String> pointer;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameter")
    private Optional<String> parameter;

    @JsonCreator
    public ServerErrorSource(
            @JsonProperty("pointer") Optional<String> pointer,
            @JsonProperty("parameter") Optional<String> parameter) {
        Utils.checkNotNull(pointer, "pointer");
        Utils.checkNotNull(parameter, "parameter");
        this.pointer = pointer;
        this.parameter = parameter;
    }
    
    public ServerErrorSource() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> pointer() {
        return pointer;
    }

    @JsonIgnore
    public Optional<String> parameter() {
        return parameter;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ServerErrorSource withPointer(String pointer) {
        Utils.checkNotNull(pointer, "pointer");
        this.pointer = Optional.ofNullable(pointer);
        return this;
    }

    public ServerErrorSource withPointer(Optional<String> pointer) {
        Utils.checkNotNull(pointer, "pointer");
        this.pointer = pointer;
        return this;
    }

    public ServerErrorSource withParameter(String parameter) {
        Utils.checkNotNull(parameter, "parameter");
        this.parameter = Optional.ofNullable(parameter);
        return this;
    }

    public ServerErrorSource withParameter(Optional<String> parameter) {
        Utils.checkNotNull(parameter, "parameter");
        this.parameter = parameter;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ServerErrorSource other = (ServerErrorSource) o;
        return 
            Objects.deepEquals(this.pointer, other.pointer) &&
            Objects.deepEquals(this.parameter, other.parameter);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            pointer,
            parameter);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ServerErrorSource.class,
                "pointer", pointer,
                "parameter", parameter);
    }
    
    public final static class Builder {
 
        private Optional<String> pointer = Optional.empty();
 
        private Optional<String> parameter = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder pointer(String pointer) {
            Utils.checkNotNull(pointer, "pointer");
            this.pointer = Optional.ofNullable(pointer);
            return this;
        }

        public Builder pointer(Optional<String> pointer) {
            Utils.checkNotNull(pointer, "pointer");
            this.pointer = pointer;
            return this;
        }

        public Builder parameter(String parameter) {
            Utils.checkNotNull(parameter, "parameter");
            this.parameter = Optional.ofNullable(parameter);
            return this;
        }

        public Builder parameter(Optional<String> parameter) {
            Utils.checkNotNull(parameter, "parameter");
            this.parameter = parameter;
            return this;
        }
        
        public ServerErrorSource build() {
            return new ServerErrorSource(
                pointer,
                parameter);
        }
    }
}

